pipeline {
    agent {
        node {
            label 'skyvera-jenkins-win-build'
            customWorkspace "c:\\jenkins\\build"
        }
    }
    options {
        skipDefaultCheckout true
		timeout(time: 4, unit: 'HOURS') 
    }
	triggers {
		cron(env.BRANCH_NAME == 'Releases/7.1.0' ? '@midnight' : '')
	}
    parameters {
        string(name: 'Version', defaultValue: '7.1.0.x', description: 'Version to set if new Release build is going to be triggered (x is replaced with new Release build number)')
		string(name: 'StagingTargetHost', defaultValue: '10.25.1.149,10.25.1.146,10.25.1.135', description: 'Staging Target hosts to deploy to')
		string(name: 'StagingUserName', defaultValue: 'epm\\apps22', description: 'Name of the user to use when connecting PowerShell to the target host')
        string(name: 'StagingPassword', defaultValue: 'QpklZg35D6', description: 'Password used along with the User name')
		string(name: 'StagingAppUrl', defaultValue: 'https://apps22.epmlive.com', description: 'Staging SharePoint application url for deployment')
        string(name: 'ReleaseBranch', defaultValue: '', description: 'Release branch to trigger (leave empty to use the same branch name as this build, replace "/" with "%2F")')
        string(name: 'ReleaseBranchBuild', defaultValue: '', description: 'Release build number to get artifacts from instead of triggering new build (leave empty to trigger new build)')
        string(name: 'DeployBranch', defaultValue: '', description: 'Deploy branch to trigger (leave empty to use the same branch name as this build, replace "/" with "%2F")')
        string(name: 'ProtractorBranch', defaultValue: 'TestAutomation', description: 'Protractor UI tests branch to trigger (leave empty to use the same branch name as this build, replace "/" with "%2F")')
    	string(name: 'ProtractorTargetHost', defaultValue: '10.25.1.146', description: 'Target host for protractor')
		string(name: 'ProtractorHostsName', defaultValue: 'apps22.epmlive.com', description: 'Target full host name for protractor')
		string(name: 'ProtractorBaseUrl', defaultValue: 'https://apps22.epmlive.com', description: 'Target baseUrl for protractor')
		string(name: 'ProtractorSiteCollection', defaultValue: '/sites/NYISO', description: 'Protractor siteCollection')
		string(name: 'ProtractorUsername', defaultValue: 'servicedesk', description: 'Protractor username')
		string(name: 'ProtractorPassword', defaultValue: 'A123456*', description: 'Protractor password')
		string(name: 'RunTSClient', defaultValue: 'true', description: 'Execute legacy TS-Client tests')
    }
    stages {
		stage ("Weekly Deploy") {
			when {
				expression { new Date()[Calendar.DAY_OF_WEEK] == Calendar.SUNDAY }
			}
			stages {
				stage('Preparing Release') {
					steps { 
						timestamps {
							script {
								env.RELEASE_BRANCH = currentBuild.getProjectName()
								if (params.ReleaseBranch?.trim()) {
									env.RELEASE_BRANCH = params.ReleaseBranch
								}
								
								if (params.ReleaseBranchBuild?.trim()) {
									echo 'Using existing Release build...'
									env.RELEASE_BRANCH_BUILD = params.ReleaseBranchBuild
								} else {
									echo 'Triggering Release build job...'
									def releaseBuild = build(
										job: "../EPML-RC/${env.RELEASE_BRANCH}",
										wait: true,
										parameters: [
											[$class: 'StringParameterValue', name: 'Version', value: params.Version.replace('x', env.BUILD_NUMBER)]
										]
									)
									env.RELEASE_BRANCH_BUILD = releaseBuild.getNumber()
								}
								echo "Release Branch Build #${env.RELEASE_BRANCH_BUILD}"
							}
						}
					}
				}
				stage('Deploy Staging') {
					steps {
						timestamps {
							script {
								echo 'Triggering Deploy job...'
								env.DEPLOY_BRANCH = currentBuild.getProjectName()
								if (params.DeployBranch?.trim()) {
									env.DEPLOY_BRANCH = params.DeployBranch
								}
								build(
									job: "../EPML-Deploy/${env.DEPLOY_BRANCH}", 
									wait: true,
									parameters: [
										[$class: 'StringParameterValue', name: 'TargetHost', value: params.StagingTargetHost],
										[$class: 'StringParameterValue', name: 'UserName', value: params.StagingUserName],
										[$class: 'StringParameterValue', name: 'Password', value: params.StagingPassword],
										[$class: 'StringParameterValue', name: 'FullRcBranch', value: env.RELEASE_BRANCH],
										[$class: 'StringParameterValue', name: 'FullRcBranchBuild', value: env.RELEASE_BRANCH_BUILD],
										[$class: 'StringParameterValue', name: 'FullHostName', value: params.StagingAppUrl]
									]
								)
							}
						}
					}
				}
			}
		}		
		stage('Tests') {
			parallel {
				stage('Automated Tests') {
					stages {
						stage('Protractor Tests') {
							steps {
								timestamps {
									script {
										echo 'Triggering Protractor UI tests job...'
										env.PROTRACTOR_BRANCH = currentBuild.getProjectName()
										if (params.ProtractorBranch?.trim()) {
											env.PROTRACTOR_BRANCH = params.ProtractorBranch
										}
										build(
											job: "../EPML-Regression/${env.PROTRACTOR_BRANCH}", 
											wait: true,
											propagate: false,
											parameters: [
												[$class: 'StringParameterValue', name: 'TargetHost', value: params.ProtractorTargetHost],
												[$class: 'StringParameterValue', name: 'FullHostName', value: params.ProtractorHostsName],
												[$class: 'StringParameterValue', name: 'BaseUrl', value: params.ProtractorBaseUrl],
												[$class: 'StringParameterValue', name: 'SiteCollection', value: params.ProtractorSiteCollection],
												[$class: 'StringParameterValue', name: 'Username', value: params.ProtractorUsername],
												[$class: 'StringParameterValue', name: 'Password', value: params.ProtractorPassword]
											]
										)
									}
								}
							}
						}
						stage('Performance Tests') {
							steps {
								timestamps {
									script {
										echo 'Triggering performance tests job...'
										build(
											job: "../EPML-Perf/EPML-Perf", 
											wait: true,
											propagate: false,
											parameters: [
												[$class: 'StringParameterValue', name: 'APP_URL', value: params.ProtractorTargetHost]
											]
										)
									}
								}
							}
						}
						stage('Security Tests') {
							when {
								expression { new Date()[Calendar.DAY_OF_WEEK] == Calendar.SUNDAY }
							}
							steps {
								timestamps {
									script {
										echo 'Triggering security tests job...'
										build(
											job: "../EPML-Sec/EPML-Sec", 
											wait: true,
											propagate: false
										)
									}
								}
							}
						}		
					}
				}
				stage('TS-Client Tests') {
					when {
						expression { params.RunTSClient == 'true' }
					}
					steps {
						timestamps {
							script {
								echo 'Triggering TS-Client tests job...'
								build(
									job: "../EPML-TS/EPML-TS", 
									wait: true,
									parameters: [
										[$class: 'StringParameterValue', name: 'FullRcBranch', value: env.RELEASE_BRANCH],
										[$class: 'StringParameterValue', name: 'FullRcBranchBuild', value: env.RELEASE_BRANCH_BUILD]
									]
								)
							}
						}		
					}
				}
			}
		}
    }
}
