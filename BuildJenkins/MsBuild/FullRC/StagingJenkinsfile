pipeline {
    agent {
        node {
            label 'epmlive-win'
            customWorkspace "c:\\jenkins\\build"
        }
    }
    options {
        skipDefaultCheckout true
    }
	triggers {
		cron('@midnight')
	}
    parameters {
        string(name: 'Version', defaultValue: '7.1.8.x', description: 'Version to set if new Release build is going to be triggered (x is replaced with new Release build number)')
		
		string(name: 'StagingTargetHost', defaultValue: '10.137.18.11,10.137.18.115,10.137.18.48', description: 'Staging Target hosts to deploy to')
		string(name: 'StagingUserName', defaultValue: 'epm\\apps22', description: 'Name of the user to use when connecting PowerShell to the target host')
        string(name: 'StagingPassword', defaultValue: 'QpklZg35D6', description: 'Password used along with the User name')
		string(name: 'StagingAppUrl', defaultValue: 'https://apps22.epmlive.com', description: 'Staging SharePoint application url for deployment')
      
        string(name: 'ProtractorBranch', defaultValue: 'develop', description: 'Protractor UI tests branch to trigger (leave empty to use the same branch name as this build, replace "/" with "%2F")')
    	string(name: 'ProtractorTargetHost', defaultValue: '10.137.18.48', description: 'Target host for protractor')
		
		string(name: 'RunTSClient', defaultValue: 'true', description: 'Execute legacy TS-Client tests')
		
		string(name: 'ForceStage', defaultValue: 'false', description: 'Force staging deployment')
    }
    stages {
		stage ("Weekly Deploy") {
			when {
				expression { params.ForceStage == 'true'}
			}
			stages {
				stage('Preparing Release') {
					steps { 
						timestamps {
							script {
								env.RELEASE_BRANCH = currentBuild.getProjectName()
								echo 'Triggering Release build job...'
								def releaseBuild = build(
									job: "../EPML-RC/${env.RELEASE_BRANCH}",
									wait: true,
									parameters: [
										[$class: 'StringParameterValue', name: 'Version', value: params.Version.replace('x', env.BUILD_NUMBER)]
									]
								)
								env.RELEASE_BRANCH_BUILD = releaseBuild.getNumber()
								echo "Release Branch Build #${env.RELEASE_BRANCH_BUILD}"
							}
						}
					}
				}
				
				stage('Deploy Staging') {
					steps {
						timestamps {
							script {
								echo 'Triggering Deploy job...'
								env.DEPLOY_BRANCH = currentBuild.getProjectName()
								build(
									job: "../EPML-Deploy/${env.DEPLOY_BRANCH}", 
									wait: true,
									parameters: [
										[$class: 'StringParameterValue', name: 'TargetHost', value: params.StagingTargetHost],
										[$class: 'StringParameterValue', name: 'UserName', value: params.StagingUserName],
										[$class: 'StringParameterValue', name: 'Password', value: params.StagingPassword],
										[$class: 'StringParameterValue', name: 'FullHostName', value: params.StagingAppUrl]
									]
								)
							}
						}
					}
				}
			}
		}		
		stage('Tests') {
			parallel {
				stage('Automated Tests') {
					stages {
						stage('Protractor Tests') {
							steps {
								timestamps {
									script {
										echo 'Triggering Protractor UI tests job...'
										env.PROTRACTOR_BRANCH = currentBuild.getProjectName()
										if (params.ProtractorBranch?.trim()) {
											env.PROTRACTOR_BRANCH = params.ProtractorBranch
										}
										build(
											job: "../eng-qa-integration/epm-live-skyvera-protractor-devstaging-automation", 
											wait: true,
											propagate: false
										)
									}
								}
							}
						}
						stage('Performance Tests') {
							steps {
								timestamps {
									script {
										echo 'Triggering performance tests job...'
										build(
											job: "../EPML-Perf/EPML-Perf", 
											wait: true,
											propagate: false,
											parameters: [
												[$class: 'StringParameterValue', name: 'APP_URL', value: params.ProtractorTargetHost]
											]
										)
									}
								}
							}
						}
						stage('Security Tests') {
							when {
								expression { new Date()[Calendar.DAY_OF_WEEK] == Calendar.SUNDAY }
							}
							steps {
								timestamps {
									script {
										echo 'Triggering security tests job...'
										build(
											job: "../EPML-Sec/EPML-Sec", 
											wait: true,
											propagate: false
										)
									}
								}
							}
						}		
					}
				}
				stage('TS-Client Tests') {
					when {
						expression { params.RunTSClient == 'true' }
					}
					steps {
						timestamps {
							script {
								echo 'Triggering TS-Client tests job...'
								env.TS_BRANCH = currentBuild.getProjectName()
								build(
									job: "../EPML-TS/${env.TS_BRANCH}", 
									wait: true
								)
							}
						}		
					}
				}
			}
		}
    }
}
