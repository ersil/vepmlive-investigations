!function () { "use strict"; function initializeNavigation() { $(function () { var $ = window.jQuery, $$ = function () { var _currentWebUrl = function () { return window.epmLiveNavigation.currentWebUrl }, _parseJson = function (xml) { return eval("(" + window.xml2json($.parseXML(xml), "") + ")") }, _responseIsSuccess = function (e) { return 0 == e["@Status"] }; return { currentWebUrl: _currentWebUrl, parseJson: _parseJson, responseIsSuccess: _responseIsSuccess } }(), base64Service = function () { var e = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="; return { decode: function (i) { var n, a, t, o, s = "", r = "", d = "", l = 0; /[^A-Za-z0-9\+\/\=]/g.exec(i) && console.log('There were invalid base64 characters in the input text.\nValid base64 characters are A-Z, a-z, 0-9, "+", "/",and "="\nExpect errors in decoding.'), i = i.replace(/[^A-Za-z0-9\+\/\=]/g, ""); do { n = e.indexOf(i.charAt(l++)) << 2 | (t = e.indexOf(i.charAt(l++))) >> 4, a = (15 & t) << 4 | (o = e.indexOf(i.charAt(l++))) >> 2, r = (3 & o) << 6 | (d = e.indexOf(i.charAt(l++))), s += String.fromCharCode(n), 64 != o && (s += String.fromCharCode(a)), 64 != d && (s += String.fromCharCode(r)), n = a = r = "", t = o = d = "" } while (l < i.length); return unescape(s) } } }(), epmLiveService = function () { var e = function (i, n, a, t) { var o = $$.currentWebUrl(); o ? $.ajax({ type: "POST", url: (o + "/_vti_bin/WorkEngine.asmx/Execute").replace(/\/\//g, "/"), data: "{ Function: '" + i + "', Dataxml: '" + n + "' }", contentType: "application/json; charset=utf-8", dataType: "json", success: function (e) { if (e.d) { var i = $$.parseJson(e.d).Result; $$.responseIsSuccess(i) ? a(i) : t(e) } else t(e) }, error: function (e) { t(e) } }) : window.setTimeout(function () { e(i, n, a, t) }, 1) }; return { execute: e } }(), jqCookie = $.cookie; $.cookie = function (e, i, n) { if (e = e + "-u-" + window.epmLiveNavigation.currentUserId, jqCookie) { if (!i) return jqCookie(e); jqCookie(e, i, n) } }; var epmLiveNavigation = function () { function hideMenu() { for (var e = 0; e < tlNodes.length; e++) { var i = tlNodes[e]; if (i.selected()) { i.closeNav(); break } } } function changePinState(e, i) { var n = ["s4-ribbonrow", "s4-workspace"]; for (var a in n) if (n.hasOwnProperty(a)) { var t = $("#" + n[a]); t.removeClass("epm-nav-pinned"), t.removeClass("epm-nav-unpinned"), t.addClass("epm-nav-" + e) } var o = $("#epm-nav-pin"); o.removeClass("epm-nav-pin-pinned"), o.removeClass("epm-nav-pin-unpinned"), o.addClass("epm-nav-pin-" + e), "unpinned" === e && hideMenu(), $sn.data("pinstate", e), i && $.cookie(pinStateCookie, e, cookieOptions) } function getSelectedSubLevelNode() { var e = "epm-nav-top-ql"; try { var i = $.parseJSON($.cookie(selectedTlNodeCookie)); i.webUrl === $$.currentWebUrl() && (e = i.id) } catch (e) { } return e.replace("epm-nav-top-", "epm-nav-sub-") } function getLinkNodes(e) { return $("#" + e).find(".epm-nav-sub-menu").find("div[id^=E]") } function selectLink() { var e = !1, i = $.parseJSON($.cookie(selectedLinkCookie)); if (null !== i && window.location.href.indexOf(i.url) > 0 && (e = !0), i) if (i.id) { var n = $($sn.find("#" + i.id).get(0)); if (n.length > 0) { var a = n.parent(), t = a.parent().get(0).id; window.location.href.indexOf(i.url.replace("_layouts", "_layouts/15")) <= 0 && "epm-nav-sub-favorites-static-links" !== t && "epm-nav-sub-recent-static-links" !== t && "epm-nav-sub-new-static-links" !== t && (a.addClass(selectedClass), e = !0) } } else { var o = i.index, s = i.uri; if (-1 !== window.location.href.indexOf(s)) for (var r = getLinkNodes($("#" + getSelectedSubLevelNode()).parent().attr("id")), d = 0; d < r.length; d++) if (d === o) { $(r[d]).find('a[href="' + s + '"]:first').parents("table").addClass(selectedClass), e = !0; break } } var l = escape(unescape(window.location.href)).toLowerCase(); if (e) { var c = $(".epm-nav-node-selected"); c.find("a").each(function () { var i = escape(unescape(this.href)).toLowerCase(); i = i.replace("_layouts", "_layouts/15"), 0 === l.indexOf(i) && l !== i && (c.removeClass(selectedClass), e = !1, $.cookie(selectedLinkCookie, null)) }) } e || ($("td.epm-nav-node").each(function () { e || $(this).find("a").each(function () { if (!e) { var n = $(this), a = escape(unescape(n.get(0).href)).toLowerCase(); if (-1 !== l.indexOf(a)) { n.parents("table").addClass(selectedClass), e = !0; var t = -1, o = n.parents("div")[0], s = $(o).siblings("div"); if (s) for (var r = getLinkNodes($(s[0]).parent().parent().attr("id")), d = 0; d < r.length; d++) r[d].id === o.id && (t = d); $.cookie(selectedLinkCookie, JSON.stringify({ index: t, uri: n.attr("href") }), cookieOptions), i = $.parseJSON($.cookie(selectedLinkCookie)) } } }) }), e || $("#epm-nav-sub-workplace").find("a").each(function () { if (!e) { var i = $(this), n = escape(unescape(i.get(0).href)).toLowerCase(); -1 !== l.indexOf(n) && (i.parents("li").addClass(selectedClass), e = !0) } })), $("a.rtIn").live("click", function () { $.cookie("resetlink", "1") }), e ? $.cookie("resetlink", "0") : (null === i && (i = $(this)), l = escape(unescape(i.uri)).toLowerCase(), $("td.epm-nav-node").each(function () { e || $(this).find("a").each(function () { if (!e) { var i = $(this), n = escape(unescape(i.get(0).href)).toLowerCase(); -1 !== l.indexOf(n) && "0" == $.cookie("resetlink") && (i.parents("table").addClass(selectedClass), e = !0) } }) })) } function saveLinkState(e) { var i = {}; e.find(".epm-nav-cat").each(function () { var e = $(this); i[e.text()] = $(e.find("span")[0]).hasClass(expandedClass) }), saveExpandState(e.get(0).id, i) } function saveExpandState(e, i) { var n = $.parseJSON($.cookie(expandStateCookie)) || {}; n[e] = i, $.cookie(expandStateCookie, JSON.stringify(n), cookieOptions) } function expandNodes(e) { var i = $.parseJSON($.cookie(expandStateCookie)); if (i) { var n = "epm-nav-sub-ql"; if (e) for (var a = 0; a < tlNodes.length; a++) { var t = tlNodes[a]; if (t.provider === e) { n = t.id.replace("epm-nav-top-", "epm-nav-sub-"); break } } var o = i[n]; if (o) if ("epm-nav-sub-ql" === n) for (var s = getLinkNodes("epm-nav-sub-ql"), r = 0; r < s.length; r++) { var d = s[r], l = d.id.replace("Nodes", ""); o[$("#" + l.replace("EPMLiveNavn", "EPMLiveNavt")).text()] || TreeView_ToggleNode(window.EPMLiveNav_Data, 0, document.getElementById(l), " ", document.getElementById(d.id)) } else { var c = $("#" + n).find(".epm-nav-cat"); "epm-nav-sub-settings" === n && c.each(function () { collapseLinks($(this)) }), c.each(function () { var e = $(this), i = e.text(), n = o[i]; $(e.find("span")[0]).hasClass(expandedClass) ? n || collapseLinks(e) : n && expandLinks(e) }) } } } function expandLinks(e) { var i = e.get(0).id, n = $(e.find("span")[0]), a = $("#" + i + "-links"); n.removeClass(collapsedClass), n.addClass(expandedClass), a.removeClass(collapsedClass), a.addClass(expandedClass) } function collapseLinks(e) { var i = e.get(0).id, n = $(e.find("span")[0]), a = $("#" + i + "-links"); n.removeClass(expandedClass), n.addClass(collapsedClass), a.removeClass(expandedClass), a.addClass(collapsedClass) } function registerLinkEvents() { var e = function () { $("li.epm-nav-node").find("a").each(function () { if (window.epmLiveNavigation.stopAddingTooltips) return window.epmLiveNavigation.stopAddingTooltips = !1, !1; var e = $(this); if (!e.attr("title")) { var i = e.find("span"); if (i) if ($.browser.msie) { var n = e.clone().css({ display: "inline", width: "auto", visibility: "hidden" }).appendTo("body"); n.width() + i.offset().left + 15 > e.width() && e.attr("title", i.text()), n.remove() } else e.width() < i.width() && e.attr("title", i.text()) } }) }; $(".epm-nav-cat").click(function () { var e = $(this); $(e.find("span")[0]).hasClass(collapsedClass) ? expandLinks(e) : collapseLinks(e), saveLinkState(e.parent()) }), $("#epm-nav-top li").click(function () { window.epmLiveNavigation.stopAddingTooltips = !0, window.setTimeout(function () { e() }, 1e3) }), e() } function handleContextualCommand(id, webId, listId, itemId, command, kind, callBackFunction) { var removeLink = function (e, i) { var n = function (e, i) { var n = $("#" + e), a = n.parent(); n.fadeOut(300, function () { n.remove(); var e = a.get(0).id; if ("epm-nav-sub-workspaces-static-links" === e) { if (1 === a.find("a").length) { var t = !1; a.find("li").each(function () { "No favorite workspaces" === $(this).text() && (t = !0) }), t || $('<li class="epm-nav-sub-placeholder">No favorite workspaces</li>').insertAfter($(a.find(".epm-nav-sub-header-bottom").get(1))) } } else if ("epm-nav-sub-favorites-static-links" === e) { var o = !1, s = !1, r = 0; if (a.find("li").each(function () { var e = $(this); "Items" === e.text() && (r = e.index()) }), a.find("li").each(function () { var e = $(this); e.hasClass("epm-nav-node") && (e.index() > r ? o = !0 : s = !0) }), !s) { var d = !1; a.find("li").each(function () { "No pages" === $(this).text() && (d = !0) }), d || $('<li class="epm-nav-sub-placeholder">No pages</li>').insertAfter($(a.find(".epm-nav-sub-header-bottom").get(1))) } if (!o) { var l = !1; a.find("li").each(function () { "No items" === $(this).text() && (l = !0) }), l || (a.get(0).innerHTML += '<li class="epm-nav-sub-placeholder">No items</li>') } } i && ("RI" === i ? (toastr.options = { closeButton: !1, debug: !1, positionClass: "toast-top-right", onclick: null, showDuration: 300, hideDuration: 1e3, timeOut: 5e3, extendedTimeOut: 1e3, showEasing: "swing", hideEasing: "linear", showMethod: "fadeIn", hideMethod: "fadeOut" }, toastr.success("An existing item has been removed from your favorites list.")) : SP.UI.Notify.removeNotification(i)) }) }; epmLiveService.execute("RemoveNavigationLink", e, function (a) { n(e, i) }, function (a) { n(e, i) }) }, url = window.epmLiveNavigation.currentWebUrl, gaUrl = (url + "/_layouts/15/epmlive/gridaction.aspx?webid=" + webId + "&listid=" + listId + "&id=" + itemId + "&").replace(/\/\//g, "/"), rpUrl = (url + "/_layouts/15/epmlive/redirectionproxy.aspx?webid=" + webId + "&listid=" + listId + "&id=" + itemId + "&").replace(/\/\//g, "/"), redirectUrl = ""; switch (command) { case "nav:add": redirectUrl = rpUrl + "action=new"; break; case "nav:team": var wId = "", lId = "", iId = ""; if ("undefined" !== itemId) try { var info = window.epmLiveNavigation.wsTeamDict[webId].split("."); "-1" !== info[2] && (wId = info[0], lId = info[1], iId = info[2]) } catch (e) { } redirectUrl = (url + "/_layouts/15/epmlive/gridaction.aspx?").replace(/\/\//g, "/") + "action=buildteam&webid=" + (wId || webId), iId && (redirectUrl = redirectUrl + "&listid=" + lId + "&id=" + iId) } if (!redirectUrl && command) if (-1 !== command.indexOf("epkcommand:")) redirectUrl = gaUrl + "action=epkcommand&subaction=" + command.split(":")[1]; else { if ("createworkspace" === command) { var loadWSCreationDialog = function () { window.CreateEPMLiveWorkspace ? window.CreateEPMLiveWorkspace(listId, itemId) : window.setTimeout(function () { loadWSCreationDialog() }, 1) }; return void loadWSCreationDialog() } redirectUrl = gaUrl + "action=" + command } if (redirectUrl && (redirectUrl = redirectUrl.split("#")[0]), "view" === command || "edit" === command || "gotoplanner" === command || "GoToTaskPlanner" === command) { var page = "", wUrl = $$.currentWebUrl(), urlParts = window.location.href.split("?"); page = "/" === wUrl ? urlParts[0] : wUrl + urlParts[0].split(escape(wUrl))[1], page = escape(page), redirectUrl += "&source=" + page } switch (kind + "") { case "-1": if ("delete" == command) { if (confirm("Are you sure you want to send the item(s) to the Recycle Bin?")) { var nId = SP.UI.Notify.addNotification("Deleting Item...", !0, "", null); $.get(redirectUrl).always(function () { SP.UI.Notify.removeNotification(nId), "" != callBackFunction && eval(callBackFunction + "(" + id + ")") }) } } else { var options = { url: redirectUrl, showMaximized: !1, dialogReturnValueCallback: function (e) { 1 == e && KanbanClient.loadKanBanPlanners() } }; SP.SOD.execute("SP.UI.Dialog.js", "SP.UI.ModalDialog.showModalDialog", options) } return !0; case "0": return OpenCreateWebPageDialog(redirectUrl), !0; case "1": return window.location.href.toLowerCase().toString().indexOf("isdlg") > -1 ? "" != callBackFunction ? SP.SOD.execute("SP.UI.Dialog.js", "SP.UI.ModalDialog.showModalDialog", { url: redirectUrl, width: 650, height: 700, dialogReturnValueCallback: eval(callBackFunction) }) : SP.SOD.execute("SP.UI.Dialog.js", "SP.UI.ModalDialog.showModalDialog", { url: redirectUrl, width: 650, height: 700 }) : location.href = redirectUrl, !0; case "2": return window.open(redirectUrl + "&IsDlg=1", "", "height=100, width=200, toolbar=no, menubar=no, scrollbars=yes, resizable=yes,location=no, directories=no, status=yes"), !0; case "3": return window.open(redirectUrl + "&IsDlg=1", "", "width=" + screen.width + ",height=" + screen.height + ",top=0,left=0, toolbar=no, menubar=no, scrollbars=yes, resizable=yes,location=no, directories=no, status=yes"), !0; case "5": return "" != callBackFunction ? SP.SOD.execute("SP.UI.Dialog.js", "SP.UI.ModalDialog.showModalDialog", { url: redirectUrl, width: 700, height: 500, dialogReturnValueCallback: eval(callBackFunction) }) : SP.SOD.execute("SP.UI.Dialog.js", "SP.UI.ModalDialog.showModalDialog", { url: redirectUrl, width: 700, height: 500 }), !0; case "6": var isResImportRunning = !1, isSecRunning = !1; if ("epkcommand:rpeditor" == command) isResImportRunning = window.epmLiveNavigation.isImportResourceRunning(); else if ("buildteam" == command) isSecRunning = window.epmLiveNavigation.isSecurityJobRunning(window.epmLive.currentWebUrl, listId, itemId); else if ("nav:team" == command && "" != window.epmLiveNavigation.wsTeamDict[webId]) { var idInfo = window.epmLiveNavigation.wsTeamDict[webId].split("."); isSecRunning = window.epmLiveNavigation.isSecurityJobRunning(window.epmLive.currentWebUrl, idInfo[1], idInfo[2]) } return isResImportRunning || isSecRunning ? (isResImportRunning ? alert("The Resource Planner cannot be opened because there is an active resource import job running.") : isSecRunning && alert("The team cannot be edited because the security queue job has not completed. This should be completed in less than a minute or so - please try again."), !1) : ("" != callBackFunction ? SP.SOD.execute("SP.UI.Dialog.js", "SP.UI.ModalDialog.showModalDialog", { url: redirectUrl, showMaximized: !0, showClose: !1, dialogReturnValueCallback: eval(callBackFunction) }) : SP.SOD.execute("SP.UI.Dialog.js", "SP.UI.ModalDialog.showModalDialog", { url: redirectUrl, showMaximized: !0, showClose: !1 }), !0); case "98": if ("nav:addToFav" !== command) if ("nav:remove" !== command && "nav:removeFavWS" !== command && "nav:removeFavRI" !== command) $.get(redirectUrl).always(function () { removeLink(id) }); else { var fKind = null; if ("nav:removeFavWS" === command ? $("#epm-nav-sub-workspaces-static-links").find("a").each(function () { var e = $(this); e.data("webid") === webId && (id = e.parent().get(0).id) }) : "nav:removeFavRI" === command && $("#epm-nav-sub-favorites-static-links").find("a").each(function () { var e = $(this); e.data("listid") === listId && e.data("itemid") == itemId && (id = e.parent().get(0).id, fKind = "RI") }), removeLink(id, fKind), "nav:remove" === command) { var $a = $("#" + id).find("a"); window.Analytics.turnOffFav({ siteid: $a.data("siteid"), webid: $a.data("webid"), listid: $a.data("listid"), itemid: $a.data("itemid"), url: $a.get(0).href }) } } else { var $link = $($("#" + id).find("a").get(0)), title = $link.text(), webUrl = $link.attr("href"), _$$ = window.epmLive; listId = "undefined" === listId ? null : listId, itemId = "undefined" === itemId ? null : itemId; var isItem = null === itemId ? "False" : "True", riFav = !1, data = '<Data><Param key="SiteId">' + _$$.currentSiteId + '</Param><Param key="WebId">' + webId + '</Param><Param key="ListId">' + listId + '</Param><Param key="ListViewUrl"></Param><Param key="ListIconClass"></Param><Param key="ItemId">' + itemId + '</Param><Param key="FString">' + webUrl + '</Param><Param key="Type">4</Param><Param key="UserId">' + _$$.currentUserId + '</Param><Param key="Title">' + title + '</Param><Param key="FileIsNull"></Param><Param key="IsItem">' + isItem + "</Param></Data>", methodName = "AddFavoritesWs", linkKind = 3, icon = null; if ("epm-nav-sub-recent-static-links" === $link.parent().parent().get(0).id) { methodName = "AddFavorites", linkKind = 1; try { icon = $($link.parent().find("span").get(0)).attr("class").split(" ")[1] } catch (e) { } data = '<Data><Param key="SiteId">' + _$$.currentSiteId + '</Param><Param key="WebId">' + webId + '</Param><Param key="ListId">' + listId + '</Param><Param key="ListViewUrl"></Param><Param key="ListIconClass">' + icon + '</Param><Param key="ItemId">' + itemId + '</Param><Param key="FString"></Param><Param key="Type">2</Param><Param key="UserId">' + _$$.currentUserId + '</Param><Param key="Title">' + title + '</Param><Param key="FileIsNull"></Param><Param key="IsItem">True</Param></Data>', riFav = !0 } var notify = function () { riFav && (toastr.options = { closeButton: !1, debug: !1, positionClass: "toast-top-right", onclick: null, showDuration: 300, hideDuration: 1e3, timeOut: 5e3, extendedTimeOut: 1e3, showEasing: "swing", hideEasing: "linear", showMethod: "fadeIn", hideMethod: "fadeOut" }, toastr.success("A new item has been added to your favorites list.")) }; id = (new Date).getTime() + "", epmLiveService.execute(methodName, data, function (e) { window.epmLiveNavigation.registerLink({ id: id, title: title, url: webUrl, category: null, cssClass: icon, order: null, siteId: _$$.currentSiteId, webId: webId, listId: listId, itemId: itemId, external: !1, visible: !0, active: !0, seprator: !1, kind: linkKind }), notify() }, function (e) { window.epmLiveNavigation.registerLink({ id: id, title: title, url: webUrl, category: null, cssClass: null, order: null, siteId: _$$.currentSiteId, webId: webId, listId: listId, itemId: itemId, external: !1, visible: !0, active: !0, seprator: !1, kind: linkKind }), notify() }) } break; case "99": if (confirm("Are you sure you want to send the item(s) to the Recycle Bin?")) { var nId = SP.UI.Notify.addNotification("Deleting Item...", !0, "", null); "nav:remove" !== command ? $.get(redirectUrl, function (data) { "General Error: You do not have permissions to delete users.\r\n" == data ? (SP.UI.Notify.removeNotification(nId), SP.UI.Notify.addNotification("You do not have permission to delete Resources", !1, "", null)) : data.startsWith("General Error:") ? (SP.UI.Notify.removeNotification(nId), alert(data.replace("General Error: ", ""))) : (removeLink(id, nId), SP.UI.Notify.removeNotification(nId), "" != callBackFunction && eval(callBackFunction + "(" + id + ")")) }) : (removeLink(id, nId), SP.UI.Notify.removeNotification(nId), "" != callBackFunction && eval(callBackFunction + "(" + id + ")")) } break; default: var options; "" != callBackFunction && "undefined" != callBackFunction ? (callBackFunction = eval(callBackFunction), options = { url: redirectUrl, width: 700, dialogReturnValueCallback: Function.createCallback(Function.createDelegate(null, callBackFunction), id) }) : options = "approve" === command ? { url: redirectUrl, width: 700, dialogReturnValueCallback: approveDialogCallback } : { url: redirectUrl, width: 700 }, SP.SOD.execute("SP.UI.Dialog.js", "SP.UI.ModalDialog.showModalDialog", options) } } function approveDialogCallback(e, i) { e == SP.UI.DialogResult.OK && window.location.reload() } function registerEvents() { var e = window.TreeView_HoverNode, i = window.TreeView_UnhoverNode, n = window.TreeView_ToggleNode, a = 0; $("td.epm-nav-node").find("a").each(function () { var e = $(this), i = e.offset().left; 0 === a ? a = i : i > a && e.width(112) }), $("span#epm-nav-asoitems-info").on("shown.bs.tooltip", function () { var e = $(this).parent().find("div.tooltip"), i = e.offset(); i.top -= 25, e.remove(), $("body").append(e), e.offset(i) }), window.TreeView_HoverNode = function (i, n) { var a = $(n); a.hasClass(nodeClass) ? a.parent().parent().parent().addClass(hoverClass) : e(i, n) }, window.TreeView_UnhoverNode = function (e) { $(e).hasClass(nodeClass) ? $(e).parent().parent().parent().removeClass(hoverClass) : i(e) }, window.TreeView_ToggleNode = function (e, i, a, t, o) { var s = null, r = $.parseJSON($.cookie(expandStateCookie)); r && (r = $.parseJSON($.cookie(expandStateCookie))["epm-nav-sub-ql"]) && (s = r); for (var d = s || {}, l = null, c = $(a).parents("div"), p = 0; p < c.length; p++) { var v = c[p]; if ($(v).hasClass("epm-nav-sub")) { for (var u = getLinkNodes(l = v.id), m = 0; m < u.length; m++) { var f = u[m], w = $(f).is(":visible"), g = f.id.replace("Nodes", ""); g === a.id && (w = !w), d[$("#" + g.replace("EPMLiveNavn", "EPMLiveNavt")).text()] = w } break } } saveExpandState(l, d), n(e, i, a, t, o) }, window.epmLiveNavigation.handleContextualCommand = function (e, i, n, a, t, o, s) { handleContextualCommand(e, i, n, a, t, o, s) }, $("td.epm-nav-node-root").click(function () { var e = $(this).parent().find("a").get(0).id; TreeView_ToggleNode(EPMLiveNav_Data, 0, document.getElementById(e), " ", document.getElementById(e + "Nodes")) }); var t = ["suiteBar", "s4-ribbonrow", "s4-workspace"]; for (var o in t) t.hasOwnProperty(o) && $("#" + t[o]).click(function () { "unpinned" === $sn.data("pinstate") && hideMenu() }); var s = $("#epm-nav-pin"); s.click(function () { window.epmLiveNavigation.togglePinned(!0) }), $sn.hover(function (e) { s.show() }, function () { s.hide() }); try { $sn.slimScroll({ height: $sn.height(), width: $sn.width(), alwaysVisible: !0 }) } catch (e) { } var r = $("#epm-nav").find(".slimScrollDiv"), d = r.find(".slimScrollBar"); d.hide(), r.css("position", "absolute"), r.css("left", "50px"), $sn.css("left", "0"), $sn.css("top", "0"), d.css("z-index", 1001), r.hover(function () { var e = !1; $(".epm-nav-sub").each(function () { var i = $(this); i.is(":visible") && i.height() >= r.height() && (e = !0) }), e && d.fadeIn(300) }, function () { d.fadeOut(300) }), $(window).resize(function () { var e = $("#epm-nav-top").height(); r.height(e), $sn.height(e) }), $("a.epm-nav-node").click(function () { var e = $(this); $("#epm-nav-sub-ql").find("a").each(function () { $(this).parent().parent().parent().parent().removeClass(selectedClass) }), e.parent().parent().parent().parent().addClass(selectedClass); var i = -1, n = e.parents("div")[0], a = $(n).siblings("div"); if (a) for (var t = getLinkNodes($(a[0]).parent().parent().attr("id")), o = 0; o < t.length; o++) t[o].id === n.id && (i = o); $.cookie(selectedLinkCookie, JSON.stringify({ index: i, uri: e.attr("href") }), cookieOptions) }), window.epmLiveNavigation.snWidth = $sn.width(); var l, c = function () { var e = window.epmLiveNavigation.workspaceTree(); e ? l = $("#" + e._element.id) : window.setTimeout(function () { c() }, 1) }; c(); var p = $sn.width(), v = function () { $("a.rtIn").each(function () { $(this).attr("style", "") }), $(".epm-nav-ws-node").each(function () { $(this).attr("style", "") }); var e = 0; try { e = l.width() + 40 } catch (e) { } var i = 0; p < e && (i = e + 5, $sn.stop().animate({ width: i }, 300), $sn.parent().stop().animate({ width: i }, 300)), $(".epm-nav-ws-node").each(function () { var e = $(this), n = 50 + (0 === i ? p : i) - e.offset().left; e.attr("style", "width:" + n + "px") }), window.epmLiveNavigation.wsTreeExpanded = !0 }, u = function () { $sn.stop().animate({ width: p }, 300), $sn.parent().stop().animate({ width: p }, 300), $(".epm-nav-ws-node").each(function () { $(this).attr("style", "") }), window.epmLiveNavigation.resetWSNodeWidth(), window.epmLiveNavigation.wsTreeExpanded = !1 }, m = function (e) { if (-1 !== (e.attr("class") || "").toLowerCase().indexOf("plus")) { var i = function () { -1 !== (e.attr("class") || "").toLowerCase().indexOf("minus") ? window.setTimeout(function () { v() }, 100) : window.setTimeout(function () { i() }, 1) }; i() } else { var n = function () { -1 !== (e.attr("class") || "").toLowerCase().indexOf("plus") ? window.setTimeout(function () { u() }, 100) : window.setTimeout(function () { n() }, 1) }; n() } }, f = $("#epm-nav-sub-workspaces"), w = !1; $("#EPMNavWorkspacesTree").hover(function () { w = !0, window.epmLiveNavigation.wsTreeExpanded || v() }, function () { u() }), d.hover(function () { window.epmLiveNavigation.wsTreeExpanded || w && (v(), w = !1) }, function () { u() }), $sn.hover(function () { }, function () { f.is(":visible") && u() }); var g = function () { var e = $("a.rtIn"); e.length ? e.each(function () { var e = $(this).parent().parent().find("span"); if (e.length > 1) { var i = $(e.get(1)); i && (i.click(function () { m($(this)) }), i.hover(function () { window.epmLiveNavigation.wsNodeSelectorClass = $(this).attr("class") })) } }) : window.setTimeout(function () { g() }, 1) }; g() } function registerProviderLinks(e) { window.epmLiveNavigation.buildLink = function (e) { var i = $$.currentWebUrl(), n = window.location.href, a = e.Url ? e.Url["#cdata"] : ""; if (-1 !== (a + "").toLowerCase().indexOf("/lists/")) { var t = (n = a.replace(/Source={page}&BackTo={page}/g, "")).split("?"); t.length > 1 && (t[1] || (n = t[0])) } else { var o = i + n.split("?")[0].split(escape(i))[1]; o = escape(o), n = a.replace(/{page}/g, o) } return { id: e["@Id"], title: e.Title["#cdata"], url: n, category: e["@Category"], cssClass: e["@CssClass"], order: parseInt(e["@Order"]), siteId: e["@SiteId"], webId: e["@WebId"], listId: e["@ListId"], itemId: e["@ItemId"], external: "True" === e["@External"], visible: "True" === e["@Visible"], active: "True" === e["@Active"], seprator: "True" === e["@Separator"] } }; var i = !1; for (var n in e.Nodes) if (e.Nodes.hasOwnProperty(n)) { var a = e.Nodes[n].NavLink; a.length || (a = [a]); for (var t in a) if (a.hasOwnProperty(t)) for (var o = a[t], s = 0; s < tlNodes.length; s++) { var r = tlNodes[s]; if (r.provider === n) if ("Workspaces" !== n) r.registerLink(window.epmLiveNavigation.buildLink(o)); else try { var d = window.epmLiveNavigation.workspaceTree(); d.trackChanges(); var l = o.Title["#cdata"]; i ? r.registerWorkspace(window.epmLiveNavigation.buildLink(o), d) : (r.registerLink(window.epmLiveNavigation.buildLink(o)), "All Workspaces" === l && (i = !0, $("#epm-nav-sub-workspaces-static-links").remove().insertBefore("#EPMNavWorkspacesTree"))), d.commitChanges() } catch (e) { } } if ("Workspaces" === n) { window.epmLiveNavigation.resetWorkspaceTree = function () { try { var e = window.epmLiveNavigation.workspaceTree(); e.trackChanges(); for (var i = e.get_allNodes(), n = 0; n < i.length; n++) i[n].set_expanded(!1); var a = function (i) { var n = e.findNodeByValue(i); if (n && n != e) { var t = n.get_parent(); t === e || t.get_expanded() || (t.set_expanded(!0), a(t.get_value())) } }, t = window.epmLiveNavigation.currentWebId, o = e.findNodeByValue(t); o && (o.get_parent() !== e ? a(t) : o.set_expanded(!0), o.set_selected(!0)), e.commitChanges() } catch (e) { } }; var c = window.epmLiveNavigation.workspaceTree(); $("a.rtIn").each(function () { var e = $(this), i = e.parent(), n = e.text(), a = c.findNodeByText(n).get_value(); i.append('<div id="' + a + '" class="epm-nav-ws-node"></div>'), e.remove(), e.text(""), e.append("<span>" + n + "</span>"), window.epmLiveNavigation.wsInfoDict[a].hasAccess || e.addClass("epm-nav-ws-disabled"), i.find(".epm-nav-ws-node").append(e) }), window.epmLiveNavigation.resetWorkspaceTree(), $("#EPMNavWorkspacesTree").fadeIn(300) } else "Applications" === n ? $($("#epm-nav-sub-new-static-links").find(".epm-nav-sub-header").get(0)).attr("style", "padding-top: 0px !important") : "Favorites" === n && $($("#epm-nav-sub-favorites-static-links").find(".epm-nav-sub-header").get(0)).attr("style", "padding-top: 0px !important"); window.SP.SOD.notifyScriptLoadedAndExecuteWaitingJobs("EPMLiveNavigation_" + n), "Settings" !== n && expandNodes(n) } $(".epm-app-btn").click(function () { document.location.href = $(this).data("url") }) } function loadLinks() { for (var e = [], i = 0; i < tlNodes.length; i++) { var n = tlNodes[i].provider; n && n !== window.epmLiveNavigation.selectedNode && e.push(n) } e.length > 0 && epmLiveService.execute("GetNavigationLinks", e.join(), function (e) { registerProviderLinks(e), registerLinkEvents() }, function (e) { console.log(e) }) } function registerStaticProviderLinks() { var e = null; if (window.epmLiveNavigation && (e = window.epmLiveNavigation.staticProvider), null !== e) { if (e) { var i = $$.parseJson(base64Service.decode(e)); i.Nodes.Workspaces ? window.epmLiveNavigation.workspaceTree() ? registerProviderLinks(i) : window.setTimeout(function () { registerStaticProviderLinks() }, 1) : registerProviderLinks(i) } } else window.setTimeout(function () { registerStaticProviderLinks() }, 1) } function registerTopLevelNodes() { $("#epm-nav-top").find("[data-role='top-nav-node']").each(function () { tlNodes.push(new navNode(this)) }) } var animSpeed = 300, nodeClass = "epm-nav-node", hoverClass = "epm-nav-node-hover", openedClass = "epm-nav-node-opened", selectedClass = "epm-nav-node-selected", expandedClass = "epm-nav-node-expanded", collapsedClass = "epm-nav-node-collapsed", selectedTlNodeCookie = "epmnav-selected-tlnode", selectedLinkCookie = "epmnav-selected-link", expandStateCookie = "epmnav-expand-state", pinStateCookie = "epmnav-pin-state", cookieOptions = { expires: 365, path: "/" }, $sn = $("#epm-nav-sub"), tlNodes = [], navNode = function (e) { var i = {}, n = e, a = $(e), t = $("#epm-nav-sub-" + a.data("id")), o = n.id, s = a.data("linkprovider"), r = function () { return a.parent().hasClass(selectedClass) }, d = function () { return a.parent().hasClass(openedClass) }, l = function (e) { e ? a.parent().addClass(selectedClass) : a.parent().removeClass(selectedClass) }, c = function () { t.hide(), a.parent().removeClass(openedClass) }, p = function () { $sn.is(":visible") && $sn.hide("slide", { direction: "left" }, animSpeed), c() }, v = function (e, i) { var n = new window.Telerik.Web.UI.RadTreeNode, a = i; e.category && (a = i.findNodeByValue(e.category) || a), n.set_text(e.title), n.set_value(e.webId), e.active ? n.set_navigateUrl(e.url) : n.set_navigateUrl("javascript:;"), window.epmLiveNavigation.wsTeamDict = window.epmLiveNavigation.wsTeamDict || {}, window.epmLiveNavigation.wsTeamDict[e.webId] = e.itemId; var t = e.itemId.split("."), o = ""; try { o = t[1] } catch (e) { } var s = ""; try { s = t[2] } catch (e) { } window.epmLiveNavigation.wsInfoDict = window.epmLiveNavigation.wsInfoDict || {}, window.epmLiveNavigation.wsInfoDict[e.webId] = { siteId: e.siteId, listId: o, itemId: s, hasAccess: e.active }, a.get_nodes().add(n) }, u = function (e) { e.seprator ? g(e.category) : "header" === e.url.toLowerCase() ? (h(e.category), f(e)) : "placeholder" === e.url.toLowerCase() ? (h(e.category), m(e)) : (h(e.category), w(e)) }, m = function (e) { var n = e.category; n || (n = "__STATIC__"); var a = '<li class="epm-nav-sub-placeholder">' + e.title + "</li>"; i[n].$el.append(a) }, f = function (e) { var n = e.category; n || (n = "__STATIC__"); var a = "epm-nav-sub-header"; 0 === t.find("li.epm-nav-section-header").length && (a = "epm-nav-section-header"); var o = '<li class="' + a + '">' + e.title + "</li>"; i[n].$el.append(o), o = '<li class="epm-nav-sub-header-bottom"></li>', i[n].$el.append(o) }, w = function (e) { var n = e.category; n || (n = "__STATIC__"); for (var a = !1, t = e.cssClass.split(" "), o = 0; o < t.length; o++) if ("epm-nav-button" === t[o]) { a = !0, e.cssClass = e.cssClass.replace(/epm-nav-button/g, ""); break } var s = ""; e.cssClass && (s = '<span class="epm-nav-icon ' + e.cssClass + '"></span>'); var r = "epm-nav-node epm-nav-trans", d = i[n].$el.parent().get(0).id; "epm-nav-sub-settings" !== d && "epm-nav-sub-workplace" !== d || (r = "epm-nav-node"), a && (r = (r += " epm-nav-button").replace(/epm-nav-trans/g, "")); var l = ""; e.external && (l = ' target="_blank"'); var c = '<li id="' + e.id + '" class="' + r + '" style="display:none;">' + s + '<a id="epm-nav-link-' + e.id + '" href="' + e.url + '" data-siteid="' + e.siteId + '" data-webid="' + e.webId + '" data-listid="' + e.listId + '" data-itemid="' + e.itemId + '"' + l + "><span>" + e.title + "</span></a></li>"; i[n].$el.append(c); var p = $("#" + e.id); e.visible && p.show(), p.find("a").click(function () { var e = $(this), i = e.parent(); if (!i.hasClass("epm-nav-button")) { $sn.find("a").each(function () { $(this).parent().removeClass(selectedClass) }); var n = "", a = "", t = i.parent().get(0).id; "epm-nav-sub-favorites-static-links" !== t && "epm-nav-sub-recent-static-links" !== t && "epm-nav-sub-new-static-links" !== t && (i.addClass(selectedClass), n = e.attr("href"), a = e.get(0).id), $.cookie(selectedLinkCookie, JSON.stringify({ id: a, url: n }), cookieOptions) } }) }, g = function (e) { var i = '<div class="epm-nav-sub-sep"></div>'; e ? $("#" + k(e)).append(i) : t.append(i) }, h = function (e) { if (e || (e = "__STATIC__"), !i[e]) { var n = k(e), a = "epm-nav-node-expanded"; "__STATIC__" === e && (a = "epm-nav-node-static"), "__STATIC__" !== e && t.append('<div id="' + n + '" class="epm-nav-node epm-nav-node-root epm-nav-cat"><span class="' + a + '">&nbsp;</span><span class="epm-nav-cat-title">' + e + "</span></div>"), t.append('<ul id="' + n + '-links" class="epm-nav-links ' + a + '"></ul>'), i[e] = { id: n, $el: $("#" + n + "-links") } } }, k = function (e) { return t.get(0).id + "-" + e.toLowerCase().replace(/ /g, "-").replace(/_/g, "").replace(/[^\w-]+/g, "").replace(/--/g, "-") }, b = function () { t.fadeIn(300), a.parent().addClass(openedClass) }, N = function () { b(), $sn.is(":visible") || $sn.show("slide", { direction: "left" }, animSpeed) }; return a.click(function () { if (r()) d() && "unpinned" === $.cookie(pinStateCookie) ? p() : N(); else { for (var e in tlNodes) if (tlNodes.hasOwnProperty(e)) { var i = tlNodes[e]; i.id !== o && i.selected() && (i.select(!1), i.close()) } l(!0), N(), $.cookie(selectedTlNodeCookie, JSON.stringify({ id: o, webUrl: $$.currentWebUrl() }), cookieOptions); for (var n in tlNodes) if (tlNodes.hasOwnProperty(n)) { var a = tlNodes[n]; a.id !== o && $("#" + a.id.replace("top", "sub")).hide() } } }), { id: o, provider: s, selected: r, select: l, close: c, closeNav: p, registerLink: u, registerWorkspace: v, el: n, $el: a, $menu: t } }; window.epmLiveNavigation.togglePinned = function (e) { "pinned" === $sn.data("pinstate") ? window.epmLiveNavigation.unpin(e) : window.epmLiveNavigation.pin(e) }, window.epmLiveNavigation.pin = function (e) { changePinState("pinned", e) }, window.epmLiveNavigation.unpin = function (e) { changePinState("unpinned", e) }, window.epmLiveNavigation.removeLink = function (e) { var i = $sn.find("#epm-nav-link-" + e.id); window.epmLiveNavigation.handleContextualCommand(e.id, i.data("webid"), i.data("listid"), i.data("itemid"), "nav:remove", "98") }, window.epmLiveNavigation.registerLink = function (e) { if (e) { var i; switch (e.kind) { case 0: case 1: i = "Favorites"; break; case 2: case 3: i = "Workspaces" } if (i) if (3 !== e.kind) for (var n = 0; n < tlNodes.length; n++) { var a = tlNodes[n]; if (a.provider === i) { e.cssClass = "epm-nav-sortable " + e.cssClass, a.registerLink(e); var t = $sn.find("#" + e.id), o = $("#epm-nav-sub-" + i.toLowerCase() + "-static-links"); if (o.find(".epm-nav-sub-placeholder").each(function () { var i = $(this), n = !1, a = i.text(); 0 === e.kind && "No pages" === a ? n = !0 : 1 === e.kind && "No items" === a ? n = !0 : 2 === e.kind && "No favorite workspaces" === a && (n = !0), n && i.remove() }), e.kind < 2 && t.find("a").attr("style", "width:115px !important;"), 0 === e.kind || 2 === e.kind) try { t.remove().insertBefore($(o.find(".epm-nav-sub-header").get(1))) } catch (e) { } 2 !== e.kind ? window.epmLiveNavigation.addFavoritesMenu(t) : window.epmLiveNavigation.addFavoriteWSMenu(t), t.addClass("epm-nav-sortable"), window.epmLiveNavigation.addDragger(t), t.fadeIn(300); break } } else epmLiveService.execute("GetNavigationLinks", i, function (e) { var n = [], a = e.Nodes.Workspaces.NavLink; for (var t in a) if (a.hasOwnProperty(t)) { var o = a[t]; if (0 === $sn.find("#" + o["@Id"]).length) { var s = o.Title["#cdata"]; if ("Workspaces" !== s && "New Workspace" !== s && "Favorite Workspaces" !== s && "All Workspaces" !== s) { var r = function () { var e = window.epmLiveNavigation.buildLink(o); if (window.epmLiveNavigation.buildLink) { for (var a = !1, t = 0; t < n.length; t++) if (n[t] === e.title) { a = !0; break } if (a) { for (var s = 0; s < tlNodes.length; s++) { var d = tlNodes[s]; if (d.provider === i) { var l = window.epmLiveNavigation.workspaceTree(); if (!l.findNodeByText(e.title)) { l.trackChanges(), d.registerWorkspace(e, l), l.commitChanges(), $("a.rtIn").each(function () { var i = $(this), n = i.text(); if (n === e.title) { var a = i.parent(); a.append('<div id="' + l.findNodeByText(n).get_value() + '" class="epm-nav-ws-node"></div>'), i.remove(), i.text(""), i.append("<span>" + n + "</span>"), a.find(".epm-nav-ws-node").append(i); var t = i.parent(); t.addClass("epm-nav-sortable"), i.attr("style", "width:124px !important; position: relative; top: 2px;"), window.epmLiveNavigation.addFavoriteWSMenu(t) } }); var c, p = "#" + e.id, v = [], u = {}, m = $(p).text(); $($(p).parents("ul")[0]).find("li").each(function () { var e = $(this), i = e.text(); i !== m ? (v.push(i), u[i] = e) : c = e }), v.sort(); for (var f = !1, t = 0; t < v.length; t++) if (!f) { var w = v[t]; w > m && (c.insertBefore(u[w]), c.removeClass("rtLast"), $($(c.parents("ul")[0]).find("li:last")[0]).addClass("rtLast"), f = !0) } } break } } $("#epm-nav-nows-ph").remove(), $("#EPMNavWorkspacesTree").fadeIn(300) } else e.cssClass && (e.kind = 2, e.category = null, window.epmLiveNavigation.registerLink(e)), n.push(e.title) } else window.setTimeout(function () { r() }, 1) }; r() } } } try { $("#epm-nav-sub-workspaces a").length < 3 && window.setTimeout(function () { window.epmLiveNavigation.registerLink({ kind: 3 }) }, 200) } catch (e) { } }, function (e) { console.log(e) }) } }, window.epmLiveNavigation.showAssociatedItems = function (e) { var i = function (e) { SP.SOD.execute("SP.UI.Dialog.js", "SP.UI.ModalDialog.showModalDialog", { url: e, showMaximized: !0 }) }, n = function (e) { var a = $$.currentWebUrl(); a ? $.ajax({ type: "POST", url: (a + "/_layouts/15/epmlive/gridaction.aspx?action=linkeditemspost&listid=" + e.listId + "&lookups=" + e.lookup + "&field=" + e.field + "&LookupFieldList=" + e.listName).replace(/\/\//g, "/"), contentType: "application/json; charset=utf-8", dataType: "json", success: function (n) { i(e.url) }, error: function (n) { i(e.url) } }) : window.setTimeout(function () { n(e) }, 1) }; n(e) }, window.epmLiveNavigation.createNewOpenDialog = function (e, i, n) { var a = { id: n, url: window.epmLive.currentWebUrl + "/_layouts/15/epmlive/redirectionproxy.aspx?action=gotolist&webid=" + window.epmLive.currentWebId + "&listid=" + n, name: i, icon: null }, t = { url: e, showMaximized: !1, dialogReturnValueCallback: function (e) { 1 == e && (void 0 == window.epmLive.SocialStream_SE && null == window.epmLive.SocialStream_SE || window.epmLive.SocialStream_SE.toolbarManager.handleCreationAction(e, null, a)) } }; SP.SOD.execute("SP.UI.Dialog.js", "SP.UI.ModalDialog.showModalDialog", t) }; var _init = function () { registerTopLevelNodes(), registerStaticProviderLinks(), changePinState($.cookie(pinStateCookie) || "pinned"), expandNodes(), selectLink(), registerEvents(), ExecuteOrDelayUntilScriptLoaded(loadLinks, "EPMLive.js"), window.SP.SOD.notifyScriptLoadedAndExecuteWaitingJobs("EPMLive.Navigation.Initialized") }; return { init: _init, expandProviderNodes: expandNodes } }(); epmLiveNavigation.init(); var menuManager = function () { return { setupMenu: function (e, i, n, a, t) { i = i || []; var o = $(e.find("a").get(0)), s = o.data("itemid"), r = o.data("siteid"), d = o.data("webid"), l = o.data("listid"), c = e.get(0).id; try { if (s) { if (-1 !== s.indexOf(".")) { var p = s.split("."); d = p[0], l = p[1], s = p[2] } } else { var v = window.epmLiveNavigation.wsInfoDict[c]; v && (r = v.siteId, d = c, l = v.listId, s = v.itemId) } } catch (e) { } var u = (l || "").replace(/-/g, ""), m = $("#menu" + u + s), f = function (e, o) { var r = c; e.length && e.push({ title: "--SEP--" }); for (var p in i) i.hasOwnProperty(p) && e.push(i[p]); m = $("#menu" + u + s), $(m.find(".epm-nav-cm-loading").get(0)).remove(); for (var v = 0; v < e.length; v++) { var f = e[v]; if (n && (f.kind = 0), a && (f.kind = a), !d || "undefined" === d) try { d = o.parent().get(0).id } catch (e) { } if ("--SEP--" === f.title) v !== e.length - 1 && m.append($('<li class="seprator"></li>').hide().fadeIn()); else { var w = ""; t && (w = t[f.command]), m.append($('<li><span class="epm-nav-cm-icon ' + function (e) { switch (e.toLowerCase()) { case "nav:remove": case "nav:addtofav": case "nav:removefavws": case "nav:removefavri": return "icon-star-6"; case "view": return "icon-info"; case "edit": return "icon-pencil-2"; case "delete": return "icon-close-3"; case "approve": return "icon-thumbs-up-4"; case "comments": return "icon-bubble-dots"; case "buildteam": return "icon-user-plus-3"; case "workspace": return "icon-tree-2"; case "epkcommand:rpeditor": return "icon-users-5"; case "perms": return "icon-key"; case "createworkspace": return "icon-tree-2"; case "epkcommand:costs": return "icon-coins"; case "workflows": return "icon-loop-3"; case "gotoplanner": return "fui-ext-project"; default: return "epm-nav-cm-blank" } }(f.command) + '">&nbsp;</span><a href="javascript:epmLiveNavigation.handleContextualCommand(\'' + r + "','" + d + "','" + l + "','" + s + "','" + f.command + "','" + f.kind + "','" + w + '\');" style="width: 122px !important; display: inline-block;">' + f.title + "</a></li>").hide().fadeIn()), m.find("a").click(function () { g() }) } } m.find("a").click(function () { $(this).parent().find(".icon-star-6").length && m.hover(function () { }, function () { m.remove() }) }), m.hover(function () { window.epmNavHoveredNode = r }), m.mouseleave(function () { window.epmNavHoveredNode = null, window.setTimeout(function () { null == window.epmNavHoveredNode && g() }, 200) }), $(".epm-nav-links, #EPMNavWorkspacesTree").hover(function () { }, function () { window.epmNavHoveredNode = null, window.setTimeout(function () { null === window.epmNavHoveredNode && g() }, 200) }), $(document).on("click", ".epm-nav-dragger", function () { g() }), m.offset().top + m.height() > $(window).height() && m.css("top", m.offset().top - m.height() - 30), m.offset().left + m.width() > $(window).width() && m.css("left", m.offset().left - m.width() - 30) }, w = function () { window.epmNavHoveredNode = null, m.css("top", e.offset().top + 20), m.css("left", e.offset().left), m.offset().top + m.height() > $(window).height() && m.css("top", m.offset().top - m.height() - 30), m.offset().left + m.width() > $(window).width() && m.css("left", m.offset().left - m.width() - 30), m.fadeIn(200) }, g = function () { m.fadeOut(200), $("#menu" + u + s).length && $("#menu" + u + s).remove() }; if (window.epmNavSelectNode != u + s && null != window.epmNavSelectNode && $("#menu" + window.epmNavSelectNode).fadeOut(200), window.epmNavSelectNode = u + s, 0 === $("body").find("#menu" + u + s).length) { if ($("body").append('<ul class="epm-nav-contextual-menu"  id="menu' + u + s + '" style="display:block;position:absolute;top:' + (e.offset().top + 20) + "px;left:" + e.offset().left + 'px;"><li class="epm-nav-cm-loading"><span>Loading...</span></li></ul>'), m = $("#menu" + u + s), w(), !r) { d = c; var h = window.epmLiveNavigation.wsInfoDict[d]; r = h.siteId, l = h.listId, s = h.itemId, o.data("siteid", r), o.data("webid", d), o.data("listid", l), o.data("itemid", s) } var k = function () { if (window.epmLive) { var e = "<Request><Params><SiteId>" + r + "</SiteId><WebId>" + d + "</WebId><ListId>" + l + "</ListId><ItemId>" + s + "</ItemId><UserId>" + window.epmLive.currentUserId + "</UserId><DebugMode>" + window.epmLive.debugMode + "</DebugMode></Params></Request>"; epmLiveService.execute("GetContextualMenuItems", e, function (e) { var i = []; if (e.ContextualMenus.Items) { var n = e.ContextualMenus.Items.Item; if (n) { n.length || (n = [n]); for (var t = 0; t < n.length; t++) { var s = n[t]; a ? i.push({ title: s["@Title"], command: s["@Command"], kind: a, imgUrl: s["@ImageUrl"] }) : i.push({ title: s["@Title"], command: s["@Command"], kind: s["@Kind"], imgUrl: s["@ImageUrl"] }) } } } f(i, o) }, function (e) { f([], o) }) } else window.setTimeout(function () { k() }, 1) }; k(), $(".epm-menu-btn span").mouseleave(function () { window.epmNavHoveredNode = null, window.setTimeout(function () { null == window.epmNavHoveredNode && g() }, 200) }), $(".epm-nav-ws-node").mouseleave(function () { window.epmNavHoveredNode = null, window.setTimeout(function () { null == window.epmNavHoveredNode && g() }, 200) }), $(".epm-nav-node").mouseleave(function () { window.epmNavHoveredNode = null, window.setTimeout(function () { null == window.epmNavHoveredNode && g() }, 200) }) } else !function () { m.is(":visible") ? g() : w() }() } } }(); window.epmLiveNavigation.addContextualMenu = function (e, i, n, a, t) { e.append('<span class="epm-menu-btn"><span class="icon-ellipsis-horizontal"></span></span>'), $(e.find(".epm-menu-btn").get(0)).click(function () { menuManager.setupMenu(e, i, n, a, t) }) }, window.epmLiveNavigation.isSecurityJobRunning = function (e, i, n) { var a = !1, t = '<Data><Param key="ListID">' + i + '</Param><Param key="itemId">' + n + "</Param></Data>"; return $.ajax({ type: "POST", url: e + "/_vti_bin/WorkEngine.asmx/Execute", data: "{ Function: 'IsSecurityJobAlreadyRunning', Dataxml: '" + t + "' }", async: !1, contentType: "application/json; charset=utf-8", dataType: "json", success: function (e) { if (e.d) { var i = $$.parseJson(e.d).Result; $$.responseIsSuccess(i) && (a = "True" === i.SecurityJob["@Success"]) } }, error: function (e) { console.log(e), a = !1 } }), a }, window.epmLiveNavigation.isImportResourceRunning = function () { var e = !1; return $.ajax({ type: "POST", url: window.epmLive.currentWebUrl + "/_vti_bin/WorkEngine.asmx/Execute", async: !1, data: "{ Function: 'IsImportResourceAlreadyRunning', Dataxml: '' }", contentType: "application/json; charset=utf-8", dataType: "json", success: function (i) { if (i.d) { var n = window.epmLive.parseJson(i.d).Result; window.epmLive.responseIsSuccess(n) && (e = "True" === n.ResourceImporter["@Success"]) } }, error: function (i) { window.epmLive.log(i), e = !1 } }), e }; var manageSettings = function () { var e = function () { return { collapseAll: function (e) { e.find(".epm-nav-cat").each(function () { var e = $($(this).find("span").get(0)); e.removeClass("epm-nav-node-expanded"), e.addClass("epm-nav-node-collapsed") }), e.find(".epm-nav-links").each(function () { var e = $(this); e.hasClass("epm-nav-node-static") || (e.removeClass("epm-nav-node-expanded"), e.addClass("epm-nav-node-collapsed")) }) } } }(), i = $("#epm-nav-sub-settings"); e.collapseAll(i), epmLiveNavigation.expandProviderNodes("Settings") }, manageFavorites = function () { var e = function () { return window.epmLiveNavigation.addDragger = function (e) { -1 === e.get(0).innerHTML.indexOf("epm-nav-dragger") && (e.prepend('<span class="epm-nav-dragger">&nbsp;</span>'), e.hover(function () { $($(this).find(".epm-nav-dragger").get(0)).css("visibility", "visible") }, function () { $($(this).find(".epm-nav-dragger").get(0)).css("visibility", "hidden") })) }, window.epmLiveNavigation.addFavoritesMenu = function (e) { e.append('<span class="epm-menu-btn"><span class="icon-ellipsis-horizontal"></span></span>'), $(e.find(".epm-menu-btn").get(0)).click(function () { menuManager.setupMenu(e, [{ title: "Remove", command: "nav:remove", kind: "98" }]) }) }, { resetOrder: function (e) { var i = [], n = 0; e.find(".epm-nav-node").each(function () { i.push($(this).get(0).id + ":" + ++n) }), i.length && epmLiveService.execute("ReorderLinks", i.join(), function (e) { }, function (e) { console.log(e) }) }, addDragger: function (e) { window.epmLiveNavigation.addDragger(e) }, addMenu: function (e) { window.epmLiveNavigation.addFavoritesMenu(e) } } }(), i = $("#epm-nav-sub-favorites-static-links"); i.find(".epm-nav-sortable").each(function () { var i = $(this).parent(); i.addClass("epm-nav-sortable"), $(i.find("a").get(0)).attr("style", "width:115px !important;"), e.addDragger(i), e.addMenu(i) }); try { var n = $("#epm-nav-sub-favorites"); i.sortable({ items: "li.epm-nav-sortable", placeholder: "epm-nav-drag-placeholder", start: function (e, i) { if (n.is(":visible")) { var a = "page"; i.item.index() > $(n.find(".epm-nav-sub-header").get(1)).index() && (a = "item"), i.item.data("kind", a) } }, stop: function (e, i) { if (n.is(":visible")) { var a = !0, t = i.item.data("kind"), o = i.item.index(), s = $(n.find(".epm-nav-sub-header").get(1)).index(); "page" === t ? o > s && (a = !1) : o < s && (a = !1), a || $($(i.item).parent()).sortable("cancel") } }, update: function () { e.resetOrder(i) } }), i.disableSelection() } catch (e) { } }, manageRecentItems = function () { var e, i = function () { var e = function (e, a) { e.index() < a ? i(e) : n(e) }, i = function (e) { e.append('<span class="epm-menu-btn"><span class="icon-plus-2"></span></span>'), $(e.find("a").get(0)).attr("style", "width:115px !important;"), $(e.find(".epm-menu-btn").get(0)).click(function () { var i = $(e.find("a").get(0)); window.epmLiveNavigation.handleContextualCommand(null, i.data("webid"), i.data("listid"), null, "nav:add", 0) }) }, n = function (e) { var i = $(e.find("a").get(0)); i.attr("style", "width: 115px !important;"), e.append('<span class="epm-menu-btn"><span class="icon-ellipsis-horizontal"></span></span>'), $(e.find(".epm-menu-btn").get(0)).click(function () { var n = [], a = !1; $("#epm-nav-sub-favorites-static-links").find("a").each(function () { var e = $(this); e.data("listid") === i.data("listid") && e.data("itemid") === i.data("itemid") && (a = !0) }), a ? n.push({ title: "Remove", command: "nav:removeFavRI", kind: 98 }) : n.push({ title: "Add", command: "nav:addToFav", kind: 98 }), menuManager.setupMenu(e, n) }) }; return { addMenu: e } }(), n = $("#epm-nav-sub-recent-static-links"); n.find(".epm-nav-sub-header").each(function () { var i = $(this), n = i.text(), a = i.index(); "Recent Items" === n && (e = a) }), n.find(".epm-nav-node").each(function () { i.addMenu($(this), e) }) }, manageWorkspaces = function () { var e = $("#EPMNavWorkspacesTree"), i = function () { window.epmLiveNavigation.addFavoriteWSMenu = function (e) { e.append('<span class="epm-menu-btn"><span class="icon-ellipsis-horizontal"></span></span>'), $(e.find(".epm-menu-btn").get(0)).click(function () { var i = e.get(0).id, n = [], a = null, t = !0; if (e.hasClass("epm-nav-ws-node") || e.is(".workspacecentercontextmenu")) if (window.epmLiveNavigation.wsInfoDict[i].hasAccess) { var o = !1; $("#epm-nav-sub-workspaces-static-links").find("a").each(function () { $(this).data("webid") === i && (o = !0) }), o ? n.push({ title: "Remove", command: "nav:removeFavWS", kind: 98 }) : n.push({ title: "Add", command: "nav:addToFav", kind: 98 }), a = i } else t = !1; else n.push({ title: "Remove", command: "nav:removeFavWS", kind: 98 }), a = $(e.find("a").get(0)).data("webid"); t && ("X" !== window.epmLiveNavigation.wsTeamDict[a] && i !== window.epmLive.rootWebId && n.push({ title: "Edit team", command: "nav:team", kind: 6 }), menuManager.setupMenu(e, n)) }) }; var i = function () { if ($.fn.bindWithDelay) { var e = $("#EPMNavWSTSearch"); e.val(""), e.bindWithDelay("keyup", function () { var e = $(this).val().trim(); e && e.length > 1 ? n(e.toLowerCase()) : t() }, 200) } else window.setTimeout(function () { i() }, 100) }, n = function (i) { for (var n = window.epmLiveNavigation.workspaceTree().get_allNodes(), t = !1, s = 0; s < n.length; s++) { var r = n[s], d = r.get_text().trim(); d && -1 !== d.toLowerCase().indexOf(i) ? (o(r), r.set_visible(!0), t = !0, a()) : r.set_visible(!1) } t || 0 !== e.find(".epm-nav-sub-placeholder").length || e.append($('<div class="epm-nav-sub-placeholder">No search results</div>').hide().fadeIn(200)) }, a = function () { e.find(".epm-nav-sub-placeholder").each(function () { $(this).remove() }) }, t = function () { a(); for (var e = window.epmLiveNavigation.workspaceTree().get_allNodes(), i = 0; i < e.length; i++) e[i].set_visible(!0); window.epmLiveNavigation.resetWorkspaceTree() }, o = function (e) { var i = e.get_parent(); i && i !== window.epmLiveNavigation.workspaceTree() && (i.set_visible(!0), i.set_expanded(!0), o(i)) }; return { resetOrder: function (e) { var i = [], n = 0; e.find("li.epm-nav-sortable").each(function () { i.push($(this).get(0).id + ":" + ++n) }), i.length && epmLiveService.execute("ReorderLinks", i.join(), function (e) { }, function (e) { console.log(e) }) }, addDragger: function (e) { e.prepend('<span class="epm-nav-dragger">&nbsp;</span>'), e.hover(function () { $($(this).find(".epm-nav-dragger").get(0)).css("visibility", "visible") }, function () { $($(this).find(".epm-nav-dragger").get(0)).css("visibility", "hidden") }) }, addMenu: function (e) { var i = window.epmLiveNavigation.wsInfoDict[e.get(0).id]; i ? i.hasAccess && window.epmLiveNavigation.addFavoriteWSMenu(e) : window.epmLiveNavigation.addFavoriteWSMenu(e) }, initializeSearch: i, configureNodeWidth: function () { window.epmLiveNavigation.resetWSNodeWidth = function () { $("a.rtIn").each(function () { var e = $(this), i = $(e.find("span").get(0)).width(); if (i) { var n = e.offset().left - 50, a = i + n, t = 180 - n - 15; e.data("originalwidth", e.width()), e.data("newwidth", t), a > 165 ? e.width(t) : e.parent().width(t) } }) }, window.epmLiveNavigation.resetWSNodeWidth() } } }(), n = $("#epm-nav-sub-workspaces-static-links"); n.find(".epm-nav-sortable").each(function () { var e = $(this).parent(); e.addClass("epm-nav-sortable"), $(e.find("a").get(0)).attr("style", "width:124px !important; position: relative; top: 2px;"), i.addDragger(e), i.addMenu(e) }); try { n.sortable({ items: "li.epm-nav-sortable", placeholder: "epm-nav-drag-placeholder", update: function () { i.resetOrder(n) } }), n.disableSelection() } catch (e) { } i.configureNodeWidth(), i.initializeSearch(), e.find("a").each(function () { i.addMenu($(this).parent()) }), 1 === e.find("a").length && (e.hide(), $("#epm-nav-sub-workspaces-static-links").get(0).innerHTML += '<li id="epm-nav-nows-ph" class="epm-nav-sub-placeholder">No workspaces</li>') }; ExecuteOrDelayUntilScriptLoaded(manageSettings, "EPMLiveNavigation_Settings"), ExecuteOrDelayUntilScriptLoaded(manageFavorites, "EPMLiveNavigation_Favorites"), ExecuteOrDelayUntilScriptLoaded(manageWorkspaces, "EPMLiveNavigation_Workspaces"), ExecuteOrDelayUntilScriptLoaded(manageRecentItems, "EPMLiveNavigation_RecentItems"), window.SP.SOD.notifyScriptLoadedAndExecuteWaitingJobs("EPMLive.Navigation.js") }) } function onJqueryLoaded() { ExecuteOrDelayUntilScriptLoaded(initializeNavigation, "EPMLiveNavigation") } $(function () { $.ajaxSetup({ beforeSend: function (e) { e.setRequestHeader("Access-Control-Allow-Origin", location.protocol + "//" + location.host) } }) }), window.showModalDialog = window.showModalDialog || function (e, i, n) { document.body.innerHTML += "<dialog id='myDialog'><div id='myDialogBody'><textarea id='myDialogtxtarea' rows='4' cols='50'></textarea></div><div style='float: right;margin: 20px;'><button id='myDialogOk'>Ok</button><button id='myDialogClose'>Close</button></div></dialog>"; for (var a = document.getElementById("myDialog"), t = (i.value, n.split(";")), o = 0; o < t.length; o++) -1 != t[o].indexOf("Height") ? t[o].split(":")[1] : -1 != t[o].indexOf("Width") && t[o].split(":")[1]; return a.showModal(), $("textarea#myDialogtxtarea").val(i.value), document.getElementById("myDialogClose").onclick = function () { a.close(), a.remove() }, document.getElementById("myDialogOk").onclick = function () { $("#" + i.id).val($("textarea#myDialogtxtarea").val()), a.close(), a.remove() }, i.value }, ExecuteOrDelayUntilScriptLoaded(onJqueryLoaded, "jquery.min.js") }();