!function () { "use strict"; function authenticate() { console.log("authenticating..."); var a = location.href; return $.Deferred(function (b) { var c = $("<iframe></iframe>"); c.hide(), c.appendTo("body"), c.attr("src", a), c.load(function () { c.remove(), b.resolve(), console.log("authenticated..") }) }) } function initializeNavigation() { $(function () { var $ = window.jQuery, $$ = function () { var _currentWebUrl = function () { return window.epmLiveNavigation.currentWebUrl }, _parseJson = function (xml) { return eval("(" + window.xml2json($.parseXML(xml), "") + ")") }, _responseIsSuccess = function (a) { return 0 == a["@Status"] }; return { currentWebUrl: _currentWebUrl, parseJson: _parseJson, responseIsSuccess: _responseIsSuccess } }(), base64Service = function () { var a = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="; return { decode: function (b) { var d, e, g, h, i, c = "", f = "", j = "", k = 0; /[^A-Za-z0-9\+\/\=]/g.exec(b) && console.log('There were invalid base64 characters in the input text.\nValid base64 characters are A-Z, a-z, 0-9, "+", "/",and "="\nExpect errors in decoding.'), b = b.replace(/[^A-Za-z0-9\+\/\=]/g, ""); do { g = a.indexOf(b.charAt(k++)), h = a.indexOf(b.charAt(k++)), i = a.indexOf(b.charAt(k++)), j = a.indexOf(b.charAt(k++)), d = g << 2 | h >> 4, e = (15 & h) << 4 | i >> 2, f = (3 & i) << 6 | j, c += String.fromCharCode(d), 64 != i && (c += String.fromCharCode(e)), 64 != j && (c += String.fromCharCode(f)), d = e = f = "", g = h = i = j = "" } while (k < b.length); return unescape(c) } } }(), epmLiveService = function () { var a = function (b, c, d, e) { var f = $$.currentWebUrl(); f ? $.ajax({ type: "POST", url: (f + "/_vti_bin/WorkEngine.asmx/Execute").replace(/\/\//g, "/"), data: "{ Function: '" + b + "', Dataxml: '" + c + "' }", contentType: "application/json; charset=utf-8", dataType: "json", success: function (a) { if (a.d) { var b = $$.parseJson(a.d), c = b.Result; $$.responseIsSuccess(c) ? d(c) : e(a) } else e(a) }, error: function (a) { e(a) } }) : window.setTimeout(function () { a(b, c, d, e) }, 1) }; return { execute: a } }(), jqCookie = $.cookie; $.cookie = function (a, b, c) { if (a = a + "-u-" + window.epmLiveNavigation.currentUserId, jqCookie) { if (!b) return jqCookie(a); jqCookie(a, b, c) } }; var epmLiveNavigation = function () { function hideMenu() { for (var a = 0; a < tlNodes.length; a++) { var b = tlNodes[a]; if (b.selected()) { b.closeNav(); break } } } function changePinState(a, b) { var c = ["s4-ribbonrow", "s4-workspace"]; for (var d in c) if (c.hasOwnProperty(d)) { var e = $("#" + c[d]); e.removeClass("epm-nav-pinned"), e.removeClass("epm-nav-unpinned"), e.addClass("epm-nav-" + a) } var f = $("#epm-nav-pin"); f.removeClass("epm-nav-pin-pinned"), f.removeClass("epm-nav-pin-unpinned"), f.addClass("epm-nav-pin-" + a), "unpinned" === a && hideMenu(), $sn.data("pinstate", a), b && $.cookie(pinStateCookie, a, cookieOptions) } function getSelectedSubLevelNode() { var a = "epm-nav-top-ql"; try { var b = $.parseJSON($.cookie(selectedTlNodeCookie)); b.webUrl === $$.currentWebUrl() && (a = b.id) } catch (a) { } return a.replace("epm-nav-top-", "epm-nav-sub-") } function getLinkNodes(a) { return $("#" + a).find(".epm-nav-sub-menu").find("div[id^=E]") } function selectLink() { var a = !1, b = $.parseJSON($.cookie(selectedLinkCookie)); if (null !== b && window.location.href.indexOf(b.url) > 0 && (a = !0), b) if (b.id) { var c = $($sn.find("#" + b.id).get(0)); if (c.length > 0) { var d = c.parent(), e = d.parent().get(0).id; window.location.href.indexOf(b.url.replace("_layouts", "_layouts/15")) <= 0 && "epm-nav-sub-favorites-static-links" !== e && "epm-nav-sub-recent-static-links" !== e && "epm-nav-sub-new-static-links" !== e && (d.addClass(selectedClass), a = !0) } } else { var f = b.index, g = b.uri; if (-1 !== window.location.href.indexOf(g)) for (var h = $("#" + getSelectedSubLevelNode()), i = getLinkNodes(h.parent().attr("id")), j = 0; j < i.length; j++) if (j === f) { $(i[j]).find('a[href="' + g + '"]:first').parents("table").addClass(selectedClass), a = !0; break } } var k = escape(unescape(window.location.href)).toLowerCase(); if (a) { var l = $(".epm-nav-node-selected"); l.find("a").each(function () { var b = escape(unescape(this.href)).toLowerCase(); b = b.replace("_layouts", "_layouts/15"), 0 === k.indexOf(b) && k !== b && (l.removeClass(selectedClass), a = !1, $.cookie(selectedLinkCookie, null)) }) } a || ($("td.epm-nav-node").each(function () { a || $(this).find("a").each(function () { if (!a) { var c = $(this), d = escape(unescape(c.get(0).href)).toLowerCase(); if (-1 !== k.indexOf(d)) { c.parents("table").addClass(selectedClass), a = !0; var e = -1, f = c.parents("div")[0], g = $(f).siblings("div"); if (g) for (var h = getLinkNodes($(g[0]).parent().parent().attr("id")), i = 0; i < h.length; i++) { var j = h[i]; j.id === f.id && (e = i) } $.cookie(selectedLinkCookie, JSON.stringify({ index: e, uri: c.attr("href") }), cookieOptions), b = $.parseJSON($.cookie(selectedLinkCookie)) } } }) }), a || $("#epm-nav-sub-workplace").find("a").each(function () { if (!a) { var b = $(this), c = escape(unescape(b.get(0).href)).toLowerCase(); -1 !== k.indexOf(c) && (b.parents("li").addClass(selectedClass), a = !0) } })), $("a.rtIn").live("click", function () { $.cookie("resetlink", "1") }), a ? $.cookie("resetlink", "0") : (null === b && (b = $(this)), k = escape(unescape(b.uri)).toLowerCase(), $("td.epm-nav-node").each(function () { a || $(this).find("a").each(function () { if (!a) { var b = $(this), c = escape(unescape(b.get(0).href)).toLowerCase(); -1 !== k.indexOf(c) && "0" == $.cookie("resetlink") && (b.parents("table").addClass(selectedClass), a = !0) } }) })) } function saveLinkState(a) { var b = {}; a.find(".epm-nav-cat").each(function () { var a = $(this); b[a.text()] = $(a.find("span")[0]).hasClass(expandedClass) }), saveExpandState(a.get(0).id, b) } function saveExpandState(a, b) { var c = $.parseJSON($.cookie(expandStateCookie)) || {}; c[a] = b, $.cookie(expandStateCookie, JSON.stringify(c), cookieOptions) } function expandNodes(a) { var b = $.parseJSON($.cookie(expandStateCookie)); if (b) { var c = "epm-nav-sub-ql"; if (a) for (var d = 0; d < tlNodes.length; d++) { var e = tlNodes[d]; if (e.provider === a) { c = e.id.replace("epm-nav-top-", "epm-nav-sub-"); break } } var f = b[c]; if (f) if ("epm-nav-sub-ql" === c) for (var g = getLinkNodes("epm-nav-sub-ql"), h = 0; h < g.length; h++) { var i = g[h], j = i.id.replace("Nodes", ""); f[$("#" + j.replace("EPMLiveNavn", "EPMLiveNavt")).text()] || TreeView_ToggleNode(window.EPMLiveNav_Data, 0, document.getElementById(j), " ", document.getElementById(i.id)) } else { var k = $("#" + c).find(".epm-nav-cat"); "epm-nav-sub-settings" === c && k.each(function () { collapseLinks($(this)) }), k.each(function () { var a = $(this), b = a.text(), c = f[b]; $(a.find("span")[0]).hasClass(expandedClass) ? c || collapseLinks(a) : c && expandLinks(a) }) } } } function expandLinks(a) { var b = a.get(0).id, c = $(a.find("span")[0]), d = $("#" + b + "-links"); c.removeClass(collapsedClass), c.addClass(expandedClass), d.removeClass(collapsedClass), d.addClass(expandedClass) } function collapseLinks(a) { var b = a.get(0).id, c = $(a.find("span")[0]), d = $("#" + b + "-links"); c.removeClass(expandedClass), c.addClass(collapsedClass), d.removeClass(expandedClass), d.addClass(collapsedClass) } function registerLinkEvents() { var a = function () { $("li.epm-nav-node").find("a").each(function () { if (window.epmLiveNavigation.stopAddingTooltips) return window.epmLiveNavigation.stopAddingTooltips = !1, !1; var a = $(this); if (!a.attr("title")) { var b = a.find("span"); if (b) if ($.browser.msie) { var c = a.clone().css({ display: "inline", width: "auto", visibility: "hidden" }).appendTo("body"); c.width() + b.offset().left + 15 > a.width() && a.attr("title", b.text()), c.remove() } else a.width() < b.width() && a.attr("title", b.text()) } }) }; $(".epm-nav-cat").click(function () { var a = $(this); $(a.find("span")[0]).hasClass(collapsedClass) ? expandLinks(a) : collapseLinks(a), saveLinkState(a.parent()) }), $("#epm-nav-top li").click(function () { window.epmLiveNavigation.stopAddingTooltips = !0, window.setTimeout(function () { a() }, 1e3) }), a() } function handleContextualCommand(id, webId, listId, itemId, command, kind, callBackFunction) { var removeLink = function (a, b) { var c = function (a, b) { var c = $("#" + a), d = c.parent(); c.fadeOut(300, function () { c.remove(); var a = d.get(0).id; if ("epm-nav-sub-workspaces-static-links" === a) { if (1 === d.find("a").length) { var e = !1; d.find("li").each(function () { "No favorite workspaces" === $(this).text() && (e = !0) }), e || $('<li class="epm-nav-sub-placeholder">No favorite workspaces</li>').insertAfter($(d.find(".epm-nav-sub-header-bottom").get(1))) } } else if ("epm-nav-sub-favorites-static-links" === a) { var f = !1, g = !1, h = 0; if (d.find("li").each(function () { var a = $(this); "Items" === a.text() && (h = a.index()) }), d.find("li").each(function () { var a = $(this); a.hasClass("epm-nav-node") && (a.index() > h ? f = !0 : g = !0) }), !g) { var i = !1; d.find("li").each(function () { "No pages" === $(this).text() && (i = !0) }), i || $('<li class="epm-nav-sub-placeholder">No pages</li>').insertAfter($(d.find(".epm-nav-sub-header-bottom").get(1))) } if (!f) { var j = !1; d.find("li").each(function () { "No items" === $(this).text() && (j = !0) }), j || (d.get(0).innerHTML += '<li class="epm-nav-sub-placeholder">No items</li>') } } b && ("RI" === b ? (toastr.options = { closeButton: !1, debug: !1, positionClass: "toast-top-right", onclick: null, showDuration: 300, hideDuration: 1e3, timeOut: 5e3, extendedTimeOut: 1e3, showEasing: "swing", hideEasing: "linear", showMethod: "fadeIn", hideMethod: "fadeOut" }, toastr.success("An existing item has been removed from your favorites list.")) : SP.UI.Notify.removeNotification(b)) }) }; epmLiveService.execute("RemoveNavigationLink", a, function (d) { c(a, b) }, function (d) { c(a, b) }) }, url = window.epmLiveNavigation.currentWebUrl, gaUrl = (url + "/_layouts/15/epmlive/gridaction.aspx?webid=" + webId + "&listid=" + listId + "&id=" + itemId + "&").replace(/\/\//g, "/"), rpUrl = (url + "/_layouts/15/epmlive/redirectionproxy.aspx?webid=" + webId + "&listid=" + listId + "&id=" + itemId + "&").replace(/\/\//g, "/"), redirectUrl = ""; switch (command) { case "nav:add": redirectUrl = rpUrl + "action=new"; break; case "nav:team": var wId = "", lId = "", iId = ""; if ("undefined" !== itemId) try { var info = window.epmLiveNavigation.wsTeamDict[webId].split("."); "-1" !== info[2] && (wId = info[0], lId = info[1], iId = info[2]) } catch (a) { } redirectUrl = (url + "/_layouts/15/epmlive/gridaction.aspx?").replace(/\/\//g, "/") + "action=buildteam&webid=" + (wId || webId), iId && (redirectUrl = redirectUrl + "&listid=" + lId + "&id=" + iId) } if (!redirectUrl && command) if (-1 !== command.indexOf("epkcommand:")) redirectUrl = gaUrl + "action=epkcommand&subaction=" + command.split(":")[1]; else { if ("createworkspace" === command) { var loadWSCreationDialog = function () { window.CreateEPMLiveWorkspace ? window.CreateEPMLiveWorkspace(listId, itemId) : window.setTimeout(function () { loadWSCreationDialog() }, 1) }; return void loadWSCreationDialog() } redirectUrl = gaUrl + "action=" + command } if (redirectUrl && (redirectUrl = redirectUrl.split("#")[0]), "view" === command || "edit" === command || "gotoplanner" === command || "GoToTaskPlanner" === command) { var page = "", wUrl = $$.currentWebUrl(), urlParts = window.location.href.split("?"); page = "/" === wUrl ? urlParts[0] : wUrl + urlParts[0].split(escape(wUrl))[1], page = escape(page), redirectUrl += "&source=" + page } switch (kind + "") { case "-1": if ("delete" == command) { if (confirm("Are you sure you want to send the item(s) to the Recycle Bin?")) { var nId = SP.UI.Notify.addNotification("Deleting Item...", !0, "", null); $.get(redirectUrl).always(function () { SP.UI.Notify.removeNotification(nId), "" != callBackFunction && eval(callBackFunction + "(" + id + ")") }) } } else { var options = { url: redirectUrl, showMaximized: !1, dialogReturnValueCallback: function (a) { 1 == a && KanbanClient.loadKanBanPlanners() } }; SP.SOD.execute("SP.UI.Dialog.js", "SP.UI.ModalDialog.showModalDialog", options) } return !0; case "0": return OpenCreateWebPageDialog(redirectUrl), !0; case "1": return window.location.href.toLowerCase().toString().indexOf("isdlg") > -1 ? "" != callBackFunction ? SP.SOD.execute("SP.UI.Dialog.js", "SP.UI.ModalDialog.showModalDialog", { url: redirectUrl, width: 650, height: 700, dialogReturnValueCallback: eval(callBackFunction) }) : SP.SOD.execute("SP.UI.Dialog.js", "SP.UI.ModalDialog.showModalDialog", { url: redirectUrl, width: 650, height: 700 }) : location.href = redirectUrl, !0; case "2": return window.open(redirectUrl + "&IsDlg=1", "", "height=100, width=200, toolbar=no, menubar=no, scrollbars=yes, resizable=yes,location=no, directories=no, status=yes"), !0; case "3": return window.open(redirectUrl + "&IsDlg=1", "", "width=" + screen.width + ",height=" + screen.height + ",top=0,left=0, toolbar=no, menubar=no, scrollbars=yes, resizable=yes,location=no, directories=no, status=yes"), !0; case "5": return "" != callBackFunction ? SP.SOD.execute("SP.UI.Dialog.js", "SP.UI.ModalDialog.showModalDialog", { url: redirectUrl, width: 700, height: 500, dialogReturnValueCallback: eval(callBackFunction) }) : SP.SOD.execute("SP.UI.Dialog.js", "SP.UI.ModalDialog.showModalDialog", { url: redirectUrl, width: 700, height: 500 }), !0; case "6": var isResImportRunning = !1, isSecRunning = !1; if ("epkcommand:rpeditor" == command) isResImportRunning = window.epmLiveNavigation.isImportResourceRunning(); else if ("buildteam" == command) isSecRunning = window.epmLiveNavigation.isSecurityJobRunning(window.epmLive.currentWebUrl, listId, itemId); else if ("nav:team" == command && "" != window.epmLiveNavigation.wsTeamDict[webId]) { var idInfo = window.epmLiveNavigation.wsTeamDict[webId].split("."); isSecRunning = window.epmLiveNavigation.isSecurityJobRunning(window.epmLive.currentWebUrl, idInfo[1], idInfo[2]) } return isResImportRunning || isSecRunning ? (isResImportRunning ? alert("The Resource Planner cannot be opened because there is an active resource import job running.") : isSecRunning && alert("The team cannot be edited because the security queue job has not completed. This should be completed in less than a minute or so - please try again."), !1) : ("" != callBackFunction ? SP.SOD.execute("SP.UI.Dialog.js", "SP.UI.ModalDialog.showModalDialog", { url: redirectUrl, showMaximized: !0, showClose: !1, dialogReturnValueCallback: eval(callBackFunction) }) : SP.SOD.execute("SP.UI.Dialog.js", "SP.UI.ModalDialog.showModalDialog", { url: redirectUrl, showMaximized: !0, showClose: !1 }), !0); case "98": if ("nav:addToFav" !== command) if ("nav:remove" !== command && "nav:removeFavWS" !== command && "nav:removeFavRI" !== command) $.get(redirectUrl).always(function () { removeLink(id) }); else { var fKind = null; if ("nav:removeFavWS" === command ? $("#epm-nav-sub-workspaces-static-links").find("a").each(function () { var a = $(this); a.data("webid") === webId && (id = a.parent().get(0).id) }) : "nav:removeFavRI" === command && $("#epm-nav-sub-favorites-static-links").find("a").each(function () { var a = $(this); a.data("listid") === listId && a.data("itemid") == itemId && (id = a.parent().get(0).id, fKind = "RI") }), removeLink(id, fKind), "nav:remove" === command) { var $a = $("#" + id).find("a"); window.Analytics.turnOffFav({ siteid: $a.data("siteid"), webid: $a.data("webid"), listid: $a.data("listid"), itemid: $a.data("itemid"), url: $a.get(0).href }) } } else { var $link = $($("#" + id).find("a").get(0)), title = $link.text(), webUrl = $link.attr("href"), _$$ = window.epmLive; listId = "undefined" === listId ? null : listId, itemId = "undefined" === itemId ? null : itemId; var isItem = null === itemId ? "False" : "True", riFav = !1, data = '<Data><Param key="SiteId">' + _$$.currentSiteId + '</Param><Param key="WebId">' + webId + '</Param><Param key="ListId">' + listId + '</Param><Param key="ListViewUrl"></Param><Param key="ListIconClass"></Param><Param key="ItemId">' + itemId + '</Param><Param key="FString">' + webUrl + '</Param><Param key="Type">4</Param><Param key="UserId">' + _$$.currentUserId + '</Param><Param key="Title">' + title + '</Param><Param key="FileIsNull"></Param><Param key="IsItem">' + isItem + "</Param></Data>", methodName = "AddFavoritesWs", linkKind = 3, icon = null; if ("epm-nav-sub-recent-static-links" === $link.parent().parent().get(0).id) { methodName = "AddFavorites", linkKind = 1; try { icon = $($link.parent().find("span").get(0)).attr("class").split(" ")[1] } catch (a) { } data = '<Data><Param key="SiteId">' + _$$.currentSiteId + '</Param><Param key="WebId">' + webId + '</Param><Param key="ListId">' + listId + '</Param><Param key="ListViewUrl"></Param><Param key="ListIconClass">' + icon + '</Param><Param key="ItemId">' + itemId + '</Param><Param key="FString"></Param><Param key="Type">2</Param><Param key="UserId">' + _$$.currentUserId + '</Param><Param key="Title">' + title + '</Param><Param key="FileIsNull"></Param><Param key="IsItem">True</Param></Data>', riFav = !0 } var notify = function () { riFav && (toastr.options = { closeButton: !1, debug: !1, positionClass: "toast-top-right", onclick: null, showDuration: 300, hideDuration: 1e3, timeOut: 5e3, extendedTimeOut: 1e3, showEasing: "swing", hideEasing: "linear", showMethod: "fadeIn", hideMethod: "fadeOut" }, toastr.success("A new item has been added to your favorites list.")) }; id = (new Date).getTime() + "", epmLiveService.execute(methodName, data, function (a) { window.epmLiveNavigation.registerLink({ id: id, title: title, url: webUrl, category: null, cssClass: icon, order: null, siteId: _$$.currentSiteId, webId: webId, listId: listId, itemId: itemId, external: !1, visible: !0, active: !0, seprator: !1, kind: linkKind }), notify() }, function (a) { window.epmLiveNavigation.registerLink({ id: id, title: title, url: webUrl, category: null, cssClass: null, order: null, siteId: _$$.currentSiteId, webId: webId, listId: listId, itemId: itemId, external: !1, visible: !0, active: !0, seprator: !1, kind: linkKind }), notify() }) } break; case "99": if (confirm("Are you sure you want to send the item(s) to the Recycle Bin?")) { var nId = SP.UI.Notify.addNotification("Deleting Item...", !0, "", null); "nav:remove" !== command ? $.get(redirectUrl, function (data) { "General Error: You do not have permissions to delete users.\r\n" == data ? (SP.UI.Notify.removeNotification(nId), SP.UI.Notify.addNotification("You do not have permission to delete Resources", !1, "", null)) : data.startsWith("General Error:") ? (SP.UI.Notify.removeNotification(nId), alert(data.replace("General Error: ", ""))) : (removeLink(id, nId), SP.UI.Notify.removeNotification(nId), "" != callBackFunction && eval(callBackFunction + "(" + id + ")")) }) : (removeLink(id, nId), SP.UI.Notify.removeNotification(nId), "" != callBackFunction && eval(callBackFunction + "(" + id + ")")) } break; default: var options; "" != callBackFunction && "undefined" != callBackFunction ? (callBackFunction = eval(callBackFunction), options = { url: redirectUrl, width: 700, dialogReturnValueCallback: Function.createCallback(Function.createDelegate(null, callBackFunction), id) }) : options = "approve" === command ? { url: redirectUrl, width: 700, dialogReturnValueCallback: approveDialogCallback } : { url: redirectUrl, width: 700 }, SP.SOD.execute("SP.UI.Dialog.js", "SP.UI.ModalDialog.showModalDialog", options) } } function approveDialogCallback(a, b) { a == SP.UI.DialogResult.OK && window.location.reload() } function registerEvents() { var a = window.TreeView_HoverNode, b = window.TreeView_UnhoverNode, c = window.TreeView_ToggleNode, d = 0; $("td.epm-nav-node").find("a").each(function () { var a = $(this), b = a.offset().left; 0 === d ? d = b : b > d && a.width(112) }), $("span#epm-nav-asoitems-info").on("shown.bs.tooltip", function () { var a = $(this), b = a.parent().find("div.tooltip"), c = b.offset(); c.top -= 25, b.remove(), $("body").append(b), b.offset(c) }), window.TreeView_HoverNode = function (b, c) { var d = $(c); d.hasClass(nodeClass) ? d.parent().parent().parent().addClass(hoverClass) : a(b, c) }, window.TreeView_UnhoverNode = function (a) { $(a).hasClass(nodeClass) ? $(a).parent().parent().parent().removeClass(hoverClass) : b(a) }, window.TreeView_ToggleNode = function (a, b, d, e, f) { var g = null, h = $.parseJSON($.cookie(expandStateCookie)); h && (h = $.parseJSON($.cookie(expandStateCookie))["epm-nav-sub-ql"]) && (g = h); for (var i = g || {}, j = null, k = $(d).parents("div"), l = 0; l < k.length; l++) { var m = k[l]; if ($(m).hasClass("epm-nav-sub")) { j = m.id; for (var o = getLinkNodes(j), p = 0; p < o.length; p++) { var q = o[p], r = $(q).is(":visible"), s = q.id.replace("Nodes", ""); s === d.id && (r = !r), i[$("#" + s.replace("EPMLiveNavn", "EPMLiveNavt")).text()] = r } break } } saveExpandState(j, i), c(a, b, d, e, f) }, window.epmLiveNavigation.handleContextualCommand = function (a, b, c, d, e, f, g) { handleContextualCommand(a, b, c, d, e, f, g) }, $("td.epm-nav-node-root").click(function () { var a = $(this), b = a.parent().find("a").get(0).id; TreeView_ToggleNode(EPMLiveNav_Data, 0, document.getElementById(b), " ", document.getElementById(b + "Nodes")) }); var e = ["suiteBar", "s4-ribbonrow", "s4-workspace"]; for (var f in e) e.hasOwnProperty(f) && $("#" + e[f]).click(function () { "unpinned" === $sn.data("pinstate") && hideMenu() }); var g = $("#epm-nav-pin"); g.click(function () { window.epmLiveNavigation.togglePinned(!0) }), $sn.hover(function (a) { g.show() }, function () { g.hide() }); try { $sn.slimScroll({ height: $sn.height(), width: $sn.width(), alwaysVisible: !0 }) } catch (a) { } var h = $("#epm-nav").find(".slimScrollDiv"), i = h.find(".slimScrollBar"); i.hide(), h.css("position", "absolute"), h.css("left", "50px"), $sn.css("left", "0"), $sn.css("top", "0"), i.css("z-index", 1001), h.hover(function () { var a = !1; $(".epm-nav-sub").each(function () { var b = $(this); b.is(":visible") && b.height() >= h.height() && (a = !0) }), a && i.fadeIn(300) }, function () { i.fadeOut(300) }), $(window).resize(function () { var a = $("#epm-nav-top").height(); h.height(a), $sn.height(a) }), $("a.epm-nav-node").click(function () { var a = $(this); $("#epm-nav-sub-ql").find("a").each(function () { $(this).parent().parent().parent().parent().removeClass(selectedClass) }), a.parent().parent().parent().parent().addClass(selectedClass); var b = -1, c = a.parents("div")[0], d = $(c).siblings("div"); if (d) for (var e = getLinkNodes($(d[0]).parent().parent().attr("id")), f = 0; f < e.length; f++) { var g = e[f]; g.id === c.id && (b = f) } $.cookie(selectedLinkCookie, JSON.stringify({ index: b, uri: a.attr("href") }), cookieOptions) }), window.epmLiveNavigation.snWidth = $sn.width(); var j, k = function () { var a = window.epmLiveNavigation.workspaceTree(); a ? j = $("#" + a._element.id) : window.setTimeout(function () { k() }, 1) }; k(); var l = $sn.width(), m = function () { $("a.rtIn").each(function () { $(this).attr("style", "") }), $(".epm-nav-ws-node").each(function () { $(this).attr("style", "") }); var a = 0; try { a = j.width() + 40 } catch (a) { } var b = 0; l < a && (b = a + 5, $sn.stop().animate({ width: b }, 300), $sn.parent().stop().animate({ width: b }, 300)), $(".epm-nav-ws-node").each(function () { var a = $(this), c = 50 + (0 === b ? l : b) - a.offset().left; a.attr("style", "width:" + c + "px") }), window.epmLiveNavigation.wsTreeExpanded = !0 }, n = function () { $sn.stop().animate({ width: l }, 300), $sn.parent().stop().animate({ width: l }, 300), $(".epm-nav-ws-node").each(function () { $(this).attr("style", "") }), window.epmLiveNavigation.resetWSNodeWidth(), window.epmLiveNavigation.wsTreeExpanded = !1 }, o = function (a) { if (-1 !== (a.attr("class") || "").toLowerCase().indexOf("plus")) { var c = function () { -1 !== (a.attr("class") || "").toLowerCase().indexOf("minus") ? window.setTimeout(function () { m() }, 100) : window.setTimeout(function () { c() }, 1) }; c() } else { var d = function () { -1 !== (a.attr("class") || "").toLowerCase().indexOf("plus") ? window.setTimeout(function () { n() }, 100) : window.setTimeout(function () { d() }, 1) }; d() } }, p = $("#epm-nav-sub-workspaces"), q = !1; $("#EPMNavWorkspacesTree").hover(function () { q = !0, window.epmLiveNavigation.wsTreeExpanded || m() }, function () { n() }), i.hover(function () { window.epmLiveNavigation.wsTreeExpanded || q && (m(), q = !1) }, function () { n() }), $sn.hover(function () { }, function () { p.is(":visible") && n() }); var r = function () { var a = $("a.rtIn"); a.length ? a.each(function () { var a = $(this).parent().parent().find("span"); if (a.length > 1) { var b = $(a.get(1)); b && (b.click(function () { o($(this)) }), b.hover(function () { window.epmLiveNavigation.wsNodeSelectorClass = $(this).attr("class") })) } }) : window.setTimeout(function () { r() }, 1) }; r() } function registerProviderLinks(a) { window.epmLiveNavigation.buildLink = function (a) { var b = $$.currentWebUrl(), c = window.location.href, d = a.Url ? a.Url["#cdata"] : ""; if (-1 !== (d + "").toLowerCase().indexOf("/lists/")) { c = d.replace(/Source={page}&BackTo={page}/g, ""); var e = c.split("?"); e.length > 1 && (e[1] || (c = e[0])) } else { var f = c.split("?"), g = b + f[0].split(escape(b))[1]; g = escape(g), c = d.replace(/{page}/g, g) } return { id: a["@Id"], title: a.Title["#cdata"], url: c, category: a["@Category"], cssClass: a["@CssClass"], order: parseInt(a["@Order"]), siteId: a["@SiteId"], webId: a["@WebId"], listId: a["@ListId"], itemId: a["@ItemId"], external: "True" === a["@External"], visible: "True" === a["@Visible"], active: "True" === a["@Active"], seprator: "True" === a["@Separator"] } }; var b = !1; for (var c in a.Nodes) if (a.Nodes.hasOwnProperty(c)) { var d = a.Nodes[c].NavLink; d.length || (d = [d]); for (var e in d) if (d.hasOwnProperty(e)) for (var f = d[e], g = 0; g < tlNodes.length; g++) { var h = tlNodes[g]; if (h.provider === c) if ("Workspaces" !== c) h.registerLink(window.epmLiveNavigation.buildLink(f)); else try { var i = window.epmLiveNavigation.workspaceTree(); i.trackChanges(); var j = f.Title["#cdata"]; b ? h.registerWorkspace(window.epmLiveNavigation.buildLink(f), i) : (h.registerLink(window.epmLiveNavigation.buildLink(f)), "All Workspaces" === j && (b = !0, $("#epm-nav-sub-workspaces-static-links").remove().insertBefore("#EPMNavWorkspacesTree"))), i.commitChanges() } catch (a) { } } if ("Workspaces" === c) { window.epmLiveNavigation.resetWorkspaceTree = function () { try { var a = window.epmLiveNavigation.workspaceTree(); a.trackChanges(); for (var b = a.get_allNodes(), c = 0; c < b.length; c++) b[c].set_expanded(!1); var d = function (b) { var c = a.findNodeByValue(b); if (c && c != a) { var e = c.get_parent(); e === a || e.get_expanded() || (e.set_expanded(!0), d(e.get_value())) } }, e = window.epmLiveNavigation.currentWebId, f = a.findNodeByValue(e); f && (f.get_parent() !== a ? d(e) : f.set_expanded(!0), f.set_selected(!0)), a.commitChanges() } catch (a) { } }; var k = window.epmLiveNavigation.workspaceTree(); $("a.rtIn").each(function () { var a = $(this), b = a.parent(), c = a.text(), d = k.findNodeByText(c).get_value(); b.append('<div id="' + d + '" class="epm-nav-ws-node"></div>'), a.remove(), a.text(""), a.append("<span>" + c + "</span>"), window.epmLiveNavigation.wsInfoDict[d].hasAccess || a.addClass("epm-nav-ws-disabled"), b.find(".epm-nav-ws-node").append(a) }), window.epmLiveNavigation.resetWorkspaceTree(), $("#EPMNavWorkspacesTree").fadeIn(300) } else "Applications" === c ? $($("#epm-nav-sub-new-static-links").find(".epm-nav-sub-header").get(0)).attr("style", "padding-top: 0px !important") : "Favorites" === c && $($("#epm-nav-sub-favorites-static-links").find(".epm-nav-sub-header").get(0)).attr("style", "padding-top: 0px !important"); window.SP.SOD.notifyScriptLoadedAndExecuteWaitingJobs("EPMLiveNavigation_" + c), "Settings" !== c && expandNodes(c) } $(".epm-app-btn").click(function () { document.location.href = $(this).data("url") }) } function loadLinks() { for (var a = [], b = 0; b < tlNodes.length; b++) { var c = tlNodes[b], d = c.provider; d && d !== window.epmLiveNavigation.selectedNode && a.push(d) } a.length > 0 && epmLiveService.execute("GetNavigationLinks", a.join(), function (a) { registerProviderLinks(a), registerLinkEvents() }, function (a) { console.log(a) }) } function registerStaticProviderLinks() { var a = null; if (window.epmLiveNavigation && (a = window.epmLiveNavigation.staticProvider), null !== a) { if (a) { var b = $$.parseJson(base64Service.decode(a)); b.Nodes.Workspaces ? window.epmLiveNavigation.workspaceTree() ? registerProviderLinks(b) : window.setTimeout(function () { registerStaticProviderLinks() }, 1) : registerProviderLinks(b) } } else window.setTimeout(function () { registerStaticProviderLinks() }, 1) } function registerTopLevelNodes() { $("#epm-nav-top").find("[data-role='top-nav-node']").each(function () { tlNodes.push(new navNode(this)) }) } var animSpeed = 300, nodeClass = "epm-nav-node", hoverClass = "epm-nav-node-hover", openedClass = "epm-nav-node-opened", selectedClass = "epm-nav-node-selected", expandedClass = "epm-nav-node-expanded", collapsedClass = "epm-nav-node-collapsed", selectedTlNodeCookie = "epmnav-selected-tlnode", selectedLinkCookie = "epmnav-selected-link", expandStateCookie = "epmnav-expand-state", pinStateCookie = "epmnav-pin-state", cookieOptions = { expires: 365, path: "/" }, $sn = $("#epm-nav-sub"), tlNodes = [], navNode = function (a) { var b = {}, c = a, d = $(a), e = $("#epm-nav-sub-" + d.data("id")), f = c.id, g = d.data("linkprovider"), h = function () { return d.parent().hasClass(selectedClass) }, i = function () { return d.parent().hasClass(openedClass) }, j = function (a) { a ? d.parent().addClass(selectedClass) : d.parent().removeClass(selectedClass) }, k = function () { e.hide(), d.parent().removeClass(openedClass) }, l = function () { $sn.is(":visible") && $sn.hide("slide", { direction: "left" }, animSpeed), k() }, m = function (a, b) { var c = new window.Telerik.Web.UI.RadTreeNode, d = b; a.category && (d = b.findNodeByValue(a.category) || d), c.set_text(a.title), c.set_value(a.webId), a.active ? c.set_navigateUrl(a.url) : c.set_navigateUrl("javascript:;"), window.epmLiveNavigation.wsTeamDict = window.epmLiveNavigation.wsTeamDict || {}, window.epmLiveNavigation.wsTeamDict[a.webId] = a.itemId; var e = a.itemId.split("."), f = ""; try { f = e[1] } catch (a) { } var g = ""; try { g = e[2] } catch (a) { } window.epmLiveNavigation.wsInfoDict = window.epmLiveNavigation.wsInfoDict || {}, window.epmLiveNavigation.wsInfoDict[a.webId] = { siteId: a.siteId, listId: f, itemId: g, hasAccess: a.active }, d.get_nodes().add(c) }, n = function (a) { a.seprator ? r(a.category) : "header" === a.url.toLowerCase() ? (s(a.category), p(a)) : "placeholder" === a.url.toLowerCase() ? (s(a.category), o(a)) : (s(a.category), q(a)) }, o = function (a) { var c = a.category; c || (c = "__STATIC__"); var d = '<li class="epm-nav-sub-placeholder">' + a.title + "</li>"; b[c].$el.append(d) }, p = function (a) { var c = a.category; c || (c = "__STATIC__"); var d = "epm-nav-sub-header"; 0 === e.find("li.epm-nav-section-header").length && (d = "epm-nav-section-header"); var f = '<li class="' + d + '">' + a.title + "</li>"; b[c].$el.append(f), f = '<li class="epm-nav-sub-header-bottom"></li>', b[c].$el.append(f) }, q = function (a) { var c = a.category; c || (c = "__STATIC__"); for (var d = !1, e = a.cssClass.split(" "), f = 0; f < e.length; f++) if ("epm-nav-button" === e[f]) { d = !0, a.cssClass = a.cssClass.replace(/epm-nav-button/g, ""); break } var g = ""; a.cssClass && (g = '<span class="epm-nav-icon ' + a.cssClass + '"></span>'); var h = "epm-nav-node epm-nav-trans", i = b[c].$el.parent().get(0).id; "epm-nav-sub-settings" !== i && "epm-nav-sub-workplace" !== i || (h = "epm-nav-node"), d && (h += " epm-nav-button", h = h.replace(/epm-nav-trans/g, "")); var j = ""; a.external && (j = ' target="_blank"'); var k = '<li id="' + a.id + '" class="' + h + '" style="display:none;">' + g + '<a id="epm-nav-link-' + a.id + '" href="' + a.url + '" data-siteid="' + a.siteId + '" data-webid="' + a.webId + '" data-listid="' + a.listId + '" data-itemid="' + a.itemId + '"' + j + "><span>" + a.title + "</span></a></li>"; b[c].$el.append(k); var l = $("#" + a.id); a.visible && l.show(), l.find("a").click(function () { var a = $(this), b = a.parent(); if (!b.hasClass("epm-nav-button")) { $sn.find("a").each(function () { $(this).parent().removeClass(selectedClass) }); var c = "", d = "", e = b.parent().get(0).id; "epm-nav-sub-favorites-static-links" !== e && "epm-nav-sub-recent-static-links" !== e && "epm-nav-sub-new-static-links" !== e && (b.addClass(selectedClass), c = a.attr("href"), d = a.get(0).id), $.cookie(selectedLinkCookie, JSON.stringify({ id: d, url: c }), cookieOptions) } }) }, r = function (a) { var b = '<div class="epm-nav-sub-sep"></div>'; a ? $("#" + t(a)).append(b) : e.append(b) }, s = function (a) { if (a || (a = "__STATIC__"), !b[a]) { var c = t(a), d = "epm-nav-node-expanded"; "__STATIC__" === a && (d = "epm-nav-node-static"), "__STATIC__" !== a && e.append('<div id="' + c + '" class="epm-nav-node epm-nav-node-root epm-nav-cat"><span class="' + d + '">&nbsp;</span><span class="epm-nav-cat-title">' + a + "</span></div>"), e.append('<ul id="' + c + '-links" class="epm-nav-links ' + d + '"></ul>'), b[a] = { id: c, $el: $("#" + c + "-links") } } }, t = function (a) { return e.get(0).id + "-" + a.toLowerCase().replace(/ /g, "-").replace(/_/g, "").replace(/[^\w-]+/g, "").replace(/--/g, "-") }, u = function () { e.fadeIn(300), d.parent().addClass(openedClass) }, v = function () { u(), $sn.is(":visible") || $sn.show("slide", { direction: "left" }, animSpeed) }; return d.click(function () { if (h()) i() && "unpinned" === $.cookie(pinStateCookie) ? l() : v(); else { for (var a in tlNodes) if (tlNodes.hasOwnProperty(a)) { var b = tlNodes[a]; b.id !== f && b.selected() && (b.select(!1), b.close()) } j(!0), v(), $.cookie(selectedTlNodeCookie, JSON.stringify({ id: f, webUrl: $$.currentWebUrl() }), cookieOptions); for (var c in tlNodes) if (tlNodes.hasOwnProperty(c)) { var d = tlNodes[c]; d.id !== f && $("#" + d.id.replace("top", "sub")).hide() } } }), { id: f, provider: g, selected: h, select: j, close: k, closeNav: l, registerLink: n, registerWorkspace: m, el: c, $el: d, $menu: e } }; window.epmLiveNavigation.togglePinned = function (a) { "pinned" === $sn.data("pinstate") ? window.epmLiveNavigation.unpin(a) : window.epmLiveNavigation.pin(a) }, window.epmLiveNavigation.pin = function (a) { changePinState("pinned", a) }, window.epmLiveNavigation.unpin = function (a) { changePinState("unpinned", a) }, window.epmLiveNavigation.removeLink = function (a) { var b = $sn.find("#epm-nav-link-" + a.id); window.epmLiveNavigation.handleContextualCommand(a.id, b.data("webid"), b.data("listid"), b.data("itemid"), "nav:remove", "98") }, window.epmLiveNavigation.registerLink = function (a) { if (a) { var b; switch (a.kind) { case 0: case 1: b = "Favorites"; break; case 2: case 3: b = "Workspaces" } if (b) if (3 !== a.kind) for (var c = 0; c < tlNodes.length; c++) { var d = tlNodes[c]; if (d.provider === b) { a.cssClass = "epm-nav-sortable " + a.cssClass, d.registerLink(a); var e = $sn.find("#" + a.id), f = $("#epm-nav-sub-" + b.toLowerCase() + "-static-links"); if (f.find(".epm-nav-sub-placeholder").each(function () { var b = $(this), c = !1, d = b.text(); 0 === a.kind && "No pages" === d ? c = !0 : 1 === a.kind && "No items" === d ? c = !0 : 2 === a.kind && "No favorite workspaces" === d && (c = !0), c && b.remove() }), a.kind < 2 && e.find("a").attr("style", "width:115px !important;"), 0 === a.kind || 2 === a.kind) try { e.remove().insertBefore($(f.find(".epm-nav-sub-header").get(1))) } catch (a) { } 2 !== a.kind ? window.epmLiveNavigation.addFavoritesMenu(e) : window.epmLiveNavigation.addFavoriteWSMenu(e), e.addClass("epm-nav-sortable"), window.epmLiveNavigation.addDragger(e), e.fadeIn(300); break } } else epmLiveService.execute("GetNavigationLinks", b, function (a) { var c = [], d = a.Nodes.Workspaces.NavLink; for (var e in d) if (d.hasOwnProperty(e)) { var f = d[e]; if (0 === $sn.find("#" + f["@Id"]).length) { var g = f.Title["#cdata"]; if ("Workspaces" !== g && "New Workspace" !== g && "Favorite Workspaces" !== g && "All Workspaces" !== g) { var h = function () { var a = window.epmLiveNavigation.buildLink(f); if (window.epmLiveNavigation.buildLink) { for (var d = !1, e = 0; e < c.length; e++) if (c[e] === a.title) { d = !0; break } if (d) { for (var g = 0; g < tlNodes.length; g++) { var i = tlNodes[g]; if (i.provider === b) { var j = window.epmLiveNavigation.workspaceTree(); if (!j.findNodeByText(a.title)) { j.trackChanges(), i.registerWorkspace(a, j), j.commitChanges(), $("a.rtIn").each(function () { var b = $(this), c = b.text(); if (c === a.title) { var d = b.parent(); d.append('<div id="' + j.findNodeByText(c).get_value() + '" class="epm-nav-ws-node"></div>'), b.remove(), b.text(""), b.append("<span>" + c + "</span>"), d.find(".epm-nav-ws-node").append(b); var e = b.parent(); e.addClass("epm-nav-sortable"), b.attr("style", "width:124px !important; position: relative; top: 2px;"), window.epmLiveNavigation.addFavoriteWSMenu(e) } }); var n, k = "#" + a.id, l = [], m = {}, o = $(k).text(); $($(k).parents("ul")[0]).find("li").each(function () { var a = $(this), b = a.text(); b !== o ? (l.push(b), m[b] = a) : n = a }), l.sort(); for (var p = !1, e = 0; e < l.length; e++) if (!p) { var q = l[e]; q > o && (n.insertBefore(m[q]), n.removeClass("rtLast"), $($(n.parents("ul")[0]).find("li:last")[0]).addClass("rtLast"), p = !0) } } break } } $("#epm-nav-nows-ph").remove(), $("#EPMNavWorkspacesTree").fadeIn(300) } else a.cssClass && (a.kind = 2, a.category = null, window.epmLiveNavigation.registerLink(a)), c.push(a.title) } else window.setTimeout(function () { h() }, 1) }; h() } } } try { $("#epm-nav-sub-workspaces a").length < 3 && window.setTimeout(function () { window.epmLiveNavigation.registerLink({ kind: 3 }) }, 200) } catch (a) { } }, function (a) { console.log(a) }) } }, window.epmLiveNavigation.showAssociatedItems = function (a) { var b = function (a) { SP.SOD.execute("SP.UI.Dialog.js", "SP.UI.ModalDialog.showModalDialog", { url: a, showMaximized: !0 }) }, c = function (a) { var d = $$.currentWebUrl(); d ? $.ajax({ type: "POST", url: (d + "/_layouts/15/epmlive/gridaction.aspx?action=linkeditemspost&listid=" + a.listId + "&lookups=" + a.lookup + "&field=" + a.field + "&LookupFieldList=" + a.listName).replace(/\/\//g, "/"), contentType: "application/json; charset=utf-8", dataType: "json", success: function (c) { b(a.url) }, error: function (c) { b(a.url) } }) : window.setTimeout(function () { c(a) }, 1) }; c(a) }, window.epmLiveNavigation.createNewOpenDialog = function (a, b, c) { var d = { id: c, url: window.epmLive.currentWebUrl + "/_layouts/15/epmlive/redirectionproxy.aspx?action=gotolist&webid=" + window.epmLive.currentWebId + "&listid=" + c, name: b, icon: null }, e = { url: a, showMaximized: !1, dialogReturnValueCallback: function (a) { 1 == a && (void 0 == window.epmLive.SocialStream_SE && null == window.epmLive.SocialStream_SE || window.epmLive.SocialStream_SE.toolbarManager.handleCreationAction(a, null, d)) } }; SP.SOD.execute("SP.UI.Dialog.js", "SP.UI.ModalDialog.showModalDialog", e) }; var _init = function () { registerTopLevelNodes(), registerStaticProviderLinks(), changePinState($.cookie(pinStateCookie) || "pinned"), expandNodes(), selectLink(), registerEvents(), ExecuteOrDelayUntilScriptLoaded(loadLinks, "EPMLive.js"), window.SP.SOD.notifyScriptLoadedAndExecuteWaitingJobs("EPMLive.Navigation.Initialized") }; return { init: _init, expandProviderNodes: expandNodes } }(); epmLiveNavigation.init(); var menuManager = function () { return { setupMenu: function (a, b, c, d, e) { b = b || []; var f = $(a.find("a").get(0)), g = f.data("itemid"), h = f.data("siteid"), i = f.data("webid"), j = f.data("listid"), k = a.get(0).id; try { if (g) { if (-1 !== g.indexOf(".")) { var m = g.split("."); i = m[0], j = m[1], g = m[2] } } else { var l = window.epmLiveNavigation.wsInfoDict[k]; l && (h = l.siteId, i = k, j = l.listId, g = l.itemId) } } catch (a) { } var n = (j || "").replace(/-/g, ""), o = $("#menu" + n + g), p = function (a, f) { var h = function (a) { switch (a.toLowerCase()) { case "nav:remove": case "nav:addtofav": case "nav:removefavws": case "nav:removefavri": return "icon-star-6"; case "view": return "icon-info"; case "edit": return "icon-pencil-2"; case "delete": return "icon-close-3"; case "approve": return "icon-thumbs-up-4"; case "comments": return "icon-bubble-dots"; case "buildteam": return "icon-user-plus-3"; case "workspace": return "icon-tree-2"; case "epkcommand:rpeditor": return "icon-users-5"; case "perms": return "icon-key"; case "createworkspace": return "icon-tree-2"; case "epkcommand:costs": return "icon-coins"; case "workflows": return "icon-loop-3"; case "gotoplanner": return "fui-ext-project"; default: return "epm-nav-cm-blank" } }, l = k; a.length && a.push({ title: "--SEP--" }); for (var m in b) b.hasOwnProperty(m) && a.push(b[m]); o = $("#menu" + n + g), $(o.find(".epm-nav-cm-loading").get(0)).remove(); for (var p = 0; p < a.length; p++) { var q = a[p]; if (c && (q.kind = 0), d && (q.kind = d), !i || "undefined" === i) try { i = f.parent().get(0).id } catch (a) { } if ("--SEP--" === q.title) p !== a.length - 1 && o.append($('<li class="seprator"></li>').hide().fadeIn()); else { var s = ""; e && (s = e[q.command]), o.append($('<li><span class="epm-nav-cm-icon ' + h(q.command) + '">&nbsp;</span><a href="javascript:epmLiveNavigation.handleContextualCommand(\'' + l + "','" + i + "','" + j + "','" + g + "','" + q.command + "','" + q.kind + "','" + s + '\');" style="width: 122px !important; display: inline-block;">' + q.title + "</a></li>").hide().fadeIn()), o.find("a").click(function () { r() }) } } o.find("a").click(function () { $(this).parent().find(".icon-star-6").length && o.hover(function () { }, function () { o.remove() }) }), o.hover(function () { window.epmNavHoveredNode = l }), o.mouseleave(function () { window.epmNavHoveredNode = null, window.setTimeout(function () { null == window.epmNavHoveredNode && r() }, 200) }), $(".epm-nav-links, #EPMNavWorkspacesTree").hover(function () { }, function () { window.epmNavHoveredNode = null, window.setTimeout(function () { null === window.epmNavHoveredNode && r() }, 200) }), $(document).on("click", ".epm-nav-dragger", function () { r() }), o.offset().top + o.height() > $(window).height() && o.css("top", o.offset().top - o.height() - 30), o.offset().left + o.width() > $(window).width() && o.css("left", o.offset().left - o.width() - 30) }, q = function () { window.epmNavHoveredNode = null, o.css("top", a.offset().top + 20), o.css("left", a.offset().left), o.offset().top + o.height() > $(window).height() && o.css("top", o.offset().top - o.height() - 30), o.offset().left + o.width() > $(window).width() && o.css("left", o.offset().left - o.width() - 30), o.fadeIn(200) }, r = function () { o.fadeOut(200), $("#menu" + n + g).length && $("#menu" + n + g).remove() }, s = function () { o.is(":visible") ? r() : q() }; if (window.epmNavSelectNode != n + g && null != window.epmNavSelectNode && $("#menu" + window.epmNavSelectNode).fadeOut(200), window.epmNavSelectNode = n + g, 0 === $("body").find("#menu" + n + g).length) { if ($("body").append('<ul class="epm-nav-contextual-menu"  id="menu' + n + g + '" style="display:block;position:absolute;top:' + (a.offset().top + 20) + "px;left:" + a.offset().left + 'px;"><li class="epm-nav-cm-loading"><span>Loading...</span></li></ul>'), o = $("#menu" + n + g), q(), !h) { i = k; var t = window.epmLiveNavigation.wsInfoDict[i]; h = t.siteId, j = t.listId, g = t.itemId, f.data("siteid", h), f.data("webid", i), f.data("listid", j), f.data("itemid", g) } var u = function () { if (window.epmLive) { var a = "<Request><Params><SiteId>" + h + "</SiteId><WebId>" + i + "</WebId><ListId>" + j + "</ListId><ItemId>" + g + "</ItemId><UserId>" + window.epmLive.currentUserId + "</UserId><DebugMode>" + window.epmLive.debugMode + "</DebugMode></Params></Request>"; epmLiveService.execute("GetContextualMenuItems", a, function (a) { var b = []; if (a.ContextualMenus.Items) { var c = a.ContextualMenus.Items.Item; if (c) { c.length || (c = [c]); for (var e = 0; e < c.length; e++) { var g = c[e]; d ? b.push({ title: g["@Title"], command: g["@Command"], kind: d, imgUrl: g["@ImageUrl"] }) : b.push({ title: g["@Title"], command: g["@Command"], kind: g["@Kind"], imgUrl: g["@ImageUrl"] }) } } } p(b, f) }, function (a) { p([], f) }) } else window.setTimeout(function () { u() }, 1) }; u(), $(".epm-menu-btn span").mouseleave(function () { window.epmNavHoveredNode = null, window.setTimeout(function () { null == window.epmNavHoveredNode && r() }, 200) }), $(".epm-nav-ws-node").mouseleave(function () { window.epmNavHoveredNode = null, window.setTimeout(function () { null == window.epmNavHoveredNode && r() }, 200) }), $(".epm-nav-node").mouseleave(function () { window.epmNavHoveredNode = null, window.setTimeout(function () { null == window.epmNavHoveredNode && r() }, 200) }) } else s() } } }(); window.epmLiveNavigation.addContextualMenu = function (a, b, c, d, e) { a.append('<span class="epm-menu-btn"><span class="icon-ellipsis-horizontal"></span></span>'), $(a.find(".epm-menu-btn").get(0)).click(function () { menuManager.setupMenu(a, b, c, d, e) }) }, window.epmLiveNavigation.isSecurityJobRunning = function (b, c, d) { var e = !1, f = '<Data><Param key="ListID">' + c + '</Param><Param key="itemId">' + d + "</Param></Data>"; return $.ajax({ type: "POST", url: b + "/_vti_bin/WorkEngine.asmx/Execute", data: "{ Function: 'IsSecurityJobAlreadyRunning', Dataxml: '" + f + "' }", async: !1, contentType: "application/json; charset=utf-8", dataType: "json", success: function (a) { if (a.d) { var b = $$.parseJson(a.d), c = b.Result; $$.responseIsSuccess(c) && (e = "True" === c.SecurityJob["@Success"]) } }, error: function (a) { console.log(a), e = !1 } }), e }, window.epmLiveNavigation.isImportResourceRunning = function () { var b = !1; return $.ajax({ type: "POST", url: window.epmLive.currentWebUrl + "/_vti_bin/WorkEngine.asmx/Execute", async: !1, data: "{ Function: 'IsImportResourceAlreadyRunning', Dataxml: '' }", contentType: "application/json; charset=utf-8", dataType: "json", success: function (a) { if (a.d) { var c = window.epmLive.parseJson(a.d), d = c.Result; window.epmLive.responseIsSuccess(d) && (b = "True" === d.ResourceImporter["@Success"]) } }, error: function (a) { window.epmLive.log(a), b = !1 } }), b }; var manageSettings = function () { var a = function () { return { collapseAll: function (a) { a.find(".epm-nav-cat").each(function () { var a = $($(this).find("span").get(0)); a.removeClass("epm-nav-node-expanded"), a.addClass("epm-nav-node-collapsed") }), a.find(".epm-nav-links").each(function () { var a = $(this); a.hasClass("epm-nav-node-static") || (a.removeClass("epm-nav-node-expanded"), a.addClass("epm-nav-node-collapsed")) }) } } }(), b = $("#epm-nav-sub-settings"); a.collapseAll(b), epmLiveNavigation.expandProviderNodes("Settings") }, manageFavorites = function () { var a = function () { return window.epmLiveNavigation.addDragger = function (a) { -1 === a.get(0).innerHTML.indexOf("epm-nav-dragger") && (a.prepend('<span class="epm-nav-dragger">&nbsp;</span>'), a.hover(function () { $($(this).find(".epm-nav-dragger").get(0)).css("visibility", "visible") }, function () { $($(this).find(".epm-nav-dragger").get(0)).css("visibility", "hidden") })) }, window.epmLiveNavigation.addFavoritesMenu = function (a) { a.append('<span class="epm-menu-btn"><span class="icon-ellipsis-horizontal"></span></span>'), $(a.find(".epm-menu-btn").get(0)).click(function () { menuManager.setupMenu(a, [{ title: "Remove", command: "nav:remove", kind: "98" }]) }) }, { resetOrder: function (a) { var b = [], c = 0; a.find(".epm-nav-node").each(function () { b.push($(this).get(0).id + ":" + ++c) }), b.length && epmLiveService.execute("ReorderLinks", b.join(), function (a) { }, function (a) { console.log(a) }) }, addDragger: function (a) { window.epmLiveNavigation.addDragger(a) }, addMenu: function (a) { window.epmLiveNavigation.addFavoritesMenu(a) } } }(), b = $("#epm-nav-sub-favorites-static-links"); b.find(".epm-nav-sortable").each(function () { var b = $(this).parent(); b.addClass("epm-nav-sortable"), $(b.find("a").get(0)).attr("style", "width:115px !important;"), a.addDragger(b), a.addMenu(b) }); try { var c = $("#epm-nav-sub-favorites"); b.sortable({ items: "li.epm-nav-sortable", placeholder: "epm-nav-drag-placeholder", start: function (a, b) { if (c.is(":visible")) { var d = b.item.index(), e = "page"; d > $(c.find(".epm-nav-sub-header").get(1)).index() && (e = "item"), b.item.data("kind", e) } }, stop: function (a, b) { if (c.is(":visible")) { var d = !0, e = b.item.data("kind"), f = b.item.index(), g = $(c.find(".epm-nav-sub-header").get(1)).index(); "page" === e ? f > g && (d = !1) : f < g && (d = !1), d || $($(b.item).parent()).sortable("cancel") } }, update: function () { a.resetOrder(b) } }), b.disableSelection() } catch (a) { } }, manageRecentItems = function () { var c, a = function () { var b = function (a) { a.append('<span class="epm-menu-btn"><span class="icon-plus-2"></span></span>'), $(a.find("a").get(0)).attr("style", "width:115px !important;"), $(a.find(".epm-menu-btn").get(0)).click(function () { var b = $(a.find("a").get(0)); window.epmLiveNavigation.handleContextualCommand(null, b.data("webid"), b.data("listid"), null, "nav:add", 0) }) }, c = function (a) { var b = $(a.find("a").get(0)); b.attr("style", "width: 115px !important;"), a.append('<span class="epm-menu-btn"><span class="icon-ellipsis-horizontal"></span></span>'), $(a.find(".epm-menu-btn").get(0)).click(function () { var c = [], d = !1; $("#epm-nav-sub-favorites-static-links").find("a").each(function () { var a = $(this); a.data("listid") === b.data("listid") && a.data("itemid") === b.data("itemid") && (d = !0) }), d ? c.push({ title: "Remove", command: "nav:removeFavRI", kind: 98 }) : c.push({ title: "Add", command: "nav:addToFav", kind: 98 }), menuManager.setupMenu(a, c) }) }; return { addMenu: function (a, d) { a.index() < d ? b(a) : c(a) } } }(), b = $("#epm-nav-sub-recent-static-links"); b.find(".epm-nav-sub-header").each(function () { var a = $(this), b = a.text(), d = a.index(); "Recent Items" === b && (c = d) }), b.find(".epm-nav-node").each(function () { a.addMenu($(this), c) }) }, manageWorkspaces = function () { var a = $("#EPMNavWorkspacesTree"), b = function () { window.epmLiveNavigation.addFavoriteWSMenu = function (a) { a.append('<span class="epm-menu-btn"><span class="icon-ellipsis-horizontal"></span></span>'), $(a.find(".epm-menu-btn").get(0)).click(function () { var b = a.get(0).id, c = [], d = null, e = !0; if (a.hasClass("epm-nav-ws-node") || a.is(".workspacecentercontextmenu")) if (window.epmLiveNavigation.wsInfoDict[b].hasAccess) { var f = !1; $("#epm-nav-sub-workspaces-static-links").find("a").each(function () { $(this).data("webid") === b && (f = !0) }), f ? c.push({ title: "Remove", command: "nav:removeFavWS", kind: 98 }) : c.push({ title: "Add", command: "nav:addToFav", kind: 98 }), d = b } else e = !1; else c.push({ title: "Remove", command: "nav:removeFavWS", kind: 98 }), d = $(a.find("a").get(0)).data("webid"); e && ("X" !== window.epmLiveNavigation.wsTeamDict[d] && b !== window.epmLive.rootWebId && c.push({ title: "Edit team", command: "nav:team", kind: 6 }), menuManager.setupMenu(a, c)) }) }; var b = function (a) { var b = [], c = 0; a.find("li.epm-nav-sortable").each(function () { b.push($(this).get(0).id + ":" + ++c) }), b.length && epmLiveService.execute("ReorderLinks", b.join(), function (a) { }, function (a) { console.log(a) }) }, c = function (a) { a.prepend('<span class="epm-nav-dragger">&nbsp;</span>'), a.hover(function () { $($(this).find(".epm-nav-dragger").get(0)).css("visibility", "visible") }, function () { $($(this).find(".epm-nav-dragger").get(0)).css("visibility", "hidden") }) }, d = function (a) { var b = window.epmLiveNavigation.wsInfoDict[a.get(0).id]; b ? b.hasAccess && window.epmLiveNavigation.addFavoriteWSMenu(a) : window.epmLiveNavigation.addFavoriteWSMenu(a) }, e = function () { window.epmLiveNavigation.resetWSNodeWidth = function () { $("a.rtIn").each(function () { var a = $(this), b = $(a.find("span").get(0)), c = 15, d = b.width(); if (d) { var e = a.offset().left - 50, f = d + e, g = 180, h = g - e - c; a.data("originalwidth", a.width()), a.data("newwidth", h), f > g - c ? a.width(h) : a.parent().width(h) } }) }, window.epmLiveNavigation.resetWSNodeWidth() }, f = function () { if ($.fn.bindWithDelay) { var a = $("#EPMNavWSTSearch"); a.val(""), a.bindWithDelay("keyup", function () { var a = $(this).val().trim(); a && a.length > 1 ? g(a.toLowerCase()) : i() }, 200) } else window.setTimeout(function () { f() }, 100) }, g = function (b) { for (var c = window.epmLiveNavigation.workspaceTree().get_allNodes(), d = !1, e = 0; e < c.length; e++) { var f = c[e], g = f.get_text().trim(); g && -1 !== g.toLowerCase().indexOf(b) ? (j(f), f.set_visible(!0), d = !0, h()) : f.set_visible(!1) } d || 0 !== a.find(".epm-nav-sub-placeholder").length || a.append($('<div class="epm-nav-sub-placeholder">No search results</div>').hide().fadeIn(200)) }, h = function () { a.find(".epm-nav-sub-placeholder").each(function () { $(this).remove() }) }, i = function () { h(); for (var a = window.epmLiveNavigation.workspaceTree().get_allNodes(), b = 0; b < a.length; b++) a[b].set_visible(!0); window.epmLiveNavigation.resetWorkspaceTree() }, j = function (a) { var b = a.get_parent(); b && b !== window.epmLiveNavigation.workspaceTree() && (b.set_visible(!0), b.set_expanded(!0), j(b)) }; return { resetOrder: b, addDragger: c, addMenu: d, initializeSearch: f, configureNodeWidth: e } }(), c = $("#epm-nav-sub-workspaces-static-links"); c.find(".epm-nav-sortable").each(function () { var a = $(this).parent(); a.addClass("epm-nav-sortable"), $(a.find("a").get(0)).attr("style", "width:124px !important; position: relative; top: 2px;"), b.addDragger(a), b.addMenu(a) }); try { c.sortable({ items: "li.epm-nav-sortable", placeholder: "epm-nav-drag-placeholder", update: function () { b.resetOrder(c) } }), c.disableSelection() } catch (a) { } b.configureNodeWidth(), b.initializeSearch(), a.find("a").each(function () { b.addMenu($(this).parent()) }), 1 === a.find("a").length && (a.hide(), $("#epm-nav-sub-workspaces-static-links").get(0).innerHTML += '<li id="epm-nav-nows-ph" class="epm-nav-sub-placeholder">No workspaces</li>') }; ExecuteOrDelayUntilScriptLoaded(manageSettings, "EPMLiveNavigation_Settings"), ExecuteOrDelayUntilScriptLoaded(manageFavorites, "EPMLiveNavigation_Favorites"), ExecuteOrDelayUntilScriptLoaded(manageWorkspaces, "EPMLiveNavigation_Workspaces"), ExecuteOrDelayUntilScriptLoaded(manageRecentItems, "EPMLiveNavigation_RecentItems"), window.SP.SOD.notifyScriptLoadedAndExecuteWaitingJobs("EPMLive.Navigation.js") }) } function onJqueryLoaded() { ExecuteOrDelayUntilScriptLoaded(initializeNavigation, "EPMLiveNavigation") } $(function () { setInterval(function () { authenticate() }, 12e4) }), window.showModalDialog = window.showModalDialog || function (a, b, c) { document.body.innerHTML += "<dialog id='myDialog'><div id='myDialogBody'><textarea id='myDialogtxtarea' rows='4' cols='50'></textarea></div><div style='float: right;margin: 20px;'><button id='myDialogOk'>Ok</button><button id='myDialogClose'>Close</button></div></dialog>"; for (var d = document.getElementById("myDialog"), h = (b.value, c.split(";")), i = 0; i < h.length; i++) -1 != h[i].indexOf("Height") ? h[i].split(":")[1] : -1 != h[i].indexOf("Width") && h[i].split(":")[1]; return d.showModal(), $("textarea#myDialogtxtarea").val(b.value), document.getElementById("myDialogClose").onclick = function () { d.close(), d.remove() }, document.getElementById("myDialogOk").onclick = function () { $("#" + b.id).val($("textarea#myDialogtxtarea").val()), d.close(), d.remove() }, b.value }, ExecuteOrDelayUntilScriptLoaded(onJqueryLoaded, "jquery.min.js") }();