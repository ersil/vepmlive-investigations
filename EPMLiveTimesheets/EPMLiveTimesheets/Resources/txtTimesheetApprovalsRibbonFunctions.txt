mygrid#gridid#.addFocusedCommands = function($arr)
{
	
	Array.add($arr, 'EnableTimesheetTab');
	
	Array.add($arr, 'EnableTimesheetMain');
	Array.add($arr, 'TimesheetStatusLabel');
	Array.add($arr, 'TimesheetStatus');
	Array.add($arr, 'PreviousPeriod');
	Array.add($arr, 'CurrentPeriod');
	Array.add($arr, 'NextPeriod');
	Array.add($arr, 'ChangePeriod');
	
	Array.add($arr, 'EnableTimesheetApprovals');
	Array.add($arr, 'TimesheetApprove');
	Array.add($arr, 'TimesheetUnlock');
	Array.add($arr, 'TimesheetReject');
	Array.add($arr, 'SendEmail');
	Array.add($arr, 'SendUnsubmitted');
	Array.add($arr, 'SendAll');
	Array.add($arr, 'SendSelected');

	return $arr;
}

mygrid#gridid#.getGlobalCommands = function($arr)
{

	Array.add($arr, 'QueryStatus');
	Array.add($arr, 'QueryCurrentPeriod');
	Array.add($arr, 'PopulatePeriodDropDown');
	return $arr;
}

mygrid#gridid#.canHandleCommand = function($Grid, commandId)
{
	switch(commandId)
	{
		case 'EnableTimesheetApprovals':
		case 'EnableTimesheetTab':
			return true;
		case 'EnableTimesheetMain':
		case 'TimesheetStatusLabel':
		case 'TimesheetStatus':
		case 'CurrentPeriod':
		case 'QueryStatus':
		case 'QueryCurrentPeriod':
		case 'PopulatePeriodDropDown':
		case 'EnableTimesheetData':
		case 'ChangePeriod':
			return true;
		case 'PreviousPeriod':
			return ($Grid._previousperiod != '');
		case 'NextPeriod':
			return ($Grid._nextperiod != '');
		
		case 'TimesheetApprove':
		case 'TimesheetUnlock':
		case 'TimesheetReject':
		case 'SendEmail':
		case 'SendUnsubmitted':
		case 'SendAll':
		case 'SendSelected':
			return true;
		default:
			return false;	
	}
}

mygrid#gridid#.handleCommand = function($Grid, commandId, properties)
{
	
	if(commandId === 'PopulatePeriodDropDown')
	{
		properties.PopulationXML = getPeriods($Grid._allperiods);
	}
	else if(commandId === 'QueryStatus')
	{
		properties['Value'] = $Grid._timesheetstatus;
	}
	else if(commandId === 'QueryCurrentPeriod')
	{
		properties['Value'] = $Grid._timesheetperiod;
	}
	else if(commandId === 'ChangePeriod')
	{
		changePeriod(properties['CommandValueId'], $Grid);
	}
	else if(commandId === 'NextPeriod')
	{
		changePeriod($Grid._nextperiod, $Grid);
	}
	else if(commandId === 'PreviousPeriod')
	{
		changePeriod($Grid._previousperiod, $Grid);
	}
	else if(commandId === 'TimesheetApprove')
	{
		approve#gridid#();	
	}
	else if(commandId === 'TimesheetReject')
	{
		reject#gridid#();	
	}
	else if(commandId === 'TimesheetUnlock')
	{
		unlock#gridid#();	
	}
	else if(commandId === 'SendUnsubmitted')
	{
		sendmail#gridid#(1);
	}
	else if(commandId === 'SendAll')
	{
		sendmail#gridid#(2);
	}
	else if(commandId === 'SendSelected')
	{
		sendmail#gridid#(3);
	}
	else
	{
		//alert(commandId);
	}


	return properties;
}


function changePeriod(period, $Grid)
{
	var $v_1 = new Sys.StringBuilder();
    $v_1.append($Grid._cururl);
    $v_1.append('?NewPeriod=');
    $v_1.append(period);
	
	location.href=$v_1;

	//SP.Utilities.HttpUtility.navigateTo($v_1);
}


function getPeriods(menus)
{
    var sb = new Sys.StringBuilder();    
    sb.append('<Menu Id=\'COB.SharePoint.Ribbon.WithPageComponent.PCNotificationGroup.Dropdown.Menu\'>');    
    sb.append('<MenuSection DisplayMode=\'Menu\' Id=\'COB.SharePoint.Ribbon.WithPageComponent.PCNotificationGroup.Dropdown.Menu.Manage\'>');    
    sb.append('<Controls Id=\'COB.SharePoint.Ribbon.WithPageComponent.PCNotificationGroup.Dropdown.Menu.Manage.Controls\'>');

	var arrPeriods = menus.split(',');
	for(var i = 0;i<arrPeriods.length;i++)
	{
		var arrPeriod = arrPeriods[i].split('|');
		sb.append('<Button Id=\'Ribbon.Timesheet.Periods.ChangePeriod\' Command=\'ChangePeriod\' CommandValueId=\'' + arrPeriod[1] + '\' LabelText=\'' + arrPeriod[0] + '\' />');
	}
    
	sb.append('</Controls>');
    sb.append('</MenuSection>');    
    sb.append('</Menu>');    
    return sb.toString();
}
