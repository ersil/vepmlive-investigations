var ArrGantts = new Array, GridProperties = {}, OnlyGrid = !1, CurrentGrid, CurrentRow; function GetGridId(i) { return i.id.substr(9) } function setupPage(records, UseReporting, PageSize, grid, startpage) { var gridid = GetGridId(grid), pages = Math.ceil(records / PageSize), prev = document.getElementById("PagePrevious" + gridid), next = document.getElementById("PageNext" + gridid), pagediv = document.getElementById("pagediv" + gridid), viewalldiv = document.getElementById("viewalldiv" + gridid), pagetable = document.getElementById("pagetable" + gridid); if (UseReporting) if (pages > 1) { if (!grid.bPageSetup) { grid.bPageSetup = !0, viewalldiv.style.display = "block", pagetable.style.display = "block"; var p = $("#pagediv" + gridid).parent(); $("#pagediv" + gridid).remove(), p.append('<div id="pagediv' + gridid + '"/>'), "0" == startpage && (startpage = "1"), $("#pagediv" + gridid).paginate({ count: pages, start: startpage, display: 12, border: !0, rotate: !1, images: !1, mouse: "press", onChange: ChangePage, gridid: GetGridId(grid) }) } } else viewalldiv.style.display = "none", pagetable.style.display = "none"; else { pagediv.style.display = "inline-block"; var rec = records.split("|"), mygrid = eval("mygrid" + gridid); mygrid.PAGEfirstItem = -1 * parseInt(rec[2]), mygrid.PAGElastItem = rec[1], "0" == rec[0] || mygrid.PAGEfItemHide == mygrid.PAGEfirstItem ? (prev.style.background = "#EFEFEF", prev.style.opacity = "0.5", mygrid.PAGEfItemHide = mygrid.PAGEfirstItem) : (prev.style.background = "#DDDDDD", prev.style.opacity = "1"), "true" == rec[3] ? (next.style.background = "#DDDDDD", next.style.opacity = "1") : (next.style.background = "#EFEFEF", next.style.opacity = "0.5", mygrid.PAGElastItem = 0), "true" != rec[3] && "0" == rec[0] && (pagetable.style.display = "none") } } function GetPageHeight() { var i; return self.innerHeight ? i = self.innerHeight : document.documentElement && document.documentElement.clientHeight ? i = document.documentElement.clientHeight : document.body && (i = document.body.clientHeight), i } function GetItemTop(i) { for (var e = i.offsetTop; i.offsetParent && (e += i.offsetParent.offsetTop, i != document.getElementsByTagName("body")[0]) ;) i = i.offsetParent; return e } function SetGridSize(grid) { var gridid = GetGridId(grid); if (OnlyGrid) { var outer = document.getElementById("gridouter" + gridid), height = GetPageHeight(), top = GetItemTop(outer), currentDialog = SP.UI.ModalDialog.get_childDialog(); outer.style.height = currentDialog ? height - top - 105 + "px" : height - top - 35 + "px" } else { var bodyheight = grid.GetBodyScrollHeight() + 60; bodyheight < 100 && (bodyheight = 100); var gridid = GetGridId(grid), divOuter = document.getElementById("gridouter" + gridid); bodyheight > parseInt(eval("mygrid" + gridid + ".GridHeight")) ? divOuter.style.height = eval("mygrid" + gridid + ".GridHeight") + "px" : divOuter.style.height = bodyheight + "px" } } function GetWebUrl() { return "/" == _spPageContextInfo.webServerRelativeUrl ? "" : _spPageContextInfo.webServerRelativeUrl } function GridListSettings(i) { var e = new SP.Guid(i), r = GetWebUrl() + "/_layouts/15/listedit.aspx?List=" + SP.Utilities.HttpUtility.urlKeyValueEncode(e.toString("B").toUpperCase()); SP.Utilities.HttpUtility.navigateTo(r) } function GridListEditView(i, e) { var r = new SP.Guid(i), t = new SP.Guid(e), d = GetWebUrl() + "/_layouts/15/epmlive/gridaction.aspx?action=editview&List=" + SP.Utilities.HttpUtility.urlKeyValueEncode(r.toString("B").toUpperCase()) + "&View=" + SP.Utilities.HttpUtility.urlKeyValueEncode(t.toString("B").toUpperCase()) + "&Source=" + escape(document.location.href); SP.Utilities.HttpUtility.navigateTo(d) } function GridListCreateView(i) { var e = new SP.Guid(i), r = GetWebUrl() + "/_layouts/15/ViewNew.aspx?List=" + SP.Utilities.HttpUtility.urlKeyValueEncode(e.toString("B").toUpperCase()) + "&Source=" + escape(document.location.href); SP.Utilities.HttpUtility.navigateTo(r) } function GridUnSearch(gridid) { var grid = Grids["GanttGrid" + gridid]; eval("mygrid" + gridid + ".CurPage='0'"), eval("mygrid" + gridid + ".Searcher=''"), ReloadGridWithNewParams(gridid) } function GridSearch(gridid, searchfield, searchvalue, searchtype) { var grid = Grids["GanttGrid" + gridid]; if (grid) { var grid = Grids["GanttGrid" + gridid]; eval("mygrid" + gridid + ".CurPage='0'"), eval("mygrid" + gridid + ".Searcher='&searchfield=" + searchfield + "&searchvalue=" + escape(searchvalue) + "&searchtype=" + searchtype + "'"), ReloadGridWithNewParams(gridid) } else EPM.UI.Loader.current().startLoading({ id: "WebPart" + eval("mygrid" + gridid + ".Qualifier") }), eval("mygrid" + gridid + ".Searcher='&searchfield=" + searchfield + "&searchvalue=" + escape(searchvalue) + "&searchtype=" + searchtype + "'"), TreeGrid({ Data: { Url: GetWebUrl() + "/_layouts/epmlive/getganttitems.aspx?data=" + eval("mygrid" + gridid + ".Params") + eval("mygrid" + gridid + ".Searcher") }, Export: { Url: GetWebUrl() + "/_layouts/15/epmlive/getgriditemsexport.aspx" }, SuppressMessage: 2, Debug: "" }, "griddiv" + gridid) } function GridOnLoaded(grid) { var gridid = GetGridId(grid); grid.Lang.Format.DecimalSeparator = eval("mygrid" + gridid + ".DecimalSeparator"), grid.Lang.Format.GroupSeparator = eval("mygrid" + gridid + ".GroupSeparator") } function GridOnReady(grid) { TGSetEvent("OnRenderFinish", grid.id, GridOnRenderFinish), TGSetEvent("OnGetHtmlValue", grid.id, GridOnGetHtmlValue), TGSetEvent("OnClick", grid.id, GridClick), TGSetEvent("OnClickOutside", grid.id, GridClickOutside), TGSetEvent("OnMouseOutRow", grid.id, GridOnMouseOutRow), TGSetEvent("OnMouseOverOutside", grid.id, GridOnMouseOverOutside), TGSetEvent("OnMouseOverRow", grid.id, GridOnMouseOverRow), TGSetEvent("OnSelect", grid.id, GridOnSelect), TGSetEvent("OnFocus", grid.id, GridOnFocus), TGSetEvent("OnDblClick", grid.id, GridOnDblClick); var gridid = GetGridId(grid), LinkType = eval("mygrid" + gridid + ".LinkType"); "" == LinkType && ("LinkTitle" == grid.LinkTitleField ? eval("mygrid" + gridid + ".LinkType='edit'") : "LinkTitleNoMenu" == grid.LinkTitleField && eval("mygrid" + gridid + ".LinkType='view'")) } function GridOnRenderFinish(grid) { if ("GanttGrid" == grid.id.substr(0, 9)) { TGSetEvent("OnAfterValueChanged", grid.id, GridOnAfterValueChanged), grid.EditRow = 0; var gridid = GetGridId(grid); if (!eval("mygrid" + gridid + ".loadedmenu")) { eval("mygrid" + gridid + ".loadedmenu = true;"), grid.bPageSetup = !1; try { eval("loadMenu" + gridid + "();") } catch (i) { } eval("mygrid" + gridid + ".Groups=''"), eval("mygrid" + gridid + ".Cols=''"), eval("mygrid" + gridid + ".NoPage=''"); var ribbon = eval("mygrid" + gridid + ".RibbonBehavior"); if (OnlyGrid) if ("1" == ribbon) { var wp = document.getElementById("MSOZoneCell_WebPart" + eval("mygrid" + gridid + ".Qualifier")); fireEvent(wp, "mouseup") } else if ("2" == ribbon); else { var wp = document.getElementById("MSOZoneCell_WebPart" + eval("mygrid" + gridid + ".Qualifier")); fireEvent(wp, "mouseup") } } ArrGantts.indexOf(grid.id) > -1 && setupPage(grid.PagInfo, eval("mygrid" + gridid + ".UseReporting"), grid.PagSize, grid, eval("mygrid" + gridid + ".CurPage")), SetGridSize(grid), eval("EPM.UI.Loader.current().stopLoading('WebPart" + eval("mygrid" + gridid + ".Qualifier") + "')"), document.getElementById("searchload" + grid.id.substr(9)).style.display = "", RefreshCommandUI() } } function GridOnGetHtmlValue(grid, row, col, val) { if ("R" == row.Def.Name) { if ("Title" == col) { var gridid = GetGridId(grid); return "" != eval("mygrid" + gridid + ".LinkType") && (val = "<a href=\"javascript:GridGoToItem('" + grid.id + "','" + row.id + "');\">" + val + "</a>"), "1" == grid.GetValue(row, "HasComments") ? val = val + "&nbsp;<a href=\"javascript:GridComments('" + grid.id + "','" + row.id + '\');"><img src="/_layouts/15/epmlive/images/mywork/comment-small.png" border="0"></a>' : "2" == grid.GetValue(row, "HasComments") && (val = val + "&nbsp;<a href=\"javascript:GridComments('" + grid.id + "','" + row.id + '\');"><img src="/_layouts/15/epmlive/images/mywork/commentsnew-small.png" border="0"></a>'), "" != grid.GetValue(row, "wsurl") && (val = val + "&nbsp;<a href=\"javascript:GridWorkspace('" + grid.id + "','" + row.id + '\');"><img src="/_layouts/15/epmlive/images/itemworkspace.png" border="0"></a>'), "1" == grid.GetValue(row, "HasPlan") && (val += '&nbsp;<a href="#"><span class="epm-nav-cm-icon fui-ext-project">&nbsp;</span></a>'), val } } else if ("Header" == row.id && "State" == col) return "State" } function GridWorkspace(i, e) { var r = Grids[i], t = r.GetRowById(e); CurrentGrid = r, CurrentRow = t, i = GetGridId(r); var d = window.epmLiveNavigation.currentWebUrl + "/_layouts/epmlive/gridaction.aspx?action=workspace&webid=" + t.webid + "&listid=" + t.listid + "&ID=" + t.itemid + "&Source=" + escape(location.href); location.href = d } function GridComments(i, e) { var r = Grids[i], t = r.GetRowById(e); CurrentGrid = r, CurrentRow = t, i = GetGridId(r); var d = window.epmLiveNavigation.currentWebUrl + "/_layouts/epmlive/gridaction.aspx?action=comments&webid=" + t.webid + "&listid=" + t.listid + "&ID=" + t.itemid + "&Source=" + escape(location.href), a = window.SP.UI.$create_DialogOptions(); a.url = d, a.width = 600, a.allowMaximize = !1, a.showClose = !0, window.SP.UI.ModalDialog.showModalDialog(a) } function GridCommentsCallBack() { GetRowData(CurrentGrid, CurrentRow) } function GridGoToItem(gridid, rowid) { var grid = Grids[gridid], row = grid.GetRowById(rowid); CurrentGrid = grid, CurrentRow = row, gridid = GetGridId(grid); var LinkType = eval("mygrid" + gridid + ".LinkType"); if (new RegExp(/%\d[\dA-F]/g).test(location.href)) var url = GetWebUrl() + "/_layouts/epmlive/gridaction.aspx?action=" + LinkType + "&webid=" + row.webid + "&listid=" + row.listid + "&ID=" + row.itemid + "&Source=" + location.href; else var url = GetWebUrl() + "/_layouts/epmlive/gridaction.aspx?action=" + LinkType + "&webid=" + row.webid + "&listid=" + row.listid + "&ID=" + row.itemid + "&Source=" + escape(location.href); if (eval("mygrid" + gridid + "._usepopup")) { var options = window.SP.UI.$create_DialogOptions(); options.url = url, options.width = 700, options.allowMaximize = !1, options.showClose = !0, options.dialogReturnValueCallback = GridCommentsCallBack, window.SP.UI.ModalDialog.showModalDialog(options) } else location.href = url } function GridOnMouseOverOutside(i, e, r, t) { i.CurHoverRow && i.SetAttribute(i.GetRowById(i.CurHoverRow), "Title", "ButtonText", " ", 1), i.CurHoverRow = "" } function GridOnMouseOverRow(i, e, r, t) { i.CurHoverRow != e.id && (i.CurHoverRow = e.id, CurrentGrid = i, "" != i.GetValue(e, "itemid") && (i.SetAttribute(e, "Title", "ButtonText", '<div style="position:absolute;overflow:visible;margin-right:5px" id="' + e.id + '"><a data-itemid="' + i.GetValue(e, "itemid") + '" data-listid="' + i.GetValue(e, "listid") + '" data-webid="' + i.GetValue(e, "webid") + '" data-siteid="' + i.GetValue(e, "siteid") + '" ></a></div>', 1), CurrentGrid = i, CurrentRow = e, window.epmLiveNavigation.addContextualMenu($("#" + e.id), [], null, null, { delete: "GridGanttDeleteRow", comments: "GridCommentsCallBack", edit: "GridCommentsCallBack" }))) } function GridOnSelect(i, e, r) { "GanttGrid" == i.id.substr(0, 9) && ("Data" == e.Kind && (e.itemid || i.SelectRange(e.firstChild, null, e.lastChild, null, !r, 0)), setTimeout("RefreshCommandUI()", 200)) } function GridOnFocus(grid, row, col, orow, ocol, pagepos) { if (curGrid = eval("mygrid" + grid.id.substr(9)), "GanttGrid" == grid.id.substr(0, 9) && "Data" == row.Kind) { "Panel" == col ? grid.SelectRow(row) : row.itemid && (grid.ActionClearSelection(), grid.SelectRow(row)); var gridid = GetGridId(grid), ribbon = eval("mygrid" + gridid + ".RibbonBehavior"); "1" != ribbon && "2" != ribbon && SelectRibbonTab("Ribbon.ListItem", !0) } } function GridOnDblClick(i, e, r, t, d, a) { "GanttGrid" == i.id.substr(0, 9) && EditGridRow(i, e, r) } function GridOnAfterValueChanged(i, e, r, t) { "GanttGrid" == i.id.substr(0, 9) && (i.EditRowChanged = !0) } function ChangePage(pg, gridid) { var grid = Grids["GanttGrid" + gridid]; eval("mygrid" + gridid + ".CurPage='" + pg + "'"), ReloadGridWithNewParams(gridid) } function GridSort(i) { i.ChangeSort("Title") } function GridHideShowSearch(i) { var e = document.getElementById("searchdiv" + i.id.substr(9)); "none" == e.style.display ? e.style.display = "" : e.style.display = "none", SetGridSize(i) } function GridHideShowFilter(i) { var e = i.GetRowById("Filter"); try { e.Visible ? i.HideRow(e) : i.ShowRow(e) } catch (i) { } } function GridGanttDeleteRow(i) { CurrentGrid.RemoveRow(CurrentGrid.GetRowById(i), 1) } function GridClickOutside(i, e, r, t, d, a) { i.EditRow && StopEditGridRow(i, i.GetRowById("Header")) } function GridClick(i, e, r, t, d, a) { i.EditRow && StopEditGridRow(i, e), "Edit" == r && EditGridRow(i, e, "") } function NewItemCallback(i, e) { i && GridNewItem(curGrid._gridid, e) } function GridNewItem(gridid, newid) { var grid = Grids["GanttGrid" + gridid], row = grid.AddRow(null, null, !0, null, null), listid = eval("mygrid" + gridid + "._listid"), webid = eval("mygrid" + gridid + "._webid"); grid.SetValue(row, "siteid", window.epmLive.currentSiteId), grid.SetValue(row, "webid", webid), grid.SetValue(row, "listid", listid), grid.SetValue(row, "itemid", newid), grid.SetAttribute(row, "Title", "HtmlPrefix", "<img src='/_layouts/15/epmlive/images/mywork/loading16.gif'>", 1), grid.SetAttribute(row, "Title", "ButtonText", " ", 1), GetRowData(grid, row), grid.Reload() } function StopEditGridRow(grid, row) { if (row.id != grid.EditRow) { var row = grid.GetRowById(grid.EditRow); if (grid.EditRow = null, grid.EndEdit(!0), grid.EditRowChanged) { grid.SetAttribute(row, "Title", "HtmlPrefix", "<img src='/_layouts/15/epmlive/images/mywork/loading16.gif'>", 1); var Values = "", cols = ""; for (var col in grid.Cols) "1" == grid.GetAttribute(row, col, "CanEdit") && "G" != col && (Values += '<Field Name="' + col + '">' + escape(grid.GetValue(row, col)) + "</Field>"), cols += "," + col; var data = '<Row id="' + row.id + '" siteid="' + row.siteid + '" webid="' + row.webid + '" listid="' + row.listid + '" itemid="' + row.itemid + '" Cols="' + cols + '">' + Values + "</Row>", webUrl = window.epmLiveNavigation.currentWebUrl; $.ajax({ type: "POST", url: (webUrl + "/_vti_bin/WorkEngine.asmx/ExecuteJSON").replace(/\/\//g, "/"), data: "{ Function: 'webparts_SetGridRowEdit', Dataxml: '" + data + "' }", contentType: "application/json; charset=utf-8", dataType: "json", success: function (response) { var oResp = eval("(" + response.d + ")"); "0" == oResp.Result.Status ? grid.AddDataFromServer(oResp.Result.InnerText) : alert(oResp.Result.Error.Text), grid.SetAttribute(row, "Title", "HtmlPrefix", "", 1); for (var col in grid.Cols) grid.SetAttribute(row, col, "CanEdit", "0", 1); grid.AcceptChanges(row) }, error: function (i) { alert("Error: " + i), grid.SetAttribute(row, "Title", "HtmlPrefix", "", 1) } }) } else { grid.EditRow = ""; for (var col in grid.Cols) grid.SetAttribute(row, col, "CanEdit", "0", 1), grid.SetAttribute(row, "Title", "HtmlPrefix", "", 1) } grid.EditRowChanged = !1 } } function GetRowData(grid, row) { if (row.itemid) { var cols = ""; for (var col in grid.Cols) cols += "," + col; grid.SetAttribute(row, "Title", "HtmlPrefix", "<img src='/_layouts/15/epmlive/images/mywork/loading16.gif'>", 1); var data = '<Row id="' + row.id + '" siteid="' + row.siteid + '" webid="' + row.webid + '" listid="' + row.listid + '" itemid="' + row.itemid + '" Cols="' + cols + '"></Row>', webUrl = window.epmLiveNavigation.currentWebUrl; $.ajax({ type: "POST", url: (webUrl + "/_vti_bin/WorkEngine.asmx/ExecuteJSON").replace(/\/\//g, "/"), data: "{ Function: 'webparts_GetGridRow', Dataxml: '" + data + "' }", contentType: "application/json; charset=utf-8", dataType: "json", success: function (response) { var oResp = eval("(" + response.d + ")"); "0" == oResp.Result.Status ? grid.AddDataFromServer(oResp.Result.InnerText) : alert(oResp.Result.Error.Text), grid.SetAttribute(row, "Title", "HtmlPrefix", "", 1); for (var col in grid.Cols) grid.SetAttribute(row, col, "CanEdit", "0", 1); grid.AcceptChanges(row) }, error: function (i) { alert("Error: " + i), grid.SetAttribute(row, "Title", "HtmlPrefix", "", 1) } }) } } function LoadGrid(gridid) { var gUrl = GetWebUrl() + "/_layouts/15/epmlive/getganttitems.aspx?data=" + eval("mygrid" + gridid + ".Params") + eval("mygrid" + gridid + ".Searcher"); epmdebug && (gUrl += "&epmdebug=true"), EPM.UI.Loader.current().startLoading({ id: "WebPart" + eval("mygrid" + gridid + ".Qualifier") }), TreeGrid({ Data: { Url: gUrl }, Export: { Url: GetWebUrl() + "/_layouts/15/epmlive/getgriditemsexport.aspx" }, SuppressMessage: 3, Debug: "" }, "griddiv" + gridid) } function EditGridRow(grid, row, col) { if (row.itemid && grid.EditRow != row.id && "Header" != row.id) { var webUrl = window.epmLiveNavigation.currentWebUrl, cols = ""; for (var c in grid.Cols) cols += "," + c; cols = cols.substr(1); var data = '<Row id="' + row.id + '" siteid="' + row.siteid + '" webid="' + row.webid + '" listid="' + row.listid + '" itemid="' + row.itemid + '" Cols="' + cols + '"/>'; grid.SetAttribute(row, "Title", "HtmlPrefix", "<img src='/_layouts/15/epmlive/images/mywork/loading16.gif'>", 1), $.ajax({ type: "POST", url: (webUrl + "/_vti_bin/WorkEngine.asmx/ExecuteJSON").replace(/\/\//g, "/"), data: "{ Function: 'webparts_GetGridRowEdit', Dataxml: '" + data + "' }", contentType: "application/json; charset=utf-8", dataType: "json", success: function (response) { var oResp = eval("(" + response.d + ")"); "0" == oResp.Result.Status ? (grid.EditRow = row.id, grid.AddDataFromServer(oResp.Result.InnerText), grid.SetAttribute(row, "Title", "HtmlPrefix", '<span class="icon-pencil" style="color: #CCC;padding-right:5px"></span>', 1), grid.StartEdit()) : alert(oResp.Result.Error.Text) }, error: function (i) { alert("Error: " + i) } }) } } function ChangeGroups(gridid, data) { var sGroups = ""; for (var v in data) sGroups += "," + data[v].value; return "" != sGroups && (sGroups = sGroups.substr(1)), eval("mygrid" + gridid + ".Groups='" + sGroups + "'"), ReloadGridWithNewParams(gridid, "FromGroupBy"), !0 } function ViewAllPages(gridid) { if (confirm("Are you sure you want to view all items? If there are a lot of items, this process can take some time.")) { eval("mygrid" + gridid + ".NoPage='true'"); var pagediv = document.getElementById("pagediv" + gridid), viewalldiv = document.getElementById("viewalldiv" + gridid); return pagediv.style.display = "none", viewalldiv.style.display = "none", ReloadGridWithNewParams(gridid), !0 } } function ChangeColumns(gridid, data) { return eval("mygrid" + gridid + ".Cols='" + data.selectedKeys + "'"), ReloadGridWithNewParams(gridid), !0 } function ReloadGridWithNewParams(gridid, Source) { EPM.UI.Loader.current().startLoading({ id: "WebPart" + eval("mygrid" + gridid + ".Qualifier") }); var dataurl = eval("DataUrl" + gridid); Grids["GanttGrid" + gridid].Data.Data.Url = "FromGroupBy" == Source ? dataurl + "&FromGroupBy=1&Page=" + eval("mygrid" + gridid + ".CurPage") + "&Cols=" + eval("mygrid" + gridid + ".Cols") + "&GB=" + eval("mygrid" + gridid + ".Groups") + "&NP=" + eval("mygrid" + gridid + ".NoPage") + eval("mygrid" + gridid + ".Searcher") : dataurl + "&Page=" + eval("mygrid" + gridid + ".CurPage") + "&Cols=" + eval("mygrid" + gridid + ".Cols") + "&GB=" + eval("mygrid" + gridid + ".Groups") + "&NP=" + eval("mygrid" + gridid + ".NoPage") + eval("mygrid" + gridid + ".Searcher"), Grids["GanttGrid" + gridid].Data.Export.Url = GetWebUrl() + "/_layouts/15/epmlive/getgriditemsexport.aspx", Grids["GanttGrid" + gridid].Reload() } function GanttZoomIn(i) { Grids["GanttGrid" + i].ActionZoomIn() } function GanttZoomOut(i) { Grids["GanttGrid" + i].ActionZoomOut() } function GanttScrollTo(gridid) { var grid = Grids["GanttGrid" + gridid], row = grid.FRow; if (null != row) { var GanttStartField = eval("mygrid" + gridid + ".GanttStart"), sDate = grid.GetValue(row, GanttStartField); if ("" != sDate) { var date = new Date(sDate); grid.ScrollToDate(date, "left") } } } function GridOnMouseOutRow(i, e, r, t) { i.SetAttribute(e, "Title", "ButtonText", " ", 1) } function getHTML(i, e, r, t) { if ("Data" == e.Kind && "Title" != r) try { if (0 == i.GetValue(e, r).indexOf("<img")) { var d = i.GetValue(e, r); t = d.split("/")[d.split("/").length - 1].split('"')[0] } return t } catch (i) { } } Array.prototype.indexOf || (Array.prototype.indexOf = function (i) { for (var e = 0; e < this.length; e++) if (this[e] === i) return e; return -1 }), $(window).resize(function () { for (var i in Grids) "GanttGrid" == i.substr(0, 9) && SetGridSize(Grids[i]) }), Grids.OnGetExportValue = function (i, e, r, t) { var d = getHTML(i, e, r, i.GetValue(e, r)); if (d) return t + d };