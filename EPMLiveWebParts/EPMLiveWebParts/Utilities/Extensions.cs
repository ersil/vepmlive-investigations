using System;
using System.Text.RegularExpressions;

namespace EPMLiveWebParts.Utilities
{
    public static class Extensions
    {
        /// <summary>
        ///     'Helps' protect against XSS (Cross Site Scripting attacks) by stripping out known evil HTML elements
        ///     such as script and style. Used for outputing text generated by a Rich Text Editor. Doesn't HTML encode!
        /// </summary>
        /// <param name="input">Input string to strip bad HTML elements from</param>
        /// <returns></returns>
        public static string XSSProtect(this string input)
        {
            string returnVal = input ?? string.Empty;

            returnVal = Regex.Replace(returnVal, @"\<script(.*?)\>(.*?)\<\/script(.*?)\>", "",
                                      RegexOptions.Singleline | RegexOptions.IgnoreCase);
            returnVal = Regex.Replace(returnVal, @"\<style(.*?)\>(.*?)\<\/style(.*?)\>", "",
                                      RegexOptions.Singleline | RegexOptions.IgnoreCase);

            while (Regex.IsMatch(returnVal, @"(<[\s\S]*?) on.*?\=(['""])[\s\S]*?\2([\s\S]*?>)",
                                 RegexOptions.Compiled | RegexOptions.IgnoreCase))
            {
                returnVal = Regex.Replace(returnVal, @"(<[\s\S]*?) on.*?\=(['""])[\s\S]*?\2([\s\S]*?>)",
                                          match => String.Concat(match.Groups[1].Value, match.Groups[3].Value),
                                          RegexOptions.Compiled | RegexOptions.IgnoreCase);
            }

            return returnVal;
        }

        //TODO: Put these string methods into Core since they are universal.
        public static string Left(this string param, int length)
        {
            var result = param.Substring(0, length);
            return result;
        }
        public static string Right(this string param, int length)
        {
            var result = param.Substring(param.Length - length, length);
            return result;
        }

        public static string Mid(this string param, int startIndex, int length)
        {
            var result = param.Substring(startIndex, length);
            return result;
        }

        public static string Mid(this string param, int startIndex)
        {
            var result = param.Substring(startIndex);
            return result;
        }
    }
}