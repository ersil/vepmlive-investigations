using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text.RegularExpressions;
using System.Web.Script.Serialization;
using EPMLiveCore;
using Microsoft.SharePoint;

namespace EPMLiveWebParts.Utilities
{
    public static class Extensions
    {
        /// <summary>
        ///     'Helps' protect against XSS (Cross Site Scripting attacks) by stripping out known evil HTML elements
        ///     such as script and style. Used for outputing text generated by a Rich Text Editor. Doesn't HTML encode!
        /// </summary>
        /// <param name="input">Input string to strip bad HTML elements from</param>
        /// <returns></returns>
        public static string XSSProtect(this string input)
        {
            string returnVal = input ?? string.Empty;

            returnVal = Regex.Replace(returnVal, @"\<script(.*?)\>(.*?)\<\/script(.*?)\>", "",
                                      RegexOptions.Singleline | RegexOptions.IgnoreCase);
            returnVal = Regex.Replace(returnVal, @"\<style(.*?)\>(.*?)\<\/style(.*?)\>", "",
                                      RegexOptions.Singleline | RegexOptions.IgnoreCase);

            while (Regex.IsMatch(returnVal, @"(<[\s\S]*?) on.*?\=(['""])[\s\S]*?\2([\s\S]*?>)",
                                 RegexOptions.Compiled | RegexOptions.IgnoreCase))
            {
                returnVal = Regex.Replace(returnVal, @"(<[\s\S]*?) on.*?\=(['""])[\s\S]*?\2([\s\S]*?>)",
                                          match => String.Concat(match.Groups[1].Value, match.Groups[3].Value),
                                          RegexOptions.Compiled | RegexOptions.IgnoreCase);
            }

            return returnVal;
        }

        public static string GetCurrentUserTimeZone(SPWeb web, SPContext context, Dictionary<string, string> replaceDisplayName)
        {
            var currentUserTimeZone = "null";

            try
            {
                var spTimeZone = (web.CurrentUser.RegionalSettings ?? context.RegionalSettings).TimeZone;
                var spTzName = spTimeZone.Description.Replace(" and ", " & ");

                var timeZone = (from tempTimeZone in TimeZoneInfo.GetSystemTimeZones()
                    let tzName = ReplaceStringsFromDictionary(tempTimeZone.DisplayName, replaceDisplayName)
                    where tzName.Equals(spTzName)
                    select tempTimeZone).First();

                var timeZoneInfo = new
                {
                    id = timeZone.Id,
                    displayName = timeZone.DisplayName,
                    olsonName = timeZone.OlsonName(),
                    standardName = timeZone.StandardName,
                    daylightName = timeZone.DaylightName,
                    baseUtcOffset = timeZone.BaseUtcOffset,
                    supportsDaylightSavingTime = timeZone.SupportsDaylightSavingTime
                };

                currentUserTimeZone = new JavaScriptSerializer().Serialize(timeZoneInfo);
            }
            catch (Exception ex)
            {
                Trace.TraceError("Exception Suppressed {0}", ex);
            }

            return currentUserTimeZone;
        }

        private static string ReplaceStringsFromDictionary(string replaceableString, Dictionary<string, string> replaceDictionary)
        {
            if (replaceableString == null)
            {
                return replaceableString;
            }

            foreach (var replace in replaceDictionary)
            {
                replaceableString = replaceableString.Replace(replace.Key, replace.Value);
            }

            return replaceableString;
        }
    }
}