function registerEpmLiveResourceGridScript() { !function (e, o, t, r, i) { function n() { var e = document.getElementById("EPMResourceGrid"), o = function () { var e; self.innerHeight ? e = self.innerHeight : document.documentElement && document.documentElement.clientHeight ? e = document.documentElement.clientHeight : document.body && (e = document.body.clientHeight); return e }(), t = function (e) { var o = e.offsetTop; for (; e.offsetParent && (o += e.offsetParent.offsetTop, e != document.getElementsByTagName("body")[0]) ;) e = e.offsetParent; return o }(e); e.style.height = o - t - 35 + "px" } e.id = r.observable(null), e.autoFocus = !0, e.maxVScroll = null, e.webpartQualifier = null, e.pfeInstalled = !1, e.firstLoad = !0, e.epmrgv = null, e.resourceDictionary = null, e.resources = null, e.myResources = null, e.exportInProgress = !1, e.importInProgress = !1, e.webpartHeight = !1, e.userIsSiteAdmin = !1, e.allSelected = !1, e.ribbonBehavior = 0, e.IsRootWeb = !1, e.WebId = null, e.ListId = null, e.ResListId = null, e.ItemId = null, e.LaunchInForm = !1, e.UserHaveResourceCenterPermission = !0, e.reports = { wcReportId: null, opened: !1, collection: {}, getXmlForRibbon: function () { var o = new window.Sys.StringBuilder, t = !1; o.append("<Menu Id='Ribbon.ResourceGrid.Views.Dropdown.Menu'>"), o.append("<MenuSection DisplayMode='Menu' Id='Ribbon.ResourceGrid.Reporting.ReportsDropDown.Menu' Title='Reports'>"), o.append("<Controls Id='Ribbon.ResourceGrid.Reporting.ReportsDropDown.Menu.Controls'>"); var r = e.reports.collection; for (var i in r) if (r.hasOwnProperty(i) && "workvscapacity" !== i) { t = !0; var n = r[i]; o.append("<Button Id='Ribbon.ResourceGrid.Reports.{0}' Command='ResourceGrid.Cmd.ReportsDropDown.Select' LabelText=\"{1}\" CommandValueId='{0}'/>".format(i, n.name)) } return t || o.append("<Button Id='Ribbon.ResourceGrid.Reports.{0}' Command='ResourceGrid.Cmd.ReportsDropDown.Select' LabelText='{1}' CommandValueId='{0}'/>".format("Loading", "Loading...")), o.append("</Controls>"), o.append("</MenuSection>"), o.append("</Menu>"), o.toString() }, open: function (t) { if (t && "0" !== t && 0 !== t && "Loading" !== t) { e.reports.opened = !0; for (var r = e.grid.grids[e.id()].GetSelRows(), i = "", n = 0; n < r.length; n++) { var s = r[n]; "Data" === s.Kind && "R" === s.Def.Name && (i += "&rp:Resources=" + s.ResourceID) } e.reports.opened = !0, "Resource Work vs. Capacity" == t ? window.open(e.reports.collection[o.md5(t)].url + i) : window.open(e.reports.collection[t].url + i), window.setTimeout(function () { e.reports.opened = !1 }, 2e3) } }, load: function () { t.ajax({ type: "POST", url: o.currentWebUrl + "/_vti_bin/WorkEngine.asmx/Execute", data: "{ Function: 'Reporting_GetReportsByFolder', Dataxml: '<Reports><Folder>Report Library/epmlivetl/Resources</Folder></Reports>' }", contentType: "application/json; charset=utf-8", dataType: "json", success: function (t) { if (t.d) { var r = o.parseJson(t.d).Result; if (o.responseIsSuccess(r)) try { r.GetReportsByFolder.Data.Folder && r.GetReportsByFolder.Data.Folder.Folder && function (t) { for (var r = 0; r < t.length; r++) { var i = t[r]; if (i.Report.length > 0) for (var n = 0; n < i.Report.length; n++) { var s = (a = i.Report[n])["@Name"]; e.reports.collection[o.md5(s)] = { name: s, url: a["@Url"], hasResourcesParam: "True" === a["@HasResourcesParam"] } } else if (i.Report) { var a; s = (a = i.Report)["@Name"], e.reports.collection[o.md5(s)] = { name: s, url: a["@Url"], hasResourcesParam: "True" === a["@HasResourcesParam"] } } } }(r.GetReportsByFolder.Data.Folder.Folder) } catch (o) { e.actions.areReportsLoaded = !0 } else o.logFailure(r) } else o.log("response.d: " + t.d); e.actions.areReportsLoaded = !0 }, error: function (t) { o.log(t), e.actions.areReportsLoaded = !0 } }) } }, e.grid = { grids: window.Grids, filteringOn: !0, groupingOn: !0, showColumnSelector: function () { this.g().ActionShowColumns("Selectable") }, hideRow: function (e) { var o = this.g(); o.HideRow(o.GetRowById(e)) }, showRow: function (e) { var o = this.g(); o.ShowRow(o.GetRowById(e)) }, hideFilters: function () { this.hideRow("Filter"), this.filteringOn = !1 }, showFilters: function () { this.showRow("Filter"), this.filteringOn = !0 }, hideGrouping: function () { var e = null, o = this.g().Rows; for (var t in o) if (o.hasOwnProperty(t)) { var r = o[t]; if ("Group" === r.Kind) { e = r.id; break } } e && (this.hideRow(e), this.groupingOn = !1) }, showGrouping: function () { var e = null, o = this.g().Rows; for (var t in o) if (o.hasOwnProperty(t)) { var r = o[t]; if ("Group" === r.Kind) { e = r.id; break } } e && (this.showRow(e), this.groupingOn = !0) }, toggleFiltering: function () { return this.filteringOn ? this.hideFilters() : this.showFilters(), this.filteringOn }, toggleGrouping: function () { return this.groupingOn ? this.hideGrouping() : this.showGrouping(), this.groupingOn }, removeSorting: function () { this.g().ChangeSort("Title") }, resetNoDataRow: function () { var o = t("#" + e.id())[0]; if (o) { var r = o.firstChild; if (!this.g().GetFirstVisible()) o.removeChild(r), o.insertRow(0).insertCell(0).innerHTML = "No resource found." } }, reload: function () { var o = window.location.href.replace(new RegExp("&epmrgv=" + e.epmrgv, "gi"), "").replace(new RegExp("epmrgv=" + e.epmrgv, "gi"), ""); o = (o + (-1 !== o.indexOf("?") ? "&" : "?") + "epmrgv=" + e.views.currentView.id).replace(new RegExp("&&", "g"), "&"), window.location = o }, rowsSelected: function () { try { return e.grid.grids[e.id()].GetSelRows().length } catch (e) { return 0 } }, resourceUpdated: function (r, i, n) { if (1 === r) { var s = e.grid.grids[e.id()], a = n.row || { id: 0 }, l = n.changeType; if ("Deleted" === l) return s.AddDataFromServer("<Grid><Changes><I id='" + a.id + "' Deleted='1'/></Changes></Grid>"), void e.actions.reIndexResources(); var c = a.id; if ("Added" === l) { c = ""; for (var d in s.Rows) s.Rows.hasOwnProperty(d) && (c += s.Rows[d].id + ","); c = c.slice(0, -1) } t.ajax({ type: "POST", url: o.currentWebUrl + "/_vti_bin/WorkEngine.asmx/Execute", data: "{ Function: 'GetResourcePoolDataGridChanges', Dataxml: '<ResourcePoolDataGridChanges><Params><ChangeType>" + l + "</ChangeType><Rows>" + c + "</Rows></Params></ResourcePoolDataGridChanges>' }", contentType: "application/json; charset=utf-8", dataType: "json", success: function (t) { if (t.d) { var r = o.parseJson(t.d); try { s.AddDataFromServer(r.ResourcePoolDataGridChanges.Data["#cdata"]), s.RenderBody(), s.Render(), s.Update(), e.grid.fixIE(), "Added" === l && e.actions.reIndexResources() } catch (e) { o.log(error) } } else o.log("response.d: " + t.d) }, error: function (e) { o.log(e) } }) } }, contextMenuResourceChanged: function (o) { var t = e.grid.grids[e.id()]; if (o) { var r = t.GetSelRows()[0]; r || (r = t.GetRowById(o)), e.grid.resourceUpdated(1, null, { row: r, changeType: "Changed" }) } }, viewFormResourceChanged: function (o, t, r) { e.grid.resourceUpdated(1, null, { row: r.row, changeType: r.changeType }) }, contextMenuResourceDelete: function (o) { var t = e.grid.grids[e.id()]; if (o) { var r = t.GetSelRows()[0]; r || (r = t.GetRowById(o)), e.grid.resourceUpdated(1, null, { row: r, changeType: "Deleted" }) } }, fixIE: function () { try { if (t.browser.msie) for (var o = 0; o <= 50; o++) window.setTimeout(function () { var o; (o = e.grid.g()).Update(), o.SetScrollTop(o.GetScrollTop() + 2), o.SetScrollTop(o.GetScrollTop() - 2), o.Update() }, 100 * o) } catch (e) { } }, teamUpdated: function (o, t, r) { e.IsRootWeb && "" == e.ListId && "" == e.ItemId ? e.grid.resourceUpdated(o, t, r) : e.grid.reload() } }, e.grid.g = r.dependentObservable(function () { return this.grids[e.id()] }, e.grid), e.views = { collection: {}, totalViews: 0, currentView: null, previousView: null, userHasGlobalViewModificationPermission: !1, build: function (o) { var t = e.grid.g(); o.cols = [], o.filters = []; for (var r = t.Cols, i = t.GetCols("Visible"), n = 0, s = 0; s < i.length; s++) n += t.Cols[i[s]].Width; for (var a = 0; a < i.length; a++) { var l = i[a], c = t.Cols[l], d = c.Width, u = !!c.FixedWidth && 1 === c.FixedWidth; u || (d = Math.round(100 * d / n * 1e3) / 1e3), "Panel" === l && (d = 14, u = !0), o.cols.push({ name: l, width: d, isfixedwidth: u, section: c.Sec }) } o.filteringon = e.grid.filteringOn; var p = t.GetRowById("Filter"); for (var f in r) if (r.hasOwnProperty(f)) { var w = p[f + "Filter"]; w && 0 !== w && o.filters.push({ column: f, value: p[f], cell: w }) } return o.groupingon = e.grid.groupingOn, o.grouping = t.Group, o.sorting = t.Sort, o }, getXml: function (e) { for (var o = '<View Id="{0}" Name="{1}" IsDefault="{2}" IsPersonal="{3}"><Cols>'.format(e.id, escape(e.name), e.isdefault, e.ispersonal), t = 0; t < e.cols.length; t++) { var r = e.cols[t]; o += '<Col Name="{0}" Width="{1}" IsFixedWidth="{2}" Section="{3}"/>'.format(r.name, r.width, r.isfixedwidth, r.section) } if (o += '</Cols><Filters RowVisible="{0}">'.format(e.filteringon || !1), e.filters) for (var i = 0; i < e.filters.length; i++) { var n = e.filters[i]; o += '<Filter Column="{0}" Value="{1}" Cell="{2}"/>'.format(n.column, n.value, n.cell) } return o += '</Filters><Grouping RowVisible="{0}">{1}</Grouping><Sorting>{2}</Sorting></View>'.format(e.groupingon || !1, e.grouping || "", e.sorting || "") }, save: function (r) { e.grid.g().StaticCursor = 1, r.id = "Default View" !== r.name ? o.md5(r.name) : "dv", this.collection[r.id] && !confirm('Would you like to overwrite the "' + r.name + '" view?') || (r = this.build(r), t.ajax({ type: "POST", url: o.currentWebUrl + "/_vti_bin/WorkEngine.asmx/Execute", data: "{ Function: 'SaveResourcePoolViews', Dataxml: '<ResourceGridViews>" + this.getXml(r) + "</ResourceGridViews>' }", contentType: "application/json; charset=utf-8", dataType: "json", success: function (t) { if (t.d) { var i = o.parseJson(t.d); if (o.responseIsSuccess(i.Result)) { var n = window.SP.UI.Notify.addNotification('The view "{0}" has been saved.'.format(r.name), !1); e.views.collection[r.id] = r, e.views.apply(r.id), setTimeout(function () { SP.UI.Notify.removeNotification(n) }, 1e3) } else o.logFailure(i.Result) } else o.log("response.d: " + t.d) }, error: function (e) { o.log(e) } })) }, showSaveDialog: function () { var o = e.grid.g(), r = document.createElement("div"); r.innerHTML = t("#RWPSaveView-{0}".format(e.id())).html(), t(t(r).find("#RWPSaveView-Name-{0}".format(e.id()))).val(this.currentView.name), this.currentView.isdefault && t(t(r).find("#RWPSaveView-Default-{0}".format(e.id()))).attr("checked", "checked"); var i = t(r).find("#RWPSaveView-Personal-{0}".format(e.id())); t(i).is(":disabled") || this.currentView.ispersonal && t(i).attr("checked", "checked"); var n = t.browser.msie, s = n ? 140 : 135, a = n ? 230 : 225, l = window.SP.UI.$create_DialogOptions(); l.title = "Save View", l.html = r, l.height = s, l.width = a, l.allowMaximize = !1, l.showClose = !1, o.StaticCursor = 0, o.ActionBlur(), window.SP.UI.ModalDialog.showModalDialog(l) }, apply: function (r) { var i = null, n = o.getUrlParamByName("epmrgv"); if (n && e.firstLoad && this.collection[n] && (r = n, e.epmrgv = n), r) i = this.collection[r]; else { var s = "dv", a = null; for (var l in this.collection) { var c = this.collection[l]; c.ispersonal && c.isdefault ? a = c.id : c.isdefault && (s = c.id), i = this.collection[a || s] } } if (!this.currentView || this.currentView.id !== i.id) { var d = e.grid.g(), u = e.actions.myResourcesOn; d.getColWidth || (d.getColWidth = function (e) { if (e && this.Cols[e]) { var t = this.Cols[e].Width; return o.utils.isInt(t) || -1 !== t.indexOf("-") && (t = t.split("-")[0]), t - 0 } return 0 }); for (var p = [], f = [], w = 0; w < i.cols.length; w++) { var m = i.cols[w], g = m.name, h = d.Cols[g], v = 0, R = d.getColWidth(g); m.isfixedwidth ? ("Panel" === g && (m.width = 14), v = m.width - R) : (v = -R, h && (h.RelWidth = m.width)), 0 !== v && (h && (h.Width += v), d.Update()), d.MoveCol(g, 0, 1, 0), p.push(g) } d.Update(), d.Render(), d.Update(); var b = d.Group.split(","); d.DoGrouping(null); for (var y = 0; y < b.length; y++) { var T = b[y]; T && d.HideCol(T) } var S = d.GetCols("Visible"); S = S.concat(b); for (var C = 0; C < S.length; C++) { for (var I = !1, P = S[C], x = 0; x < p.length; x++) if (p[x] === P) { I = !0; break } !I && P && f.push(P) } d.ChangeColsVisibility(p, f, 0); for (var G = [], D = [], U = 0; U < p; U++) G.push(null), D.push(0); d.ChangeFilter(p, G, D, 0, 0, null); var E = i.filters; if (E) { for (var V = [], M = [], L = [], F = 0; F < E.length; F++) { var O = E[F]; V.push(O.column), M.push(O.value), L.push(O.cell) } d.ChangeFilter(V, M, L, 0, 0, null) } else d.ChangeFilter("", "", "", 0, 0, null); i.filterrowvisible ? e.grid.showFilters() : e.grid.hideFilters(), d.ChangeSort(i.sorting), e.grid.hideGrouping(), d.DoGrouping(i.grouping || null), d.Render(), d.Update(), e.actions.myResourcesOn = !1, u && e.actions.toggleMyResources(), this.currentView = i, window.RefreshCommandUI(), e.actions.createToolBar("test"), e.firstLoad && (e.actions.resetEasyScroll(), window.setTimeout(function () { e.firstLoad = !1 }, 2e3)), window.setTimeout(function () { var o = e.grid.g(); t(".EPMLiveResourceGridGroup").click(function (e) { try { if (-1 === t(e.currentTarget).attr("class").indexOf("Panel")) { var r = t(this).parent(); if (r && (r = r[0])) { var i = r.attributes; for (var n in i) if (i.hasOwnProperty(n)) { var s = i[n]; "onmousemove" === s.name && (1 === (r = o.Rows[s.value.split('"')[1]]).Expanded ? o.Collapse(r) : o.Expand(r), e.stopPropagation()) } } } } catch (e) { } }), e.grid.fixIE() }, 10) } }, load: function () { t.ajax({ type: "POST", url: o.currentWebUrl + "/_vti_bin/WorkEngine.asmx/Execute", data: "{ Function: 'GetResourcePoolViews', Dataxml: '<Views/>' }", contentType: "application/json; charset=utf-8", dataType: "json", success: function (t) { if (t.d) { var r = o.parseJson(t.d).Result; o.responseIsSuccess(r) ? (e.views.totalViews = 0, function (o) { function t(e) { if (e) { var o = e.toLowerCase(); if ("true" === o) e = !0; else if ("false" === o) e = !1; else { var t = parseInt(e); isNaN(t) || (e = t) } } return e } o.length || (o = [o]); for (var r = 0; r < o.length; r++) { var i = {}, n = o[r]; for (var s in n) if (n.hasOwnProperty(s)) { var a = s.replace(/@/, "").toLowerCase(), l = n[s]; if ("name" === a.toLowerCase() && (l = unescape(l)), "cols" === a) { (l = l.Col).length || (l = [l]); for (var c = [], d = 0; d < l.length; d++) { var u = l[d], p = {}; for (var f in u) u.hasOwnProperty(f) && (p[f.replace(/@/, "").toLowerCase()] = t(u[f])); c.push(p) } i[a] = c } else if ("filters" === a) { for (var w in l) if (l.hasOwnProperty(w)) { var m = w.replace(/@/, "").toLowerCase(); if ("filter" === m) { (l = l.Filter).length || (l = [l]); for (var g = [], h = 0; h < l.length; h++) { var v = l[h], R = {}; for (var b in v) if (v.hasOwnProperty(b)) { var y = b.replace(/@/, "").toLowerCase(); R[y] = "value" === y ? v[b] : t(v[b]) } g.push(R) } i[a] = g } else i["filter" + m] = t(l[w]) } } else if ("grouping" === a) { for (var T in l) if (l.hasOwnProperty(T)) { var S = T.replace(/@/, "").toLowerCase(), C = t(l[T]); "#text" === S ? i[a] = C : i["grouping" + S] = C } } else i[a] = "id" !== a ? t(l) : l } e.views.collection[i.id] = i, e.views.totalViews++ } }(r.ResourcePoolViews.Views.View), e.views.apply()) : o.logFailure(r) } else o.log("response.d: " + t.d); e.actions.isViewApplied = !0 }, error: function (t) { o.log(t), e.actions.isViewApplied = !0 } }) }, getXmlForRibbon: function () { var e = this.collection, o = this.currentView, t = this.totalViews, r = new window.Sys.StringBuilder; function i(o) { r.append("<MenuSection DisplayMode='Menu' Id='Ribbon.ResourceGrid.Views.Dropdown.Menu.{0}' Title='{0} Views'>".format(o)), r.append("<Controls Id='Ribbon.ResourceGrid.Views.Dropdown.Menu.{0}.Controls'>".format(o)); var i = "Personal" === o; for (var n in e) if (e.hasOwnProperty(n)) { var s = e[n]; if (s.name && s.ispersonal === i) { if ("dv" === s.id && t > 1) continue; r.append("<Button Id='Ribbon.ResourceGrid.views.{0}' Command='ResourceGrid.Cmd.CurrentViewDropDown.Select' LabelText=\"{1}\" CommandValueId='{0}'/>".format(s.id, s.name)) } } r.append("</Controls>"), r.append("</MenuSection>") } return r.append("<Menu Id='Ribbon.ResourceGrid.Views.Dropdown.Menu'>"), r.append("<MenuSection DisplayMode='Menu' Id='Ribbon.ResourceGrid.Views.Dropdown.Menu.Default' Title='Current View'>"), r.append("<Controls Id='Ribbon.ResourceGrid.Views.Dropdown.Menu.Default.Controls'>"), r.append("<Button Id='Ribbon.ResourceGrid.views.{0}' Command='ResourceGrid.Cmd.CurrentViewDropDown.Select' LabelText=\"{1}\" CommandValueId='{0}'/>".format(o.id, o.name)), r.append("</Controls>"), r.append("</MenuSection>"), i("Global"), i("Personal"), r.append("</Menu>"), r.toString() }, remove: function () { var r = this.currentView; this.userHasGlobalViewModificationPermission || r.ispersonal ? "dv" !== r.id ? confirm('Are you sure you want to delete the "' + r.name + '" view?') && t.ajax({ type: "POST", url: o.currentWebUrl + "/_vti_bin/WorkEngine.asmx/Execute", data: "{ Function: 'DeleteResourcePoolViews', Dataxml: '<ResourceGridViews>" + this.getXml(r) + "</ResourceGridViews>' }", contentType: "application/json; charset=utf-8", dataType: "json", success: function (t) { if (t.d) { var i = o.parseJson(t.d); if (o.responseIsSuccess(i.Result)) { var n = window.SP.UI.Notify.addNotification('The view "{0}" has been deleted.'.format(r.name), !1); delete e.views.collection[r.id], e.views.totalViews--, e.views.apply(), setTimeout(function () { SP.UI.Notify.removeNotification(n) }, 1e3) } else o.logFailure(i.Result) } else o.log("response.d: " + t.d) }, error: function (e) { o.log(e) } }) : alert("You cannot delete the Default View") : alert("You are not allowed to delete a global view") }, rename: function (r) { if (r) { var i = this.currentView, n = i.name; i.name = r, this.userHasGlobalViewModificationPermission || i.ispersonal ? "dv" !== i.id ? confirm('Are you sure you want to rename the "' + n + '" view?') && t.ajax({ type: "POST", url: o.currentWebUrl + "/_vti_bin/WorkEngine.asmx/Execute", data: "{ Function: 'UpdateResourcePoolViews', Dataxml: '<ResourceGridViews>" + this.getXml(i) + "</ResourceGridViews>' }", contentType: "application/json; charset=utf-8", dataType: "json", success: function (t) { if (t.d) { var r = o.parseJson(t.d); if (o.responseIsSuccess(r.Result)) { var s = window.SP.UI.Notify.addNotification('The view "{0}" has been renamed to "{1}".'.format(n, i.name), !1); e.views.currentView.name = i.name, e.views.collection[i.id].name = i.name, window.RefreshCommandUI(), setTimeout(function () { SP.UI.Notify.removeNotification(s) }, 1e3) } else o.logFailure(r.Result) } else o.log("response.d: " + t.d) }, error: function (e) { o.log(e) } }) : alert("You cannot rename the Default View") : alert("You are not allowed to rename a global view") } }, showRenameDialog: function () { var o = e.grid.g(), r = document.createElement("div"); r.innerHTML = t("#RWPRenameView-{0}".format(e.id())).html(), t(t(r).find("#RWPRenameView-CurrentName-{0}".format(e.id()))).html(this.currentView.name); var i = t.browser.msie, n = i ? 135 : 140, s = i ? 235 : 240, a = window.SP.UI.$create_DialogOptions(); a.title = "Rename View", a.html = r, a.height = n, a.width = s, a.allowMaximize = !1, a.showClose = !1, o.StaticCursor = 0, o.ActionBlur(), window.SP.UI.ModalDialog.showModalDialog(a) } }, e.actions = { easyScrollOn: !1, myResourcesOn: !1, loadRibbon: function () { SP.SOD.executeOrDelayUntilScriptLoaded(function () { var o = SP.Ribbon.PageManager.get_instance(), r = null; try { r = o.get_ribbon() } catch (e) { } r || "function" == typeof window._ribbonStartInit && (!function (o) { window._ribbonStartInit(o, !0, null), t("#s4-ribbonrow").height(35); var r = window.setInterval(function () { document.getElementById("Ribbon.ResourceGridTab") || 0 == e.ribbonBehavior && (window.SelectRibbonTab(o, !0), n()) }, 1); window.setTimeout(function () { window.clearInterval(r); try { var o = function () { var e = [t(document.getElementById("Ribbon.ResourceGridTab-title")), t(document.getElementById("Ribbon.ResourceGridViewTab-title"))]; for (var r in e) if (e.hasOwnProperty(r)) { var i = e[r]; i.attr("style", "border-top: 1px solid #E1E1E1 !important; height: 33px !important; margin-top: -4px !important"), i.find("a").attr("style", "padding-top: 4px !important;"), "false" === i.attr("aria-selected") && i.attr("style", "height: 33px !important; margin-top: -3px !important"), i.click(function () { window.setTimeout(function () { o() }, 100) }) } }; o(), window.epmLiveMasterPageVersion >= 5.5 && (epmLiveResourceGrid.loaderStopped || (t(document.getElementById("s4-ribbonrow")).height(35), window.EPM.UI.Loader.current().stopLoading("WebPart" + e.webpartQualifier), epmLiveResourceGrid.loaderStopped = !0)), n(), e.grid.fixIE(), n() } catch (e) { } }, 750) }("Ribbon.ResourceGridTab"), t("#EPMResourceGrid").focus()) }, "sp.ribbon.js") }, dataTicketRequest: function () { var r = e.grid.g(), i = r.GetSelRows(); if (e.allSelected) { i = []; var n = r.Rows; for (var s in n) n.hasOwnProperty(s) && i.push(n[s]) } for (var a = [], l = 0; l < i.length; l++) { var c = i[l]; "R" === c.Def.Name && a.push(c.EXTID) } return a.length > 0 ? t.ajax({ type: "POST", url: o.currentWebUrl + "/_vti_bin/PortfolioEngine.asmx/Execute", data: "{ Function: 'GenerateDataTicket', Dataxml: '<GenerateDataTicket><Ticket>" + a.join(",") + "</Ticket></GenerateDataTicket>' }", contentType: "application/json; charset=utf-8", dataType: "json" }) : null }, retriveDataTicket: function (e) { if (e.d) { var t = o.parseJson(e.d), r = t.GenerateDataTicket; if (o.responseIsSuccess(r.Result)) return r.Data.Ticket["@Id"]; o.logFailure(t.Result) } else o.log("response.d: " + e.d); return null }, displayPopUp: function (e, o, t, r, i, n, s, a) { var l; if (t || (t = !0), i || (i = function () { }), l = s && a ? { title: o, allowMaximize: t, showMaximized: !0, showClose: r, url: e, dialogReturnValueCallback: Function.createCallback(Function.createDelegate(null, i), n), width: s, height: a } : { title: o, allowMaximize: t, showClose: r, url: e, dialogReturnValueCallback: Function.createCallback(Function.createDelegate(null, i), n) }, "Assignment Planner" === o) { var c = document.createElement("iframe"); c.setAttribute("src", e), c.setAttribute("width", "99%"), c.setAttribute("height", "98%"), l.url = null, l.html = c } window.SP.UI.ModalDialog.showModalDialog(l) }, RefreshItems: function () { toastr.options = { closeButton: !1, debug: !1, positionClass: "toast-top-right", onclick: null, showDuration: "3000", hideDuration: "1000", timeOut: "5000", extendedTimeOut: "1000", showEasing: "swing", hideEasing: "linear", showMethod: "fadeIn", hideMethod: "fadeOut" }, window.RefreshCommandUI(), t.ajax({ type: "POST", url: o.currentWebUrl + "/_vti_bin/WorkEngine.asmx/Execute", data: "{ Function: 'RefreshResources', Dataxml: '<RefreshResources/>' }", contentType: "application/json; charset=utf-8", dataType: "json", success: function (e) { if (e.d) { var t = o.parseJson(e.d).Result; if (o.responseIsSuccess(t)) "0" === t.RefreshResources["@Success"] ? window.parent.toastr.success("Refresh job started successfully. Status can be viewed on the Work Queue page within Settings.") : window.parent.toastr.error("Unable to start Refresh Job. There was some error."); else window.parent.toastr.error("Unable to start Refresh Job. There was some error.") } else window.parent.toastr.error("Unable to start Refresh Job. There was no response from the server."); window.RefreshCommandUI() }, error: function (e) { window.parent.toastr.error("Unable to start Refresh Job. The response was: (" + e.status + ") " + e.statusText), window.RefreshCommandUI() } }) }, analyzeResources: function () { if (window.epmLiveNavigation.isImportResourceRunning()) alert("The Resource Analyzer cannot be opened because there is an active resource import job running."); else { var t = e.actions.dataTicketRequest(); t && t.success(function (t) { var r = e.actions.retriveDataTicket(t); if (r) { var i = "{0}/_layouts/ppm/rpanalyzer.aspx?dataid={1}".format(o.currentWebUrl, r); e.actions.displayPopUp(i, "Resource Analyzer", !0, !0, null, null, 700, 700) } }) } }, redirect: function (t) { var r = e.grid.grids[e.id()].GetSelRows(), i = r[0], n = null; if (e.grid.rowsSelected() > 0 && (n = "viewprofile" === t ? i.ResourceID : i.ID), "sendnotification" !== t) { var s = "{0}/_layouts/epmlive/redirectionproxy.aspx?listname=Resources&webid={1}".format(o.currentWebUrl, o.currentWebId); switch (t) { case "add": e.actions.displayPopUp("{0}&action=new".format(s), null, !0, !0, e.grid.resourceUpdated, { row: null, changeType: "Added" }); break; case "edit": e.actions.displayPopUp("{0}&action=edit&id={1}".format(s, n), null, !0, !0, e.grid.resourceUpdated, { row: i, changeType: "Changed" }); break; case "showcomments": e.actions.displayPopUp("{0}&action={1}&id={2}".format(s, t, n), null, !0, !0, null, null, 700, 700); break; case "view": e.actions.displayPopUp("{0}&action={1}&id={2}".format(s, t, n), null, !0, !0, e.grid.viewFormResourceChanged, { row: i, changeType: "Changed" }); break; default: e.actions.displayPopUp("{0}&action={1}&id={2}".format(s, t, n)) } } else { for (var a = [], l = !1, c = 0; c < r.length; c++) { var d = r[c]; if ("Data" === d.Kind && "R" === d.Def.Name) { var u = d.Email; if (a.toString().length + u.length > 1950) { l = !0; break } u && a.push(u) } } l ? 1 == confirm("You can send " + a.length + " out of " + r.length + " notifications, do you want to continue?") && (window.location.href = "mailto:{0}".format(a.join(";"))) : window.location.href = "mailto:{0}".format(a.join(";")) } }, loadResourcePlanner: function () { if (window.epmLiveNavigation.isImportResourceRunning()) alert("The Resource Planner cannot be opened because there is an active resource import job running."); else { var t = e.actions.dataTicketRequest(); t && t.success(function (t) { var r = e.actions.retriveDataTicket(t); if (r) { var i = "{0}/_layouts/ppm/RPEditor.aspx?dataid={1}&isresource=1".format(o.currentWebUrl, r); e.actions.displayPopUp(i, "Resource Planner", !0, !1, null, null, 700, 700) } }) } }, loadAssignmentPlanner: function () { for (var t = e.grid.g().GetSelRows(), r = [], i = 0; i < t.length; i++) { var n = t[i]; r.push(n.ID) } if (r.length > 0) { var s = "{0}/_layouts/epmlive/AssignmentPlanner.aspx?resources={1}&IsDlg=1".format(o.currentWebUrl, r.join(",")); e.actions.displayPopUp(s, "Assignment Planner", !0, !0, null, null, 1e3, 700) } }, deleteResource: function () { var r = e.grid.g().GetSelRows()[0]; if ("Data" === r.Kind && "R" === r.Def.Name) { if (!confirm("Are you sure you want to delete this resource?")) return; t.ajax({ type: "POST", url: o.currentWebUrl + "/_vti_bin/WorkEngine.asmx/Execute", data: "{ Function: 'DeleteResourcePoolResource', Dataxml: '<DeleteResourcePoolResource><Resource Id=\"" + r.ID + "\"/></DeleteResourcePoolResource>' }", contentType: "application/json; charset=utf-8", dataType: "json", success: function (i) { if (i.d) { var n = o.parseJson(i.d); if (o.responseIsSuccess(n.Result)) { var s = n.Result.DeleteResourcePoolResource.Resource, a = s["@Status"]; if ("0" === a) e.grid.resourceUpdated(1, null, { row: r, changeType: "Deleted" }); else { var l = s["#cdata"]; if ("1" === a) alert(l); else if ("2" === a) { if (!confirm(l)) return; t.ajax({ type: "POST", url: o.currentWebUrl + "/_vti_bin/WorkEngine.asmx/Execute", data: "{ Function: 'DeleteResourcePoolResource', Dataxml: '<DeleteResourcePoolResource><Resource Id=\"" + r.ID + '" ConfirmDelete="True"/></DeleteResourcePoolResource>\' }', contentType: "application/json; charset=utf-8", dataType: "json", success: function (t) { if (t.d) { var i = o.parseJson(t.d); o.responseIsSuccess(i.Result) ? e.grid.resourceUpdated(1, null, { row: r, changeType: "Deleted" }) : o.logFailure(i.Result) } else o.log("resp.d: " + t.d) }, error: function (e) { o.log(e) } }) } } } else o.logFailure(n.Result) } else o.log("response.d: " + i.d) }, error: function (e) { o.log(e) } }) } }, resetEasyScroll: function () { var o = e.grid.g(); t("#EPMLiveResourceGridSelector").watermark("Type here to search..."), null == e.resourceDictionary && e.actions.reIndexResources(), t("#EPMLiveResourceGridSelector").autocomplete({ source: function (o, r) { r(t.ui.autocomplete.filter(e.actions.myResourcesOn ? e.myResources : e.resources, o.term)) }, select: function (t, r) { var i = e.resourceDictionary[r.item.value]; if (i) { var n = o.Rows[i]; o.ExpandParents(n), o.ActionClearSelection(), o.SelectRow(n, !0), o.SetScrollTop(o.GetRowTop(n)) } e.actions.toggleEasyScroll(), window.setTimeout(function () { window.RefreshCommandUI() }, 100) } }), t("#s4-ribbonrow").click(function (o) { for (var r = !0, i = t(o.target).parents(), s = 0; s < 5; s++) try { var a = i[s]; if (a && -1 !== t(a)[0].id.indexOf("Ribbon.ResourceGrid.Actions.Find")) { r = !1, n(); break } } catch (e) { } r && (e.actions.hideEasyScroll(!0), n()) }) }, toggleEasyScroll: function () { var o = t(".callout"); o.length && (o = o[0]); var r = t(o); if (r.is(":visible")) e.actions.hideEasyScroll(!1); else { if (0 === e.resources.length) return !1; var i = document.getElementById("Ribbon.ResourceGrid.Actions.Find-Large"); if (i || (i = document.getElementById("Ribbon.ResourceGrid.Actions.Find-Small")), i && 0 == t(".epmliveToolBar").length) { var n = t(i), s = n.offset(); r.css({ top: s.top + n.height() }), r.css({ left: s.left + n.width() / 2 - 31 }), t("#EPMLiveResourceGridSelector").val(""), r.show(), t("#EPMLiveResourceGridSelector").focus(), e.actions.easyScrollOn = !0 } } return e.actions.easyScrollOn }, reIndexResources: function () { var o = e.grid.g(); e.resourceDictionary = {}, e.resources = [], e.myResources = []; var t = o.Rows; for (var r in t) if (t.hasOwnProperty(r)) { var i = t[r]; if ("Data" === i.Kind && "R" === i.Def.Name) { var n = i.Title; e.resources.push(n), e.resourceDictionary[n] = r, 1 === i.IsMyResource && e.myResources.push(n) } } }, toggleMyResources: function () { var o = e.grid.g(); e.actions.myResourcesOn ? (o.ChangeFilter("IsMyResource", "0", 6, 0, 1, null), e.actions.myResourcesOn = !1) : (o.ChangeFilter("IsMyResource", "1", 1, 0, 1, null), e.actions.myResourcesOn = !0) }, hideEasyScroll: function (o) { var r = t(".callout"); r.length && (r = r[0]); var i = t(r); i.is(":visible") && (i.hide(), e.actions.easyScrollOn = !1, o && window.setTimeout(function () { window.RefreshCommandUI() }, 100)) }, exportResources: function () { e.exportInProgress = !0, window.RefreshCommandUI(); t("#EPMLiveStatusbar").height(); for (var r = o.ui.statusbar.collection(), i = 0; i < r.length; i++) r[i].remove(); var n = o.ui.statusbar.add("Status", "Exporting resources to Excel spreadsheet..."); n.color("yellow"); var s = n.collection()[0]; t.ajax({ type: "POST", url: o.currentWebUrl + "/_vti_bin/WorkEngine.asmx/Execute", data: "{ Function: 'ExportResources', Dataxml: '<ExportResources/>' }", contentType: "application/json; charset=utf-8", dataType: "json", success: function (t) { if (t.d) { var r = o.parseJson(t.d).Result; if (o.responseIsSuccess(r)) { var i = r.ResourceExporter; if ("True" === i["@Success"]) s.message('Resources exported succesfully. Click <a href="' + o.currentWebUrl + "/_layouts/epmlive/filedownloader.aspx?fileid=" + i["@File"] + '&filename=Resources.xlsm&ct=application/ms-excel">here</a> to download the spreadsheet.'), n.color("blue"); else { var a = i["@Message"]; o.log(a), s.title("Error"), s.message("Unable to export resources. The response was: " + a), n.color("red") } } else o.log(r), s.title("Error"), s.message("Unable to export resources. The response was: " + r), n.color("red") } else o.log(t.d), s.title("Error"), s.message("Unable to export resources. There was no response from the server."), n.color("red"); e.exportInProgress = !1, window.RefreshCommandUI() }, error: function (t) { o.log(t), s.title("Error"), s.message("Unable to export resources. The response was: (" + t.status + ") " + t.statusText), n.color("red"), e.exportInProgress = !1, window.RefreshCommandUI() } }) }, importResources: function () { t.ajax({ type: "POST", url: o.currentWebUrl + "/_vti_bin/WorkEngine.asmx/Execute", data: "{ Function: 'IsImportResourceAlreadyRunning', Dataxml: '' }", contentType: "application/json; charset=utf-8", dataType: "json", success: function (r) { if (r.d) { var i = o.parseJson(r.d).Result; if (o.responseIsSuccess(i)) if ("True" === i.ResourceImporter["@Success"]) { if (confirm("A resource import job is currently running and is " + i.ResourceImporter["@PercentComplete"] + "% complete. Would you like to cancel it and run this new import job instead?")) { var n = '<Data><Param key="JobID">' + i.ResourceImporter["@JobUid"] + "</Param></Data>"; t.ajax({ type: "POST", url: o.currentWebUrl + "/_vti_bin/WorkEngine.asmx/Execute", data: "{ Function: 'CancelTimerJob', Dataxml: '" + n + "' }", contentType: "application/json; charset=utf-8", dataType: "json", success: function () { var e = window.SP.UI.$create_DialogOptions(); e.title = "Import Resources", e.url = o.currentWebUrl + "/_layouts/epmlive/importresources.aspx", e.dialogReturnValueCallback = window.epmLiveResourceGrid.actions.onImportResourcesCompleted, window.SP.UI.ModalDialog.showModalDialog(e) }, error: function (t) { o.log(t), status.title("Error"), status.message("Unable to cancel timer job for import resources. The response was: (" + t.status + ") " + t.statusText), statusbar.color("red"), e.importInProgress = !1, window.RefreshCommandUI() } }) } } else { var s = window.SP.UI.$create_DialogOptions(); s.title = "Import Resources", s.url = o.currentWebUrl + "/_layouts/epmlive/importresources.aspx", s.dialogReturnValueCallback = window.epmLiveResourceGrid.actions.onImportResourcesCompleted, window.SP.UI.ModalDialog.showModalDialog(s) } } }, error: function (t) { o.log(t), status.title("Error"), status.message("Unable to check if any import resources job is running. The response was: (" + t.status + ") " + t.statusText), statusbar.color("red"), e.importInProgress = !1, window.RefreshCommandUI() } }) }, onImportResourcesCompleted: function (o, t) { 1 === o && e.grid.reload() }, canExport: function () { return !e.exportInProgress && e.userIsSiteAdmin }, canImport: function () { return !e.importInProgress && e.userIsSiteAdmin }, createToolBar: function (o) { !function r() { if (e.actions.isViewApplied && e.actions.areReportsLoaded) { t("#resourcePoolToolBar").length > 0 && t("#resourcePoolToolBar").remove(); var n = window.Grids[window.epmLive.resourceGridId], s = n.Cols, a = []; for (var l in n.Cols) s.hasOwnProperty(l) && "panel" != l.toLowerCase() && a.push(n.Cols[l]); a.sort(function (e, o) { return e.Name < o.Name ? -1 : e.Name > o.Name ? 1 : 0 }); var c = "", d = []; for (var l in a) n.Header[a[l].Name].trim() && d.push(n.Header[a[l].Name] + "|" + a[l].Name); c = d.sort(function (e, o) { return e.split("|")[0].toLowerCase() < o.split("|")[0].toLowerCase() ? -1 : e.split("|")[0].toLowerCase() > o.split("|")[0].toLowerCase() ? 1 : 0 }).join(","); var u = {}, p = []; if (null != e.views.currentView.cols && e.views.currentView.cols != i) for (var l in e.views.currentView.cols) p.push(e.views.currentView.cols[l].name); var f = 1, w = c.split(","); for (f = 0; f < w.length; f++) { var m = w[f].split("|"); u[m[1].trim()] = { value: m[0].trim(), checked: -1 != t.inArray(m[1].trim().toString(), p) } } var g = { heading: "none", divider: "no", options: [] }, h = e.views.collection; for (var v in h) { var R = h[v], b = { text: R.name, events: [{ eventName: "click", function: function () { e.views.apply(t(this).attr("viewId")), t(this).closest("ul").toggle(), t(this).closest("ul").siblings("a").eq(0).children("span").eq(1).text(e.views.currentView.name), t(this).closest("li").siblings().each(function () { t(this).css("display", "") }), t(this).closest("li").css("display", "none") } }], properties: { viewId: R.id } }; g.options.push(b) } var y = e.reports.collection, T = [], S = ""; for (var C in y) { var I = y[C], P = { iconClass: "", text: I.name, events: [{ eventName: "click", function: function (o) { if (S = "", "Resource Work vs. Capacity" == o.target.innerHTML) for (var r = e.grid.grids[e.id()].GetSelRows(), i = 0; i < r.length; i++) { var n = r[i]; "Data" === n.Kind && "R" === n.Def.Name && (S += "&rp:Resources=" + n.ResourceID) } var s = t(this).attr("reportUrl") + S; window.open(s, "_blank") } }], properties: { reportUrl: I.url } }; T.push(P) } var x = [{ id: "resourcePoolToolBar" }, { placement: "left", content: [{ controlId: "btnInvite", controlType: "button", iconClass: "icon-plus-2", value: "Invite", events: [{ eventName: "click", function: function () { e.LaunchInForm ? window.location.href = e.actions.getNewFormUrl + "?source=" + encodeURIComponent(window.location.pathname) : e.IsRootWeb && "" == e.ListId && "" == e.ItemId ? e.actions.displayPopUp(e.actions.getNewFormUrl, "Add User", !0, !0, e.grid.teamUpdated, { row: null, changeType: "Added" }) : e.actions.displayPopUp(e.actions.getNewFormUrl, "Add User", !0, !0, e.grid.teamUpdated, { row: null, changeType: "Added" }, 800, 700) } }] }, { controlId: "msColumns", controlType: "multiselect", title: "", value: "", iconClass: "icon-insert-template", toolTip: "select columns", sections: [{ heading: "none", divider: "no", options: u }], applyButtonConfig: { text: "Apply", function: function (e) { var o = e.selectedKeys; for (var r in e.sections) { var i = e.sections[r].options; for (var s in i) { i[s]; -1 != t.inArray(s, o) ? n.ShowCol(s) : n.HideCol(s) } } n.Rerender() } }, onchangeFunction: function (e) { } }, { controlId: "ddlTools", controlType: "dropdown", title: "", value: "Tools", iconClass: "icon-tools", sections: [{ heading: "Plan", divider: "yes", options: [{ iconClass: "icon-users-5 icon-dropdown", text: "Resource Planner", events: [{ eventName: "click", function: function () { e.actions.loadResourcePlanner() } }] }, { iconClass: "icon-calendar-5 icon-dropdown", text: "Assignment Planner", events: [{ eventName: "click", function: function () { e.actions.loadAssignmentPlanner() } }] }] }, { heading: "Analyze", divider: "yes", options: [{ iconClass: "icon-stats-3 icon-dropdown", text: "Resource Analyzer", events: [{ eventName: "click", function: function () { e.actions.analyzeResources() } }] }] }, { heading: "Admin", divider: "yes", options: [{ iconClass: "icon-download-6 icon-dropdown", text: "Import Excel", events: [{ eventName: "click", function: function () { t(".dropdown-menu").hide(), e.actions.importResources() } }] }, { iconClass: "icon-upload-6 icon-dropdown", text: "Export Excel", events: [{ eventName: "click", function: function () { t(".dropdown-menu").hide(), e.actions.exportResources() } }] }, { iconClass: "icon-loop-2 icon-dropdown", text: "Refresh", events: [{ eventName: "click", function: function () { t(".dropdown-menu").hide(), e.actions.RefreshItems() } }] }] }, { heading: "none", divider: "yes", options: [{ iconClass: "icon-envelop icon-dropdown", text: "Send Notification", events: [{ eventName: "click", function: function () { t(".dropdown-menu").hide(), e.actions.redirect("sendnotification") } }] }] }] }, { controlId: "ddlReports", controlType: "dropdown", title: "", value: "Reporting", iconClass: "icon-pie-3", sections: [{ heading: "none", divider: "no", options: T }] }] }, { placement: "right", content: [{ controlId: "genericId", controlType: "search", toolTip: "search", custom: "yes", customControlId: "" }, { controlId: "genericId", controlType: "search", toolTip: "search", custom: "no", events: [{ eventName: "keypress", function: function (e) { 13 == e.which && ("" != t("#toolBarResGridSelector").val() ? n.ChangeFilter("Title", t("#toolBarResGridSelector").val(), 11, 0, 0, null) : n.ChangeFilter("", "", "", 0, 0, null)) } }] }, { controlId: "btnFilter", controlType: "button", iconClass: "icon-filter", toolTip: "toggle filters", title: "none", events: [{ eventName: "click", function: function () { e.grid.toggleFiltering() } }] }, { controlId: "btnDefaultSort", controlType: "button", iconClass: "icon-menu-2", toolTip: "default sort", title: "none", events: [{ eventName: "click", function: function () { e.grid.removeSorting() } }] }, { controlType: "groupByFields", toolTip: "manage grouping", availableGroups: c, saveFunction: function (e) { var o = null, r = []; if (e.length > 0) { for (var i in e) { var n = e[i]; r.push(n.value), -1 == t.inArray(n.value, p) && t(".multiselect-container").find(".cbColumn[value='" + n.value + "']").attr("checked", !0) } r.length > 0 && (o = r.join(",")) } window.Grids[window.epmLive.resourceGridId].DoGrouping(o) } }, { controlId: "msColumns", controlType: "multiselect", title: "", value: "", iconClass: "icon-insert-template", toolTip: "select columns", sections: [{ heading: "none", divider: "no", options: u }], applyButtonConfig: { text: "Apply", function: function (e) { var o = e.selectedKeys; for (var r in e.sections) { var i = e.sections[r].options; for (var s in i) { i[s]; -1 != t.inArray(s, o) ? n.ShowCol(s) : n.HideCol(s) } } n.Rerender() } }, onchangeFunction: function (e) { } }, { controlId: "ddlViewControl", controlType: "dropdown", title: "View:", value: e.views.currentView.name, iconClass: "none", sections: [g, { heading: "none", divider: "yes", options: [{ iconClass: "icon-pencil icon-dropdown", text: "Rename View", events: [{ eventName: "click", function: function () { e.views.showRenameDialog() } }] }, { iconClass: "icon-disk icon-dropdown", text: "Save View", events: [{ eventName: "click", function: function () { e.views.showSaveDialog() } }] }, { iconClass: "fui-cross icon-dropdown", text: "Delete View", events: [{ eventName: "click", function: function () { e.views.remove() } }] }] }] }] }]; window.epmLiveGenericToolBar.generateToolBar(o, x), e.userIsSiteAdmin ? (t("#ddlTools_ul_menu li:nth-of-type(8)").show(), t("#ddlTools_ul_menu li:nth-of-type(9)").show(), t("#ddlTools_ul_menu li:nth-of-type(10)").show(), t("#ddlTools_ul_menu li:nth-of-type(11)").show(), t("#ddlTools_ul_menu li:nth-of-type(12)").show()) : (t("#ddlTools_ul_menu li:nth-of-type(8)").hide(), t("#ddlTools_ul_menu li:nth-of-type(9)").hide(), t("#ddlTools_ul_menu li:nth-of-type(10)").hide(), t("#ddlTools_ul_menu li:nth-of-type(11)").hide(), t("#ddlTools_ul_menu li:nth-of-type(12)").hide()), e.UserHaveResourceCenterPermission ? t("#resourcePoolToolBar ul:first li:first").show() : (t("#resourcePoolToolBar ul:first li:first").hide(), t("#resourcePoolToolBar ul:first li:first").next().css("paddingLeft", "15px")) } else setTimeout(r, 500) }() }, getNewFormUrl: "", isViewApplied: !1, areReportsLoaded: !1 }, window.Grids.OnClick = function (o, t, r, i, n, s) { if (0 == e.ribbonBehavior && window.SelectRibbonTab("Ribbon.ResourceGridTab", !0), e.actions.hideEasyScroll(!0), "Data" === t.Kind && "R" === t.Def.Name) { var a; if (s.shiftKey && s.ctrlKey || !s.shiftKey && !s.ctrlKey) { var l = t.Selected; "Panel" !== r && o.ActionClearSelection(), a = o.SelectRow(t, !l) } else if (s.shiftKey) { var c = o.GetSelRows(); o.ActionClearSelection(), a = c ? o.SelectRange(c[0], null, t, null, 1, 1) : o.SelectRow(t, !t.Selected) } else a = o.SelectRow(t, !t.Selected); if (null !== a) return window.RefreshCommandUI(), !0 } else if ("Group" === t.Def.Name) { if ("Panel" === r) { o.SelectRow(t, !t.Selected); for (var d = t.firstChild; d;) o.SelectRow(d, t.Selected), d = d.nextSibling; return window.RefreshCommandUI(), !0 } } else "Header" === t.Kind && "Panel" === r && (e.allSelected = !e.allSelected, window.setTimeout(function () { window.RefreshCommandUI() }, 100)) }, window.Grids.OnMouseOutRow = function (e, o, t, r) { e.SetAttribute(o, "Title", "ButtonText", " ", 1) }, window.Grids.OnMouseOverOutside = function (e, o, t, r) { e.CurHoverRow && e.SetAttribute(e.GetRowById(e.CurHoverRow), "Title", "ButtonText", " ", 1), e.CurHoverRow = "0" }, window.Grids.OnMouseOverRow = function (e, r, i, n) { e.CurHoverRow != r.id && (e.CurHoverRow = r.id, CurrentGrid = e, "" != e.GetValue(r, "itemid") && (e.SetAttribute(r, "Title", "ButtonText", '<div class="gridmenuspan" style="position:absolute;overflow:visible" id="' + r.id + '"><a data-itemid="' + e.GetValue(r, "itemid") + '" data-listid="' + e.GetValue(r, "listid") + '" data-webid="' + o.rootWebId + '" data-siteid="' + e.GetValue(r, "siteid") + '" ></a></div>', 1), window.epmLiveNavigation.addContextualMenu(t("#" + r.id), [], !1, !1, { edit: "window.epmLiveResourceGrid.grid.contextMenuResourceChanged", delete: "window.epmLiveResourceGrid.grid.contextMenuResourceDelete" }))) }, window.Grids.OnExpand = function (e, o) { t.browser.msie && window.setTimeout(function () { e.Update(), e.SetScrollTop(e.GetScrollTop() + 2), e.SetScrollTop(e.GetScrollTop() - 2), e.Update() }, 4e3) }, window.Grids.OnColumnsChanged = function (e, o, t) { var r = e.GetLastCol("0"); for (var n in o) o[n] && e.MoveCol(n, r, !0, 0); var s = o.ProfilePic; if (!s && !o.length) try { s = o.ProfilePic } catch (e) { } s !== i && (e.SetAttribute(null, "ProfilePic", "Visible", "0", 0), e.Rerender()) }, window.Grids.OnReady = function (o, t) { window.epmLive.resourceGridId = o.id, e.id(o.id), e.views.load(), e.reports.load(), e.actions.createToolBar("test") }, window.Grids.OnUpdated = function (o) { e.grid.resetNoDataRow() }, window.Grids.OnLoaded = function (r) { var i = t.browser.msie ? 20 : 5, s = e.webpartHeight, a = s; s || (a = t("#s4-workspace").height() - (t("#s4-titlerow").height() + t("#EPMLiveStatusbar").height() + t("#EPMLiveStatusbarTemplate").height() + t("#EPMLiveStatuTemplate").height() + t("#s4-statusbarcontainer").height() + i) - 100), (!window.epmLiveMasterPageVersion || window.epmLiveMasterPageVersion < 5.5) && (e.loader ? (o.utils.fireEvent(document.getElementById("MSOZoneCell_WebPart" + e.webpartQualifier), "mouseup"), e.loader.close()) : t("#ResourceGridLoader").hide()), s || (t("#MSOZoneCell_WebPart" + e.webpartQualifier).height(a), t("#WebPart" + e.webpartQualifier).height(a)); var l = t(window); e.winHeight = l.height(), window.setTimeout(function () { e.actions.loadRibbon() }, 1500), t("#s4-workspace").click(function () { 0 == e.ribbonBehavior && window.SelectRibbonTab("Ribbon.ResourceGridTab", !0), n() }) }, t(window).resize(function () { n() }), window.Grids.OnGetHtmlValue = function (e, o, t, r) { if ("Group" === o.Def.Name) { if ("Panel" !== t && "Title" !== t) return "" } else if (e.Cols[t] && "Lines" === e.Cols[t].Type) return r }, window.Grids.OnGetColor = function (e, o, r, i, n, s, a) { if ("Title" === r && !(230 !== i && 180 !== i && 255 !== i || 242 !== n && 217 !== n && 255 !== n || 251 !== s && 243 !== s && 255 !== s) && o.r0) { var l = t(o.r0).find(".GSCellPanel"); l && (230 === i && 242 === n && 251 === s ? t(l).addClass("EPMLiveResourceGridPanelHovered") : 180 === i && 217 === n && 243 === s ? t(l).addClass("EPMLiveResourceGridPanelHoveredSelected") : t(l).removeClass("EPMLiveResourceGridPanelHovered EPMLiveResourceGridPanelHoveredSelected")) } return null }, window.SP.SOD.notifyScriptLoadedAndExecuteWaitingJobs("EPMLive.ResourceGrid.js") }(window.epmLiveResourceGrid = window.epmLiveResourceGrid || {}, window.epmLive, window.jQuery, window.ko) } ExecuteOrDelayUntilScriptLoaded(registerEpmLiveResourceGridScript, "EPMLive.js"), window.console || (console = {}), console.error = console.error || function () { }, console.log = console.log || function () { };