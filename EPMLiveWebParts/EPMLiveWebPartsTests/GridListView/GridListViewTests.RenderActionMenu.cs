using System.Web.Fakes;
using EPMLiveCore.Fakes;
using EPMLiveWebParts.Fakes;
using Microsoft.SharePoint;
using Microsoft.SharePoint.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Shouldly;

namespace EPMLiveWebParts.Tests
{
    public partial class GridListViewTests
    {
        private const string RenderActionMenuMethod = "RenderActionMenu";
        private const string BOOLShowViewBarField = "BOOLShowViewBar";

        [TestMethod]
        public void RenderActionMenu_GivenHtmlTextWriter_BOOLShowViewBarFalse_ConfirmOutput()
        {
            // Arrange
            SetupShims();
            _testablePrivate.SetFieldOrProperty(BOOLShowViewBarField, false);

            // Act
            _testablePrivate.Invoke(RenderActionMenuMethod, 
                new object[] { writer });

            // Assert
            _testablePrivate.ShouldSatisfyAllConditions(
                () => writeCount.ShouldBe(0),
                () => writerContent.ToString().ShouldBe(string.Empty));
        }

        [TestMethod]
        public void RenderActionMenu_GivenHtmlTextWriter_gvs_Columns_Null_ConfirmOutput()
        {
            // Arrange
            SetupShims();
            _testablePrivate.SetFieldOrProperty(BOOLShowViewBarField, true);

            // Act
            _testablePrivate.Invoke(RenderActionMenuMethod,
                new object[] { writer });

            // Assert
            _testablePrivate.ShouldSatisfyAllConditions(
                () => writeCount.ShouldBe(8),
                () => writerContent.ToString().ShouldBe("<div id=\"actionmenutest-grid-id\" style=\"width:100%\"></div><script language=\"javascript\">            MenuLoadedtest-grid-id = false;            function loadMenutest-grid-id()            {                if(MenuLoadedtest-grid-id)                    return;                MenuLoadedtest-grid-id = true;var cfgs = [                    {                        'placement': 'left',                        'content': [                        {                            'controlId': 'btnNew',                            'controlType': 'button',                            'iconClass': 'icon-plus-2',                            'title': 'New Item',                            'events': [                                {                                    'eventName': 'click',                                    'function': function () { newItemtest-grid-id(true); }                                }                            ]                        }                                            ]                    },{                    'placement': 'right',                    'content': [                    //search control                    {                        'controlId': 'btnSearchtest-grid-id',                        'controlType': 'button',                        'toolTip': 'search',                        'iconClass': 'icon-search-3',                        'title': 'none',                        'events': [                            {                                'eventName': 'click',                                'function': function () { GridHideShowSearch(Grids[\"GanttGridtest-grid-id\"]); }                            }                        ]                    },                    // filter button                    {                        'controlId': 'btnFiltertest-grid-id',                        'controlType': 'button',                        'toolTip': 'toggle filters',                        'iconClass': 'icon-filter',                        'title': 'none',                        'events': [                            {                                'eventName': 'click',                                'function': function () { GridHideShowFilter(Grids[\"GanttGridtest-grid-id\"]); }                            }                        ]                    },                    // default sort button                    {                        'controlId': 'btnDefaultSorttest-grid-id',                        'controlType': 'button',                        'toolTip': 'default sort',                        'iconClass': 'icon-menu-2',                        'title': 'none',                        'events': [                            {                                'eventName': 'click',                                'function': function () { GridSort(Grids[\"GanttGridtest-grid-id\"]); }                            }                        ]                    },                    //group by fields                    {                        'controlId': 'msGroupFieldstest-grid-id',                        'controlType': 'groupByFields',                        'toolTip': 'manage grouping',                        'availableGroups': '|Title|00000000-0000-0000-0000-000000000000,',                                                'groups': [],                        'saveFunction': function (data) { return ChangeGroups('test-grid-id', data) }                    },                    //select columns control                    {                        'controlId': 'msColumnstest-grid-id',                        'controlType': 'multiselect',                        'toolTip': 'select columns',                        'title': '',                        'value': '',                        'iconClass': 'icon-insert-template',                        'sections': [                            {                                'heading': 'Current List',                                'divider': 'no',                                'options':                                    {                                     'Title': { 'value': '', 'checked':false}                                    }                            },                            {                                'heading': 'Special Columns',                                'divider': 'no',                                'options':                                    {                                        'Gantt': { 'value': 'Gantt Chart', 'checked':false}                                    }                            }                        ],                        'applyButtonConfig': {                            'text': 'Apply',                            'function': function(data) { return ChangeColumns('test-grid-id', data) }                        },                        'onchangeFunction': function(data) {}                    },                    //view control                    {                        'controlId': 'ddlViewControltest-grid-id',                        'controlType': 'dropdown',                        'title': 'View: ',                        'value': 'dummy',                        'iconClass': 'none',                        'sections': [                            {                                'heading': 'none',                                'options': [                                {'iconClass': '','text': 'dummy','events': [{'eventName': 'click','function': function () { $('#ddlViewControl_ul_menu').toggle(); location.href='http://fake.url'; }}]}                                ]                            }]                    }]                }            ];                epmLiveGenericToolBar.generateToolBar('actionmenutest-grid-id', cfgs);}            //ExecuteOrDelayUntilScriptLoaded(loadMenutest-grid-id, 'EPMLive.js');            var viewURLs = [];var defaultViewUrl = \"\";</script>"));
        }

        [TestMethod]
        public void RenderActionMenu_GivenHtmlTextWriter_gvs_Columns_NotNull_ConfirmOutput()
        {
            // Arrange
            SetupShims();
            _testablePrivate.SetFieldOrProperty(BOOLShowViewBarField, true);
            ShimGridViewSession.AllInstances.ColumnsGet = (_) => DummyString;

            // Act
            _testablePrivate.Invoke(RenderActionMenuMethod,
                new object[] { writer });

            // Assert
            _testablePrivate.ShouldSatisfyAllConditions(
                () => writeCount.ShouldBe(8),
                () => writerContent.ToString().ShouldBe("<div id=\"actionmenutest-grid-id\" style=\"width:100%\"></div><script language=\"javascript\">            MenuLoadedtest-grid-id = false;            function loadMenutest-grid-id()            {                if(MenuLoadedtest-grid-id)                    return;                MenuLoadedtest-grid-id = true;var cfgs = [                    {                        'placement': 'left',                        'content': [                        {                            'controlId': 'btnNew',                            'controlType': 'button',                            'iconClass': 'icon-plus-2',                            'title': 'New Item',                            'events': [                                {                                    'eventName': 'click',                                    'function': function () { newItemtest-grid-id(true); }                                }                            ]                        }                                            ]                    },{                    'placement': 'right',                    'content': [                    //search control                    {                        'controlId': 'btnSearchtest-grid-id',                        'controlType': 'button',                        'toolTip': 'search',                        'iconClass': 'icon-search-3',                        'title': 'none',                        'events': [                            {                                'eventName': 'click',                                'function': function () { GridHideShowSearch(Grids[\"GanttGridtest-grid-id\"]); }                            }                        ]                    },                    // filter button                    {                        'controlId': 'btnFiltertest-grid-id',                        'controlType': 'button',                        'toolTip': 'toggle filters',                        'iconClass': 'icon-filter',                        'title': 'none',                        'events': [                            {                                'eventName': 'click',                                'function': function () { GridHideShowFilter(Grids[\"GanttGridtest-grid-id\"]); }                            }                        ]                    },                    // default sort button                    {                        'controlId': 'btnDefaultSorttest-grid-id',                        'controlType': 'button',                        'toolTip': 'default sort',                        'iconClass': 'icon-menu-2',                        'title': 'none',                        'events': [                            {                                'eventName': 'click',                                'function': function () { GridSort(Grids[\"GanttGridtest-grid-id\"]); }                            }                        ]                    },                    //group by fields                    {                        'controlId': 'msGroupFieldstest-grid-id',                        'controlType': 'groupByFields',                        'toolTip': 'manage grouping',                        'availableGroups': '|Title|00000000-0000-0000-0000-000000000000,',                                                'groups': [],                        'saveFunction': function (data) { return ChangeGroups('test-grid-id', data) }                    },                    //select columns control                    {                        'controlId': 'msColumnstest-grid-id',                        'controlType': 'multiselect',                        'toolTip': 'select columns',                        'title': '',                        'value': '',                        'iconClass': 'icon-insert-template',                        'sections': [                            {                                'heading': 'Current List',                                'divider': 'no',                                'options':                                    {                                     'Title': { 'value': '', 'checked':false}                                    }                            },                            {                                'heading': 'Special Columns',                                'divider': 'no',                                'options':                                    {                                        'Gantt': { 'value': 'Gantt Chart', 'checked':false}                                    }                            }                        ],                        'applyButtonConfig': {                            'text': 'Apply',                            'function': function(data) { return ChangeColumns('test-grid-id', data) }                        },                        'onchangeFunction': function(data) {}                    },                    //view control                    {                        'controlId': 'ddlViewControltest-grid-id',                        'controlType': 'dropdown',                        'title': 'View: ',                        'value': 'dummy',                        'iconClass': 'none',                        'sections': [                            {                                'heading': 'none',                                'options': [                                {'iconClass': '','text': 'dummy','events': [{'eventName': 'click','function': function () { $('#ddlViewControl_ul_menu').toggle(); location.href='http://fake.url'; }}]}                                ]                            }]                    }]                }            ];                epmLiveGenericToolBar.generateToolBar('actionmenutest-grid-id', cfgs);}            //ExecuteOrDelayUntilScriptLoaded(loadMenutest-grid-id, 'EPMLive.js');            var viewURLs = [];var defaultViewUrl = \"\";</script>"));
        }

        [TestMethod]
        public void RenderActionMenu_GivenHtmlTextWriter_PropDefaultControlEqualToGantt_ConfirmOutput()
        {
            // Arrange
            SetupShims();
            _testablePrivate.SetFieldOrProperty(BOOLShowViewBarField, true);
            _testablePrivate.SetFieldOrProperty("PropDefaultControl", "Gantt");
            ShimHttpRequest.AllInstances.ItemGetString = (_, __) => "grid";
            ShimGridViewSession.AllInstances.GroupsGet = (_) => DummyString;

            // Act
            _testablePrivate.Invoke(RenderActionMenuMethod,
                new object[] { writer });

            // Assert
            _testablePrivate.ShouldSatisfyAllConditions(
                () => writeCount.ShouldBe(8),
                () => writerContent.ToString().ShouldBe("<div id=\"actionmenutest-grid-id\" style=\"width:100%\"></div><script language=\"javascript\">            MenuLoadedtest-grid-id = false;            function loadMenutest-grid-id()            {                if(MenuLoadedtest-grid-id)                    return;                MenuLoadedtest-grid-id = true;var cfgs = [                    {                        'placement': 'left',                        'content': [                        {                            'controlId': 'btnNew',                            'controlType': 'button',                            'iconClass': 'icon-plus-2',                            'title': 'New Item',                            'events': [                                {                                    'eventName': 'click',                                    'function': function () { newItemtest-grid-id(true); }                                }                            ]                        }                                            ]                    },{                    'placement': 'right',                    'content': [                    //search control                    {                        'controlId': 'btnSearchtest-grid-id',                        'controlType': 'button',                        'toolTip': 'search',                        'iconClass': 'icon-search-3',                        'title': 'none',                        'events': [                            {                                'eventName': 'click',                                'function': function () { GridHideShowSearch(Grids[\"GanttGridtest-grid-id\"]); }                            }                        ]                    },                    // filter button                    {                        'controlId': 'btnFiltertest-grid-id',                        'controlType': 'button',                        'toolTip': 'toggle filters',                        'iconClass': 'icon-filter',                        'title': 'none',                        'events': [                            {                                'eventName': 'click',                                'function': function () { GridHideShowFilter(Grids[\"GanttGridtest-grid-id\"]); }                            }                        ]                    },                    // default sort button                    {                        'controlId': 'btnDefaultSorttest-grid-id',                        'controlType': 'button',                        'toolTip': 'default sort',                        'iconClass': 'icon-menu-2',                        'title': 'none',                        'events': [                            {                                'eventName': 'click',                                'function': function () { GridSort(Grids[\"GanttGridtest-grid-id\"]); }                            }                        ]                    },                    //group by fields                    {                        'controlId': 'msGroupFieldstest-grid-id',                        'controlType': 'groupByFields',                        'toolTip': 'manage grouping',                        'availableGroups': '|Title|00000000-0000-0000-0000-000000000000,',                                                'groups': [{                    'displayName': '',                    'internalName': 'dummy',                    'id': '00000000-0000-0000-0000-000000000000'                }],                        'saveFunction': function (data) { return ChangeGroups('test-grid-id', data) }                    },                    //select columns control                    {                        'controlId': 'msColumnstest-grid-id',                        'controlType': 'multiselect',                        'toolTip': 'select columns',                        'title': '',                        'value': '',                        'iconClass': 'icon-insert-template',                        'sections': [                            {                                'heading': 'Current List',                                'divider': 'no',                                'options':                                    {                                     'Title': { 'value': '', 'checked':false}                                    }                            },                            {                                'heading': 'Special Columns',                                'divider': 'no',                                'options':                                    {                                        'Gantt': { 'value': 'Gantt Chart', 'checked':false}                                    }                            }                        ],                        'applyButtonConfig': {                            'text': 'Apply',                            'function': function(data) { return ChangeColumns('test-grid-id', data) }                        },                        'onchangeFunction': function(data) {}                    },                    //view control                    {                        'controlId': 'ddlViewControltest-grid-id',                        'controlType': 'dropdown',                        'title': 'View: ',                        'value': 'dummy',                        'iconClass': 'none',                        'sections': [                            {                                'heading': 'none',                                'options': [                                {'iconClass': '','text': 'dummy','events': [{'eventName': 'click','function': function () { $('#ddlViewControl_ul_menu').toggle(); location.href='http://fake.url'; }}]}                                ]                            }]                    }]                }            ];                epmLiveGenericToolBar.generateToolBar('actionmenutest-grid-id', cfgs);}            //ExecuteOrDelayUntilScriptLoaded(loadMenutest-grid-id, 'EPMLive.js');            var viewURLs = [];var defaultViewUrl = \"\";</script>"));
        }

        [TestMethod]
        public void RenderActionMenu_GivenHtmlTextWriter_BaseTemplateEqualsTo_DocumentLibrary_ConfirmOutput()
        {
            // Arrange
            SetupShims();
            _testablePrivate.SetFieldOrProperty(BOOLShowViewBarField, true);
            ShimSPList.AllInstances.BaseTemplateGet = (_) => SPListTemplateType.DocumentLibrary;
            ShimSPField.AllInstances.HiddenGet = (_) => false;
            ShimSPField.AllInstances.ReorderableGet = (_) => true;
            ShimSPField.AllInstances.TypeGet = (_) => SPFieldType.Lookup;

            // Act
            _testablePrivate.Invoke(RenderActionMenuMethod,
                new object[] { writer });

            // Assert
            _testablePrivate.ShouldSatisfyAllConditions(
                () => writeCount.ShouldBe(8),
                () => writerContent.ToString().ShouldBe("<div id=\"actionmenutest-grid-id\" style=\"width:100%\"></div><script language=\"javascript\">            MenuLoadedtest-grid-id = false;            function loadMenutest-grid-id()            {                if(MenuLoadedtest-grid-id)                    return;                MenuLoadedtest-grid-id = true;var cfgs = [                    {                        'placement': 'left',                        'content': [                        {                            'controlId': 'btnNew',                            'controlType': 'button',                            'iconClass': 'icon-plus-2',                            'title': 'New Item',                            'events': [                                {                                    'eventName': 'click',                                    'function': function () { newItemtest-grid-id(true); }                                }                            ]                        }                                            ]                    },{                    'placement': 'right',                    'content': [                    //search control                    {                        'controlId': 'btnSearchtest-grid-id',                        'controlType': 'button',                        'toolTip': 'search',                        'iconClass': 'icon-search-3',                        'title': 'none',                        'events': [                            {                                'eventName': 'click',                                'function': function () { GridHideShowSearch(Grids[\"GanttGridtest-grid-id\"]); }                            }                        ]                    },                    // filter button                    {                        'controlId': 'btnFiltertest-grid-id',                        'controlType': 'button',                        'toolTip': 'toggle filters',                        'iconClass': 'icon-filter',                        'title': 'none',                        'events': [                            {                                'eventName': 'click',                                'function': function () { GridHideShowFilter(Grids[\"GanttGridtest-grid-id\"]); }                            }                        ]                    },                    // default sort button                    {                        'controlId': 'btnDefaultSorttest-grid-id',                        'controlType': 'button',                        'toolTip': 'default sort',                        'iconClass': 'icon-menu-2',                        'title': 'none',                        'events': [                            {                                'eventName': 'click',                                'function': function () { GridSort(Grids[\"GanttGridtest-grid-id\"]); }                            }                        ]                    },                    //group by fields                    {                        'controlId': 'msGroupFieldstest-grid-id',                        'controlType': 'groupByFields',                        'toolTip': 'manage grouping',                        'availableGroups': '|test-field|00000000-0000-0000-0000-000000000000,',                                                'groups': [],                        'saveFunction': function (data) { return ChangeGroups('test-grid-id', data) }                    },                    //select columns control                    {                        'controlId': 'msColumnstest-grid-id',                        'controlType': 'multiselect',                        'toolTip': 'select columns',                        'title': '',                        'value': '',                        'iconClass': 'icon-insert-template',                        'sections': [                            {                                'heading': 'Current List',                                'divider': 'no',                                'options':                                    {                                     'test-field': { 'value': '', 'checked':false}                                    }                            },                            {                                'heading': 'Special Columns',                                'divider': 'no',                                'options':                                    {                                        'Gantt': { 'value': 'Gantt Chart', 'checked':false}                                    }                            }                        ],                        'applyButtonConfig': {                            'text': 'Apply',                            'function': function(data) { return ChangeColumns('test-grid-id', data) }                        },                        'onchangeFunction': function(data) {}                    },                    //view control                    {                        'controlId': 'ddlViewControltest-grid-id',                        'controlType': 'dropdown',                        'title': 'View: ',                        'value': 'dummy',                        'iconClass': 'none',                        'sections': [                            {                                'heading': 'none',                                'options': [                                {'iconClass': '','text': 'dummy','events': [{'eventName': 'click','function': function () { $('#ddlViewControl_ul_menu').toggle(); location.href='http://fake.url'; }}]}                                ]                            }]                    }]                }            ];                epmLiveGenericToolBar.generateToolBar('actionmenutest-grid-id', cfgs);}            //ExecuteOrDelayUntilScriptLoaded(loadMenutest-grid-id, 'EPMLive.js');            var viewURLs = [];var defaultViewUrl = \"\";</script>"));
        }

        [TestMethod]
        public void RenderActionMenu_GivenHtmlTextWriter_BaseTemplateEqualsTo_DocumentLibrary2_ConfirmOutput()
        {
            // Arrange
            SetupShims();
            _testablePrivate.SetFieldOrProperty(BOOLShowViewBarField, true);
            ShimSPList.AllInstances.BaseTemplateGet = (_) => SPListTemplateType.DocumentLibrary;
            ShimSPField.AllInstances.HiddenGet = (_) => false;
            ShimSPField.AllInstances.ReorderableGet = (_) => true;
            ShimSPField.AllInstances.TypeGet = (_) => SPFieldType.Lookup;
            ShimSPField.AllInstances.IdGet = (_) => SPBuiltInFieldId.LinkTitleNoMenu;
     
            // Act
            _testablePrivate.Invoke(RenderActionMenuMethod,
                new object[] { writer });

            // Assert
            _testablePrivate.ShouldSatisfyAllConditions(
                () => writeCount.ShouldBe(8),
                () => writerContent.ToString().ShouldBe("<div id=\"actionmenutest-grid-id\" style=\"width:100%\"></div><script language=\"javascript\">            MenuLoadedtest-grid-id = false;            function loadMenutest-grid-id()            {                if(MenuLoadedtest-grid-id)                    return;                MenuLoadedtest-grid-id = true;var cfgs = [                    {                        'placement': 'left',                        'content': [                        {                            'controlId': 'btnNew',                            'controlType': 'button',                            'iconClass': 'icon-plus-2',                            'title': 'New Item',                            'events': [                                {                                    'eventName': 'click',                                    'function': function () { newItemtest-grid-id(true); }                                }                            ]                        }                                            ]                    },{                    'placement': 'right',                    'content': [                    //search control                    {                        'controlId': 'btnSearchtest-grid-id',                        'controlType': 'button',                        'toolTip': 'search',                        'iconClass': 'icon-search-3',                        'title': 'none',                        'events': [                            {                                'eventName': 'click',                                'function': function () { GridHideShowSearch(Grids[\"GanttGridtest-grid-id\"]); }                            }                        ]                    },                    // filter button                    {                        'controlId': 'btnFiltertest-grid-id',                        'controlType': 'button',                        'toolTip': 'toggle filters',                        'iconClass': 'icon-filter',                        'title': 'none',                        'events': [                            {                                'eventName': 'click',                                'function': function () { GridHideShowFilter(Grids[\"GanttGridtest-grid-id\"]); }                            }                        ]                    },                    // default sort button                    {                        'controlId': 'btnDefaultSorttest-grid-id',                        'controlType': 'button',                        'toolTip': 'default sort',                        'iconClass': 'icon-menu-2',                        'title': 'none',                        'events': [                            {                                'eventName': 'click',                                'function': function () { GridSort(Grids[\"GanttGridtest-grid-id\"]); }                            }                        ]                    },                    //group by fields                    {                        'controlId': 'msGroupFieldstest-grid-id',                        'controlType': 'groupByFields',                        'toolTip': 'manage grouping',                        'availableGroups': '|test-field|bc91a437-52e7-49e1-8c4e-4698904b2b6d,',                                                'groups': [],                        'saveFunction': function (data) { return ChangeGroups('test-grid-id', data) }                    },                    //select columns control                    {                        'controlId': 'msColumnstest-grid-id',                        'controlType': 'multiselect',                        'toolTip': 'select columns',                        'title': '',                        'value': '',                        'iconClass': 'icon-insert-template',                        'sections': [                            {                                'heading': 'Current List',                                'divider': 'no',                                'options':                                    {                                     'test-field': { 'value': '', 'checked':false}                                    }                            },                            {                                'heading': 'Special Columns',                                'divider': 'no',                                'options':                                    {                                        'Gantt': { 'value': 'Gantt Chart', 'checked':false}                                    }                            }                        ],                        'applyButtonConfig': {                            'text': 'Apply',                            'function': function(data) { return ChangeColumns('test-grid-id', data) }                        },                        'onchangeFunction': function(data) {}                    },                    //view control                    {                        'controlId': 'ddlViewControltest-grid-id',                        'controlType': 'dropdown',                        'title': 'View: ',                        'value': 'dummy',                        'iconClass': 'none',                        'sections': [                            {                                'heading': 'none',                                'options': [                                {'iconClass': '','text': 'dummy','events': [{'eventName': 'click','function': function () { $('#ddlViewControl_ul_menu').toggle(); location.href='http://fake.url'; }}]}                                ]                            }]                    }]                }            ];                epmLiveGenericToolBar.generateToolBar('actionmenutest-grid-id', cfgs);}            //ExecuteOrDelayUntilScriptLoaded(loadMenutest-grid-id, 'EPMLive.js');            var viewURLs = [];var defaultViewUrl = \"\";</script>"));
        }


        [TestMethod]
        public void RenderActionMenu_GivenHtmlTextWriter_BaseTemplateEqualsTo_NotDocumentLibrary_ConfirmOutput()
        {
            // Arrange
            SetupShims();
            _testablePrivate.SetFieldOrProperty(BOOLShowViewBarField, true);
            ShimSPList.AllInstances.BaseTemplateGet = (_) => SPListTemplateType.AccessRequest;
            ShimSPField.AllInstances.HiddenGet = (_) => false;
            ShimSPField.AllInstances.ReorderableGet = (_) => true;
            ShimSPField.AllInstances.TypeGet = (_) => SPFieldType.Lookup;

            // Act
            _testablePrivate.Invoke(RenderActionMenuMethod,
                new object[] { writer });

            // Assert
            _testablePrivate.ShouldSatisfyAllConditions(
                () => writeCount.ShouldBe(8),
                () => writerContent.ToString().ShouldBe("<div id=\"actionmenutest-grid-id\" style=\"width:100%\"></div><script language=\"javascript\">            MenuLoadedtest-grid-id = false;            function loadMenutest-grid-id()            {                if(MenuLoadedtest-grid-id)                    return;                MenuLoadedtest-grid-id = true;var cfgs = [                    {                        'placement': 'left',                        'content': [                        {                            'controlId': 'btnNew',                            'controlType': 'button',                            'iconClass': 'icon-plus-2',                            'title': 'New Item',                            'events': [                                {                                    'eventName': 'click',                                    'function': function () { newItemtest-grid-id(true); }                                }                            ]                        }                                            ]                    },{                    'placement': 'right',                    'content': [                    //search control                    {                        'controlId': 'btnSearchtest-grid-id',                        'controlType': 'button',                        'toolTip': 'search',                        'iconClass': 'icon-search-3',                        'title': 'none',                        'events': [                            {                                'eventName': 'click',                                'function': function () { GridHideShowSearch(Grids[\"GanttGridtest-grid-id\"]); }                            }                        ]                    },                    // filter button                    {                        'controlId': 'btnFiltertest-grid-id',                        'controlType': 'button',                        'toolTip': 'toggle filters',                        'iconClass': 'icon-filter',                        'title': 'none',                        'events': [                            {                                'eventName': 'click',                                'function': function () { GridHideShowFilter(Grids[\"GanttGridtest-grid-id\"]); }                            }                        ]                    },                    // default sort button                    {                        'controlId': 'btnDefaultSorttest-grid-id',                        'controlType': 'button',                        'toolTip': 'default sort',                        'iconClass': 'icon-menu-2',                        'title': 'none',                        'events': [                            {                                'eventName': 'click',                                'function': function () { GridSort(Grids[\"GanttGridtest-grid-id\"]); }                            }                        ]                    },                    //group by fields                    {                        'controlId': 'msGroupFieldstest-grid-id',                        'controlType': 'groupByFields',                        'toolTip': 'manage grouping',                        'availableGroups': '|test-field|00000000-0000-0000-0000-000000000000,',                                                'groups': [],                        'saveFunction': function (data) { return ChangeGroups('test-grid-id', data) }                    },                    //select columns control                    {                        'controlId': 'msColumnstest-grid-id',                        'controlType': 'multiselect',                        'toolTip': 'select columns',                        'title': '',                        'value': '',                        'iconClass': 'icon-insert-template',                        'sections': [                            {                                'heading': 'Current List',                                'divider': 'no',                                'options':                                    {                                     'test-field': { 'value': '', 'checked':false}                                    }                            },                            {                                'heading': 'Special Columns',                                'divider': 'no',                                'options':                                    {                                        'Gantt': { 'value': 'Gantt Chart', 'checked':false}                                    }                            }                        ],                        'applyButtonConfig': {                            'text': 'Apply',                            'function': function(data) { return ChangeColumns('test-grid-id', data) }                        },                        'onchangeFunction': function(data) {}                    },                    //view control                    {                        'controlId': 'ddlViewControltest-grid-id',                        'controlType': 'dropdown',                        'title': 'View: ',                        'value': 'dummy',                        'iconClass': 'none',                        'sections': [                            {                                'heading': 'none',                                'options': [                                {'iconClass': '','text': 'dummy','events': [{'eventName': 'click','function': function () { $('#ddlViewControl_ul_menu').toggle(); location.href='http://fake.url'; }}]}                                ]                            }]                    }]                }            ];                epmLiveGenericToolBar.generateToolBar('actionmenutest-grid-id', cfgs);}            //ExecuteOrDelayUntilScriptLoaded(loadMenutest-grid-id, 'EPMLive.js');            var viewURLs = [];var defaultViewUrl = \"\";</script>"));
        }

        [TestMethod]
        public void RenderActionMenu_GivenHtmlTextWriter_BaseTemplateEqualsTo_NotDocumentLibrary2_ConfirmOutput()
        {
            // Arrange
            SetupShims();
            _testablePrivate.SetFieldOrProperty(BOOLShowViewBarField, true);
            ShimSPList.AllInstances.BaseTemplateGet = (_) => SPListTemplateType.DocumentLibrary;
            ShimSPField.AllInstances.HiddenGet = (_) => false;
            ShimSPField.AllInstances.ReorderableGet = (_) => true;
            ShimSPField.AllInstances.TypeGet = (_) => SPFieldType.Lookup;
            ShimSPField.AllInstances.IdGet = (_) => SPBuiltInFieldId.AdminTaskOrder;

            // Act
            _testablePrivate.Invoke(RenderActionMenuMethod,
                new object[] { writer });

            // Assert
            _testablePrivate.ShouldSatisfyAllConditions(
                () => writeCount.ShouldBe(8),
                () => writerContent.ToString().ShouldBe("<div id=\"actionmenutest-grid-id\" style=\"width:100%\"></div><script language=\"javascript\">            MenuLoadedtest-grid-id = false;            function loadMenutest-grid-id()            {                if(MenuLoadedtest-grid-id)                    return;                MenuLoadedtest-grid-id = true;var cfgs = [                    {                        'placement': 'left',                        'content': [                        {                            'controlId': 'btnNew',                            'controlType': 'button',                            'iconClass': 'icon-plus-2',                            'title': 'New Item',                            'events': [                                {                                    'eventName': 'click',                                    'function': function () { newItemtest-grid-id(true); }                                }                            ]                        }                                            ]                    },{                    'placement': 'right',                    'content': [                    //search control                    {                        'controlId': 'btnSearchtest-grid-id',                        'controlType': 'button',                        'toolTip': 'search',                        'iconClass': 'icon-search-3',                        'title': 'none',                        'events': [                            {                                'eventName': 'click',                                'function': function () { GridHideShowSearch(Grids[\"GanttGridtest-grid-id\"]); }                            }                        ]                    },                    // filter button                    {                        'controlId': 'btnFiltertest-grid-id',                        'controlType': 'button',                        'toolTip': 'toggle filters',                        'iconClass': 'icon-filter',                        'title': 'none',                        'events': [                            {                                'eventName': 'click',                                'function': function () { GridHideShowFilter(Grids[\"GanttGridtest-grid-id\"]); }                            }                        ]                    },                    // default sort button                    {                        'controlId': 'btnDefaultSorttest-grid-id',                        'controlType': 'button',                        'toolTip': 'default sort',                        'iconClass': 'icon-menu-2',                        'title': 'none',                        'events': [                            {                                'eventName': 'click',                                'function': function () { GridSort(Grids[\"GanttGridtest-grid-id\"]); }                            }                        ]                    },                    //group by fields                    {                        'controlId': 'msGroupFieldstest-grid-id',                        'controlType': 'groupByFields',                        'toolTip': 'manage grouping',                        'availableGroups': '|test-field|cf935cc2-a00c-4ad3-bca1-0865ab15afc1,',                                                'groups': [],                        'saveFunction': function (data) { return ChangeGroups('test-grid-id', data) }                    },                    //select columns control                    {                        'controlId': 'msColumnstest-grid-id',                        'controlType': 'multiselect',                        'toolTip': 'select columns',                        'title': '',                        'value': '',                        'iconClass': 'icon-insert-template',                        'sections': [                            {                                'heading': 'Current List',                                'divider': 'no',                                'options':                                    {                                     'test-field': { 'value': '', 'checked':false}                                    }                            },                            {                                'heading': 'Special Columns',                                'divider': 'no',                                'options':                                    {                                        'Gantt': { 'value': 'Gantt Chart', 'checked':false}                                    }                            }                        ],                        'applyButtonConfig': {                            'text': 'Apply',                            'function': function(data) { return ChangeColumns('test-grid-id', data) }                        },                        'onchangeFunction': function(data) {}                    },                    //view control                    {                        'controlId': 'ddlViewControltest-grid-id',                        'controlType': 'dropdown',                        'title': 'View: ',                        'value': 'dummy',                        'iconClass': 'none',                        'sections': [                            {                                'heading': 'none',                                'options': [                                {'iconClass': '','text': 'dummy','events': [{'eventName': 'click','function': function () { $('#ddlViewControl_ul_menu').toggle(); location.href='http://fake.url'; }}]}                                ]                            }]                    }]                }            ];                epmLiveGenericToolBar.generateToolBar('actionmenutest-grid-id', cfgs);}            //ExecuteOrDelayUntilScriptLoaded(loadMenutest-grid-id, 'EPMLive.js');            var viewURLs = [];var defaultViewUrl = \"\";</script>"));
        }

        [TestMethod]
        public void RenderActionMenu_GivenHtmlTextWriter_EnableContentReporting_ConfirmOutput()
        {
            // Arrange
            SetupShims();
            _testablePrivate.SetFieldOrProperty(BOOLShowViewBarField, true);
            ShimCoreFunctions.getListSettingStringSPList = (_, __) =>
            {
                return "\n\n\n||\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntrue";
            };
           
            // Act
            _testablePrivate.Invoke(RenderActionMenuMethod,
                new object[] { writer });

            // Assert
            _testablePrivate.ShouldSatisfyAllConditions(
                () => writeCount.ShouldBe(8),
                () => writerContent.ToString().ShouldBe("<div id=\"actionmenutest-grid-id\" style=\"width:100%\"></div><script language=\"javascript\">            MenuLoadedtest-grid-id = false;            function loadMenutest-grid-id()            {                if(MenuLoadedtest-grid-id)                    return;                MenuLoadedtest-grid-id = true;var cfgs = [                    {                        'placement': 'left',                        'content': [                        {                            'controlId': 'btnNew',                            'controlType': 'button',                            'iconClass': 'icon-plus-2',                            'title': 'New Item',                            'events': [                                {                                    'eventName': 'click',                                    'function': function () { newItemtest-grid-id(true); }                                }                            ]                        }                                            ]                    },{                    'placement': 'right',                    'content': [                    //search control                    {                        'controlId': 'btnSearchtest-grid-id',                        'controlType': 'button',                        'toolTip': 'search',                        'iconClass': 'icon-search-3',                        'title': 'none',                        'events': [                            {                                'eventName': 'click',                                'function': function () { GridHideShowSearch(Grids[\"GanttGridtest-grid-id\"]); }                            }                        ]                    },                    // filter button                    {                        'controlId': 'btnFiltertest-grid-id',                        'controlType': 'button',                        'toolTip': 'toggle filters',                        'iconClass': 'icon-filter',                        'title': 'none',                        'events': [                            {                                'eventName': 'click',                                'function': function () { GridHideShowFilter(Grids[\"GanttGridtest-grid-id\"]); }                            }                        ]                    },                    // default sort button                    {                        'controlId': 'btnDefaultSorttest-grid-id',                        'controlType': 'button',                        'toolTip': 'default sort',                        'iconClass': 'icon-menu-2',                        'title': 'none',                        'events': [                            {                                'eventName': 'click',                                'function': function () { GridSort(Grids[\"GanttGridtest-grid-id\"]); }                            }                        ]                    },                    //group by fields                    {                        'controlId': 'msGroupFieldstest-grid-id',                        'controlType': 'groupByFields',                        'toolTip': 'manage grouping',                        'availableGroups': '|Title|00000000-0000-0000-0000-000000000000,',                                                'groups': [],                        'saveFunction': function (data) { return ChangeGroups('test-grid-id', data) }                    },                    //select columns control                    {                        'controlId': 'msColumnstest-grid-id',                        'controlType': 'multiselect',                        'toolTip': 'select columns',                        'title': '',                        'value': '',                        'iconClass': 'icon-insert-template',                        'sections': [                            {                                'heading': 'Current List',                                'divider': 'no',                                'options':                                    {                                     'Title': { 'value': '', 'checked':false}                                    }                            },                            {                                'heading': 'Special Columns',                                'divider': 'no',                                'options':                                    {                                        'Gantt': { 'value': 'Gantt Chart', 'checked':false}                                    }                            }                        ],                        'applyButtonConfig': {                            'text': 'Apply',                            'function': function(data) { return ChangeColumns('test-grid-id', data) }                        },                        'onchangeFunction': function(data) {}                    },                    //view control                    {                        'controlId': 'ddlViewControltest-grid-id',                        'controlType': 'dropdown',                        'title': 'View: ',                        'value': 'dummy',                        'iconClass': 'none',                        'sections': [                            {                                'heading': 'none',                                'options': [                                {'iconClass': '','text': 'dummy','events': [{'eventName': 'click','function': function () { $('#ddlViewControl_ul_menu').toggle(); location.href='http://fake.url'; }}]}                                ]                            }]                    }]                }            ];                epmLiveGenericToolBar.generateToolBar('actionmenutest-grid-id', cfgs);}            //ExecuteOrDelayUntilScriptLoaded(loadMenutest-grid-id, 'EPMLive.js');            var viewURLs = [];var defaultViewUrl = \"\";</script>"));
        }

        [TestMethod]
        public void RenderActionMenu_GivenHtmlTextWriter_DoesUserHavePermissionsTrue_ConfirmOutput()
        {
            // Arrange
            SetupShims();
            _testablePrivate.SetFieldOrProperty(BOOLShowViewBarField, true);
            ShimSPList.AllInstances.DoesUserHavePermissionsSPBasePermissionsBoolean = (_, __, ___) => true;

            // Act
            _testablePrivate.Invoke(RenderActionMenuMethod,
                new object[] { writer });

            // Assert
            _testablePrivate.ShouldSatisfyAllConditions(
                () => writeCount.ShouldBe(10),
                () => writerContent.ToString().ShouldBe("<div id=\"actionmenutest-grid-id\" style=\"width:100%\"></div><script language=\"javascript\">            MenuLoadedtest-grid-id = false;            function loadMenutest-grid-id()            {                if(MenuLoadedtest-grid-id)                    return;                MenuLoadedtest-grid-id = true;var cfgs = [                    {                        'placement': 'left',                        'content': [                        {                            'controlId': 'btnNew',                            'controlType': 'button',                            'iconClass': 'icon-plus-2',                            'title': 'New Item',                            'events': [                                {                                    'eventName': 'click',                                    'function': function () { newItemtest-grid-id(true); }                                }                            ]                        }                                            ]                    },{                    'placement': 'right',                    'content': [                    //search control                    {                        'controlId': 'btnSearchtest-grid-id',                        'controlType': 'button',                        'toolTip': 'search',                        'iconClass': 'icon-search-3',                        'title': 'none',                        'events': [                            {                                'eventName': 'click',                                'function': function () { GridHideShowSearch(Grids[\"GanttGridtest-grid-id\"]); }                            }                        ]                    },                    // filter button                    {                        'controlId': 'btnFiltertest-grid-id',                        'controlType': 'button',                        'toolTip': 'toggle filters',                        'iconClass': 'icon-filter',                        'title': 'none',                        'events': [                            {                                'eventName': 'click',                                'function': function () { GridHideShowFilter(Grids[\"GanttGridtest-grid-id\"]); }                            }                        ]                    },                    // default sort button                    {                        'controlId': 'btnDefaultSorttest-grid-id',                        'controlType': 'button',                        'toolTip': 'default sort',                        'iconClass': 'icon-menu-2',                        'title': 'none',                        'events': [                            {                                'eventName': 'click',                                'function': function () { GridSort(Grids[\"GanttGridtest-grid-id\"]); }                            }                        ]                    },                    //group by fields                    {                        'controlId': 'msGroupFieldstest-grid-id',                        'controlType': 'groupByFields',                        'toolTip': 'manage grouping',                        'availableGroups': '|Title|00000000-0000-0000-0000-000000000000,',                                                'groups': [],                        'saveFunction': function (data) { return ChangeGroups('test-grid-id', data) }                    },                    //select columns control                    {                        'controlId': 'msColumnstest-grid-id',                        'controlType': 'multiselect',                        'toolTip': 'select columns',                        'title': '',                        'value': '',                        'iconClass': 'icon-insert-template',                        'sections': [                            {                                'heading': 'Current List',                                'divider': 'no',                                'options':                                    {                                     'Title': { 'value': '', 'checked':false}                                    }                            },                            {                                'heading': 'Special Columns',                                'divider': 'no',                                'options':                                    {                                        'Gantt': { 'value': 'Gantt Chart', 'checked':false}                                    }                            }                        ],                        'applyButtonConfig': {                            'text': 'Apply',                            'function': function(data) { return ChangeColumns('test-grid-id', data) }                        },                        'onchangeFunction': function(data) {}                    },                    //view control                    {                        'controlId': 'ddlViewControltest-grid-id',                        'controlType': 'dropdown',                        'title': 'View: ',                        'value': 'dummy',                        'iconClass': 'none',                        'sections': [                            {                                'heading': 'none',                                'options': [                                {'iconClass': '','text': 'dummy','events': [{'eventName': 'click','function': function () { $('#ddlViewControl_ul_menu').toggle(); location.href='http://fake.url'; }}]}                                ]                            },                                    {                                        'heading': 'none',                                        'divider': 'yes',                                        'options': [                                            {                                                'iconClass': 'icon-pencil icon-dropdown',                                                'text': 'Edit View',                                                'events': [                                                    {                                                        'eventName': 'click',                                                        'function': function () { $('#ddlViewControl_ul_menu').toggle(); return GridListEditView('00000000-0000-0000-0000-000000000000','00000000-0000-0000-0000-000000000000'); }                                                        //add a callback method                                                    }                                                ]                                            },                                            {                                                'iconClass': 'icon-plus-2 icon-dropdown',                                                'text': 'Create View',                                                'events': [                                                    {                                                        'eventName': 'click',                                                        'function': function () { $('#ddlViewControl_ul_menu').toggle(); return GridListCreateView('00000000-0000-0000-0000-000000000000'); }                                                    }                                                ]                                            }                                        ]                                    }]                    },                    {                        'controlId': 'btnSettings',                        'controlType': 'button',                        'toolTip': 'settings',                        'iconClass': 'icon-cog-2 ',                        'title': 'none',                        'events': [                            {                                'eventName': 'click',                                'function': function () { GridListSettings('00000000-0000-0000-0000-000000000000'); }                            }                        ]                    }]                }            ];                epmLiveGenericToolBar.generateToolBar('actionmenutest-grid-id', cfgs);}            //ExecuteOrDelayUntilScriptLoaded(loadMenutest-grid-id, 'EPMLive.js');            var viewURLs = [];var defaultViewUrl = \"\";</script>"));
        }
    }
}
