//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace ProjectPublisher2016.EPKWebService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WebServiceSoap", Namespace="PPM.Services")]
    public partial class WebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback BeginSessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback BeginSessionExOperationCompleted;
        
        private System.Threading.SendOrPostCallback EndSessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback XMLRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback SessionInfoOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WebService() {
            this.Url = global::ProjectPublisher2016.Properties.Settings.Default.ProjectPublisher2016_EPKWebService_WebService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event BeginSessionCompletedEventHandler BeginSessionCompleted;
        
        /// <remarks/>
        public event BeginSessionExCompletedEventHandler BeginSessionExCompleted;
        
        /// <remarks/>
        public event EndSessionCompletedEventHandler EndSessionCompleted;
        
        /// <remarks/>
        public event XMLRequestCompletedEventHandler XMLRequestCompleted;
        
        /// <remarks/>
        public event SessionInfoCompletedEventHandler SessionInfoCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("PPM.Services/BeginSession", RequestNamespace="PPM.Services", ResponseNamespace="PPM.Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BeginSession(string sUserName, string sPassword, string sNTAuth) {
            object[] results = this.Invoke("BeginSession", new object[] {
                        sUserName,
                        sPassword,
                        sNTAuth});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BeginSessionAsync(string sUserName, string sPassword, string sNTAuth) {
            this.BeginSessionAsync(sUserName, sPassword, sNTAuth, null);
        }
        
        /// <remarks/>
        public void BeginSessionAsync(string sUserName, string sPassword, string sNTAuth, object userState) {
            if ((this.BeginSessionOperationCompleted == null)) {
                this.BeginSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBeginSessionOperationCompleted);
            }
            this.InvokeAsync("BeginSession", new object[] {
                        sUserName,
                        sPassword,
                        sNTAuth}, this.BeginSessionOperationCompleted, userState);
        }
        
        private void OnBeginSessionOperationCompleted(object arg) {
            if ((this.BeginSessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BeginSessionCompleted(this, new BeginSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("PPM.Services/BeginSessionEx", RequestNamespace="PPM.Services", ResponseNamespace="PPM.Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BeginSessionEx() {
            object[] results = this.Invoke("BeginSessionEx", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BeginSessionExAsync() {
            this.BeginSessionExAsync(null);
        }
        
        /// <remarks/>
        public void BeginSessionExAsync(object userState) {
            if ((this.BeginSessionExOperationCompleted == null)) {
                this.BeginSessionExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBeginSessionExOperationCompleted);
            }
            this.InvokeAsync("BeginSessionEx", new object[0], this.BeginSessionExOperationCompleted, userState);
        }
        
        private void OnBeginSessionExOperationCompleted(object arg) {
            if ((this.BeginSessionExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BeginSessionExCompleted(this, new BeginSessionExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("PPM.Services/EndSession", RequestNamespace="PPM.Services", ResponseNamespace="PPM.Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EndSession() {
            this.Invoke("EndSession", new object[0]);
        }
        
        /// <remarks/>
        public void EndSessionAsync() {
            this.EndSessionAsync(null);
        }
        
        /// <remarks/>
        public void EndSessionAsync(object userState) {
            if ((this.EndSessionOperationCompleted == null)) {
                this.EndSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEndSessionOperationCompleted);
            }
            this.InvokeAsync("EndSession", new object[0], this.EndSessionOperationCompleted, userState);
        }
        
        private void OnEndSessionOperationCompleted(object arg) {
            if ((this.EndSessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EndSessionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("PPM.Services/XMLRequest", RequestNamespace="PPM.Services", ResponseNamespace="PPM.Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string XMLRequest(string sContext, string sRequest) {
            object[] results = this.Invoke("XMLRequest", new object[] {
                        sContext,
                        sRequest});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void XMLRequestAsync(string sContext, string sRequest) {
            this.XMLRequestAsync(sContext, sRequest, null);
        }
        
        /// <remarks/>
        public void XMLRequestAsync(string sContext, string sRequest, object userState) {
            if ((this.XMLRequestOperationCompleted == null)) {
                this.XMLRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnXMLRequestOperationCompleted);
            }
            this.InvokeAsync("XMLRequest", new object[] {
                        sContext,
                        sRequest}, this.XMLRequestOperationCompleted, userState);
        }
        
        private void OnXMLRequestOperationCompleted(object arg) {
            if ((this.XMLRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.XMLRequestCompleted(this, new XMLRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("PPM.Services/SessionInfo", RequestNamespace="PPM.Services", ResponseNamespace="PPM.Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SessionInfo(string sItem) {
            object[] results = this.Invoke("SessionInfo", new object[] {
                        sItem});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SessionInfoAsync(string sItem) {
            this.SessionInfoAsync(sItem, null);
        }
        
        /// <remarks/>
        public void SessionInfoAsync(string sItem, object userState) {
            if ((this.SessionInfoOperationCompleted == null)) {
                this.SessionInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSessionInfoOperationCompleted);
            }
            this.InvokeAsync("SessionInfo", new object[] {
                        sItem}, this.SessionInfoOperationCompleted, userState);
        }
        
        private void OnSessionInfoOperationCompleted(object arg) {
            if ((this.SessionInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SessionInfoCompleted(this, new SessionInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void BeginSessionCompletedEventHandler(object sender, BeginSessionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BeginSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BeginSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void BeginSessionExCompletedEventHandler(object sender, BeginSessionExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BeginSessionExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BeginSessionExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void EndSessionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void XMLRequestCompletedEventHandler(object sender, XMLRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class XMLRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal XMLRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SessionInfoCompletedEventHandler(object sender, SessionInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SessionInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SessionInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591