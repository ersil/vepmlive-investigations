//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18331
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UplandIntegrations.TenroxAuthService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserToken", Namespace="http://schemas.datacontract.org/2004/07/Tenrox.Shared.Utilities")]
    [System.SerializableAttribute()]
    public partial class UserToken : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuthenticatedGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ForceTenroxField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IPAddressFieldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrgNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UniqueIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AuthenticatedGuid {
            get {
                return this.AuthenticatedGuidField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthenticatedGuidField, value) != true)) {
                    this.AuthenticatedGuidField = value;
                    this.RaisePropertyChanged("AuthenticatedGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ForceTenrox {
            get {
                return this.ForceTenroxField;
            }
            set {
                if ((this.ForceTenroxField.Equals(value) != true)) {
                    this.ForceTenroxField = value;
                    this.RaisePropertyChanged("ForceTenrox");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IPAddressField {
            get {
                return this.IPAddressFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.IPAddressFieldField, value) != true)) {
                    this.IPAddressFieldField = value;
                    this.RaisePropertyChanged("IPAddressField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrgName {
            get {
                return this.OrgNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OrgNameField, value) != true)) {
                    this.OrgNameField = value;
                    this.RaisePropertyChanged("OrgName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UniqueId {
            get {
                return this.UniqueIdField;
            }
            set {
                if ((this.UniqueIdField.Equals(value) != true)) {
                    this.UniqueIdField = value;
                    this.RaisePropertyChanged("UniqueId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TenroxFaultContract", Namespace="http://Tenrox.Server.Framework.WebServices.FaultContracts")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(UplandIntegrations.TenroxAuthService.LogonFaultContract))]
    public partial class TenroxFaultContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int ErrorIdField;
        
        private string ErrorMessageField;
        
        private System.Guid CorrelationIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int ErrorId {
            get {
                return this.ErrorIdField;
            }
            set {
                if ((this.ErrorIdField.Equals(value) != true)) {
                    this.ErrorIdField = value;
                    this.RaisePropertyChanged("ErrorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ErrorMessage {
            get {
                return this.ErrorMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMessageField, value) != true)) {
                    this.ErrorMessageField = value;
                    this.RaisePropertyChanged("ErrorMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true, Order=2)]
        public System.Guid CorrelationId {
            get {
                return this.CorrelationIdField;
            }
            set {
                if ((this.CorrelationIdField.Equals(value) != true)) {
                    this.CorrelationIdField = value;
                    this.RaisePropertyChanged("CorrelationId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LogonFaultContract", Namespace="http://Tenrox.Server.Framework.WebServices.FaultContracts")]
    [System.SerializableAttribute()]
    public partial class LogonFaultContract : UplandIntegrations.TenroxAuthService.TenroxFaultContract {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="Tenrox.Server.Framework.Business.ServiceContracts", ConfigurationName="TenroxAuthService.ILogonAs")]
    public interface ILogonAs {
        
        [System.ServiceModel.OperationContractAttribute(Action="LogonAs", ReplyAction="Tenrox.Server.Framework.Business.ServiceContracts/ILogonAs/AuthUserResponse")]
        string AuthUser(string p_strOrgName, string p_strUserName, string p_strPassword, string p_strIPAddress, bool p_boolForceTenrox);
        
        [System.ServiceModel.OperationContractAttribute(Action="LogonAs", ReplyAction="Tenrox.Server.Framework.Business.ServiceContracts/ILogonAs/AuthUserResponse")]
        System.Threading.Tasks.Task<string> AuthUserAsync(string p_strOrgName, string p_strUserName, string p_strPassword, string p_strIPAddress, bool p_boolForceTenrox);
        
        [System.ServiceModel.OperationContractAttribute(Action="LogonAsDesktop", ReplyAction="Tenrox.Server.Framework.Business.ServiceContracts/ILogonAs/AuthUserDesktopRespons" +
            "e")]
        string AuthUserDesktop(string p_strOrgName, string p_strUserName, string p_strPassword, string p_strIPAddress, bool p_boolForceTenrox);
        
        [System.ServiceModel.OperationContractAttribute(Action="LogonAsDesktop", ReplyAction="Tenrox.Server.Framework.Business.ServiceContracts/ILogonAs/AuthUserDesktopRespons" +
            "e")]
        System.Threading.Tasks.Task<string> AuthUserDesktopAsync(string p_strOrgName, string p_strUserName, string p_strPassword, string p_strIPAddress, bool p_boolForceTenrox);
        
        [System.ServiceModel.OperationContractAttribute(Action="LogonAsMobile", ReplyAction="Tenrox.Server.Framework.Business.ServiceContracts/ILogonAs/AuthUserMobileResponse" +
            "")]
        string AuthUserMobile(string p_strOrgName, string p_strUserName, string p_strPassword, string p_strIPAddress, bool p_boolForceTenrox);
        
        [System.ServiceModel.OperationContractAttribute(Action="LogonAsMobile", ReplyAction="Tenrox.Server.Framework.Business.ServiceContracts/ILogonAs/AuthUserMobileResponse" +
            "")]
        System.Threading.Tasks.Task<string> AuthUserMobileAsync(string p_strOrgName, string p_strUserName, string p_strPassword, string p_strIPAddress, bool p_boolForceTenrox);
        
        [System.ServiceModel.OperationContractAttribute(Action="Authenticate", ReplyAction="Tenrox.Server.Framework.Business.ServiceContracts/ILogonAs/AuthenticateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(UplandIntegrations.TenroxAuthService.LogonFaultContract), Action="Tenrox.Server.Framework.Business.ServiceContracts/ILogonAs/AuthenticateLogonFault" +
            "ContractFault", Name="LogonFaultContract", Namespace="http://Tenrox.Server.Framework.WebServices.FaultContracts")]
        UplandIntegrations.TenroxAuthService.UserToken Authenticate(string p_strOrgName, string p_strUserName, string p_strPassword, string p_strIPAddress, bool p_boolForceTenrox);
        
        [System.ServiceModel.OperationContractAttribute(Action="Authenticate", ReplyAction="Tenrox.Server.Framework.Business.ServiceContracts/ILogonAs/AuthenticateResponse")]
        System.Threading.Tasks.Task<UplandIntegrations.TenroxAuthService.UserToken> AuthenticateAsync(string p_strOrgName, string p_strUserName, string p_strPassword, string p_strIPAddress, bool p_boolForceTenrox);
        
        [System.ServiceModel.OperationContractAttribute(Action="ImpersonateUser", ReplyAction="Tenrox.Server.Framework.Business.ServiceContracts/ILogonAs/ImpersonateUserRespons" +
            "e")]
        string ImpersonateUser(string p_strOrgName, string p_strPassword, string p_strIPAddress, bool p_boolForceTenrox, int p_intIdToImpersonate);
        
        [System.ServiceModel.OperationContractAttribute(Action="ImpersonateUser", ReplyAction="Tenrox.Server.Framework.Business.ServiceContracts/ILogonAs/ImpersonateUserRespons" +
            "e")]
        System.Threading.Tasks.Task<string> ImpersonateUserAsync(string p_strOrgName, string p_strPassword, string p_strIPAddress, bool p_boolForceTenrox, int p_intIdToImpersonate);
        
        [System.ServiceModel.OperationContractAttribute(Action="ImpersonateUserToken", ReplyAction="Tenrox.Server.Framework.Business.ServiceContracts/ILogonAs/ImpersonateUserTokenRe" +
            "sponse")]
        string ImpersonateUserToken(string p_strToken, int p_intIdToImpersonate);
        
        [System.ServiceModel.OperationContractAttribute(Action="ImpersonateUserToken", ReplyAction="Tenrox.Server.Framework.Business.ServiceContracts/ILogonAs/ImpersonateUserTokenRe" +
            "sponse")]
        System.Threading.Tasks.Task<string> ImpersonateUserTokenAsync(string p_strToken, int p_intIdToImpersonate);
        
        [System.ServiceModel.OperationContractAttribute(Action="ReinitializeToken", ReplyAction="Tenrox.Server.Framework.Business.ServiceContracts/ILogonAs/ReinitializeTokenRespo" +
            "nse")]
        bool ReinitializeToken(UplandIntegrations.TenroxAuthService.UserToken p_userToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="ReinitializeToken", ReplyAction="Tenrox.Server.Framework.Business.ServiceContracts/ILogonAs/ReinitializeTokenRespo" +
            "nse")]
        System.Threading.Tasks.Task<bool> ReinitializeTokenAsync(UplandIntegrations.TenroxAuthService.UserToken p_userToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="Reinitialize", ReplyAction="Tenrox.Server.Framework.Business.ServiceContracts/ILogonAs/ReinitializeResponse")]
        bool Reinitialize(string p_strOrgname, string p_strLogonName, System.Guid p_AuthenticationGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="Reinitialize", ReplyAction="Tenrox.Server.Framework.Business.ServiceContracts/ILogonAs/ReinitializeResponse")]
        System.Threading.Tasks.Task<bool> ReinitializeAsync(string p_strOrgname, string p_strLogonName, System.Guid p_AuthenticationGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="VerifyUserInCache", ReplyAction="Tenrox.Server.Framework.Business.ServiceContracts/ILogonAs/VerifyUserInCacheRespo" +
            "nse")]
        int VerifyUserInCache(string p_strOrgname, string p_strLogonName, string p_AuthenticationGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="VerifyUserInCache", ReplyAction="Tenrox.Server.Framework.Business.ServiceContracts/ILogonAs/VerifyUserInCacheRespo" +
            "nse")]
        System.Threading.Tasks.Task<int> VerifyUserInCacheAsync(string p_strOrgname, string p_strLogonName, string p_AuthenticationGuid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILogonAsChannel : UplandIntegrations.TenroxAuthService.ILogonAs, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LogonAsClient : System.ServiceModel.ClientBase<UplandIntegrations.TenroxAuthService.ILogonAs>, UplandIntegrations.TenroxAuthService.ILogonAs {
        
        public LogonAsClient() {
        }
        
        public LogonAsClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LogonAsClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LogonAsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LogonAsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string AuthUser(string p_strOrgName, string p_strUserName, string p_strPassword, string p_strIPAddress, bool p_boolForceTenrox) {
            return base.Channel.AuthUser(p_strOrgName, p_strUserName, p_strPassword, p_strIPAddress, p_boolForceTenrox);
        }
        
        public System.Threading.Tasks.Task<string> AuthUserAsync(string p_strOrgName, string p_strUserName, string p_strPassword, string p_strIPAddress, bool p_boolForceTenrox) {
            return base.Channel.AuthUserAsync(p_strOrgName, p_strUserName, p_strPassword, p_strIPAddress, p_boolForceTenrox);
        }
        
        public string AuthUserDesktop(string p_strOrgName, string p_strUserName, string p_strPassword, string p_strIPAddress, bool p_boolForceTenrox) {
            return base.Channel.AuthUserDesktop(p_strOrgName, p_strUserName, p_strPassword, p_strIPAddress, p_boolForceTenrox);
        }
        
        public System.Threading.Tasks.Task<string> AuthUserDesktopAsync(string p_strOrgName, string p_strUserName, string p_strPassword, string p_strIPAddress, bool p_boolForceTenrox) {
            return base.Channel.AuthUserDesktopAsync(p_strOrgName, p_strUserName, p_strPassword, p_strIPAddress, p_boolForceTenrox);
        }
        
        public string AuthUserMobile(string p_strOrgName, string p_strUserName, string p_strPassword, string p_strIPAddress, bool p_boolForceTenrox) {
            return base.Channel.AuthUserMobile(p_strOrgName, p_strUserName, p_strPassword, p_strIPAddress, p_boolForceTenrox);
        }
        
        public System.Threading.Tasks.Task<string> AuthUserMobileAsync(string p_strOrgName, string p_strUserName, string p_strPassword, string p_strIPAddress, bool p_boolForceTenrox) {
            return base.Channel.AuthUserMobileAsync(p_strOrgName, p_strUserName, p_strPassword, p_strIPAddress, p_boolForceTenrox);
        }
        
        public UplandIntegrations.TenroxAuthService.UserToken Authenticate(string p_strOrgName, string p_strUserName, string p_strPassword, string p_strIPAddress, bool p_boolForceTenrox) {
            return base.Channel.Authenticate(p_strOrgName, p_strUserName, p_strPassword, p_strIPAddress, p_boolForceTenrox);
        }
        
        public System.Threading.Tasks.Task<UplandIntegrations.TenroxAuthService.UserToken> AuthenticateAsync(string p_strOrgName, string p_strUserName, string p_strPassword, string p_strIPAddress, bool p_boolForceTenrox) {
            return base.Channel.AuthenticateAsync(p_strOrgName, p_strUserName, p_strPassword, p_strIPAddress, p_boolForceTenrox);
        }
        
        public string ImpersonateUser(string p_strOrgName, string p_strPassword, string p_strIPAddress, bool p_boolForceTenrox, int p_intIdToImpersonate) {
            return base.Channel.ImpersonateUser(p_strOrgName, p_strPassword, p_strIPAddress, p_boolForceTenrox, p_intIdToImpersonate);
        }
        
        public System.Threading.Tasks.Task<string> ImpersonateUserAsync(string p_strOrgName, string p_strPassword, string p_strIPAddress, bool p_boolForceTenrox, int p_intIdToImpersonate) {
            return base.Channel.ImpersonateUserAsync(p_strOrgName, p_strPassword, p_strIPAddress, p_boolForceTenrox, p_intIdToImpersonate);
        }
        
        public string ImpersonateUserToken(string p_strToken, int p_intIdToImpersonate) {
            return base.Channel.ImpersonateUserToken(p_strToken, p_intIdToImpersonate);
        }
        
        public System.Threading.Tasks.Task<string> ImpersonateUserTokenAsync(string p_strToken, int p_intIdToImpersonate) {
            return base.Channel.ImpersonateUserTokenAsync(p_strToken, p_intIdToImpersonate);
        }
        
        public bool ReinitializeToken(UplandIntegrations.TenroxAuthService.UserToken p_userToken) {
            return base.Channel.ReinitializeToken(p_userToken);
        }
        
        public System.Threading.Tasks.Task<bool> ReinitializeTokenAsync(UplandIntegrations.TenroxAuthService.UserToken p_userToken) {
            return base.Channel.ReinitializeTokenAsync(p_userToken);
        }
        
        public bool Reinitialize(string p_strOrgname, string p_strLogonName, System.Guid p_AuthenticationGuid) {
            return base.Channel.Reinitialize(p_strOrgname, p_strLogonName, p_AuthenticationGuid);
        }
        
        public System.Threading.Tasks.Task<bool> ReinitializeAsync(string p_strOrgname, string p_strLogonName, System.Guid p_AuthenticationGuid) {
            return base.Channel.ReinitializeAsync(p_strOrgname, p_strLogonName, p_AuthenticationGuid);
        }
        
        public int VerifyUserInCache(string p_strOrgname, string p_strLogonName, string p_AuthenticationGuid) {
            return base.Channel.VerifyUserInCache(p_strOrgname, p_strLogonName, p_AuthenticationGuid);
        }
        
        public System.Threading.Tasks.Task<int> VerifyUserInCacheAsync(string p_strOrgname, string p_strLogonName, string p_AuthenticationGuid) {
            return base.Channel.VerifyUserInCacheAsync(p_strOrgname, p_strLogonName, p_AuthenticationGuid);
        }
    }
}
